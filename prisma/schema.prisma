// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // uses connection pooling
}

generator zod {
  provider                  = "zod-prisma-types"
  useMultipleFiles          = true
  createRelationValuesTypes = true
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  mesocycles    Mesocycle[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Mesocycle {
  id          String       @id @default(cuid())
  goal        String
  description String?
  startDate   Int
  endDate     Int
  numMicros   Int          @default(4)
  userId      String
  isActive    Boolean
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  microcycles Microcycle[]
}

model Microcycle {
  id           String        @id @default(cuid())
  goal         String
  startDate    Int
  endDate      Int
  schema       CycleSchema
  description  String?
  mesoId       String
  mesocycle    Mesocycle     @relation(fields: [mesoId], references: [id], onDelete: Cascade)
  trainingDays TrainingDay[]
}

model TrainingDay {
  id              String         @id @default(cuid())
  date            Int            @unique
  routines        Routine[]
  microcycle      Microcycle     @relation(fields: [microcycleId], references: [id])
  microcycleId    String
  recoveryLevel   RecoveryLevel? @relation(fields: [recoveryLevelId], references: [id])
  recoveryLevelId String?
  workoutLog      ExerciseLog[]
  note            Note?          @relation(fields: [noteId], references: [id])
  noteId          String?
}

model Routine {
  id               String          @id @default(cuid())
  name             String          @unique
  duration         Int?
  type             RoutineType
  sortOrder        String
  exercises        Exercise[]
  trainingDays     TrainingDay[]
  routineSubtype   RoutineSubtype? @relation(fields: [routineSubtypeId], references: [id])
  routineSubtypeId String?
  note             Note?           @relation(fields: [noteId], references: [id])
  noteId           String?
}

model RoutineSubtype {
  id      String    @id @default(cuid())
  type    String
  routine Routine[]
}

model Exercise {
  id        String        @id @default(cuid())
  name      String        @unique
  type      ExerciseType
  equipment Equipment
  imageId   Int?
  note      Note?         @relation(fields: [noteId], references: [id])
  noteId    String?
  history   ExerciseLog[]
  routines  Routine[]
}

model ExerciseLog {
  id            String       @id @default(cuid())
  exerciseId    String
  exercise      Exercise     @relation(fields: [exerciseId], references: [id])
  sets          Int?
  reps          Int?
  weight        Int?
  duration      Int?
  climbLog      ClimbLog[]
  note          Note?        @relation(fields: [noteId], references: [id])
  noteId        String?
  TrainingDay   TrainingDay? @relation(fields: [trainingDayId], references: [id])
  trainingDayId String?
}

model ClimbLog {
  id           String       @id @default(cuid())
  name         String?
  grade        Int
  project      Boolean?
  attempts     Int?
  flashed      Boolean?
  location     Location?    @relation(fields: [locationId], references: [id])
  locationId   String?
  note         Note?        @relation(fields: [noteId], references: [id])
  noteId       String?
  WorkoutLog   ExerciseLog? @relation(fields: [workoutLogId], references: [id])
  workoutLogId String?
}

model Location {
  id      String     @id @default(cuid())
  name    String
  address String?
  note    Note?      @relation(fields: [noteId], references: [id])
  climbs  ClimbLog[]
  noteId  String?
}

model RecoveryLevel {
  id           String        @id @default(cuid())
  level        String
  trainingDays TrainingDay[]
}

model Note {
  id           String        @id @default(cuid())
  text         String
  trainingDays TrainingDay[]
  exercises    Exercise[]
  climbs       ClimbLog[]
  locations    Location[]
  routines     Routine[]
  WorkoutLog   ExerciseLog[]
}

enum CycleType {
  MESO
  MICRO
}

enum CycleSchema {
  BOULDER_GAIN
  ROUTE_GAIN
  DUP
}

enum RoutineType {
  CLIMBING
  STRENGTH
  CONDITIONING
  WARMUP
  COOLDOWN
  ACTIVE_RECOVERY
  REST
}

enum ExerciseType {
  WEIGHTED_REPS
  BODYWEIGHT
  WEIGHTED_BW
  DURATION
  WARMUP
  CLIMBING_DRILL
  CLIMBING_SESSION
}

enum Equipment {
  NONE
  BARBELL
  DUMBBELL
  KETTLEBELL
  PLATE
  TRX
  OTHER
}
