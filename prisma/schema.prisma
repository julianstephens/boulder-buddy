// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator zod {
  provider         = "zod-prisma-types"
  useMultipleFiles = true
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  mesocycles    Mesocycle[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Mesocycle {
  id          String       @id @default(cuid())
  goal        String
  description String?
  startDate   Int
  endDate     Int
  userId      String
  schema      CycleSchema
  isActive    Boolean
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  microcycles Microcycle[]
}

model Microcycle {
  id           String        @id @default(cuid())
  goal         String
  description  String?
  mesoId       String
  mesocycle    Mesocycle     @relation(fields: [mesoId], references: [id], onDelete: Cascade)
  trainingDays TrainingDay[]
}

model TrainingDay {
  id              String         @id @default(cuid())
  date            Int
  recoveryLevel   RecoveryLevel? @relation(fields: [recoveryLevelId], references: [id])
  routine         Routine        @relation(fields: [routineId], references: [id])
  note            Note?          @relation(fields: [noteId], references: [id])
  noteId          String?
  microcycle      Microcycle?    @relation(fields: [microcycleId], references: [id])
  microcycleId    String?
  recoveryLevelId String?
  routineId       String
}

model Routine {
  id           String        @id @default(cuid())
  name         String
  duration     Int?
  note         Note?         @relation(fields: [noteId], references: [id])
  noteId       String?
  activities   Activity[]
  trainingDays TrainingDay[]
}

model Activity {
  id                 String          @id @default(cuid())
  type               ActivityType
  exercises          Exercise[]
  climbLog           Climb[]
  subtype            ActivitySubtype @relation(fields: [acitivitySubtypeId], references: [id])
  acitivitySubtypeId String
  routines           Routine[]
}

model ActivitySubtype {
  id       String     @id @default(cuid())
  type     String
  activity Activity[]
}

model Exercise {
  id         String       @id @default(cuid())
  name       String
  type       ExerciseType
  equipment  Equipment
  sets       Int
  reps       Int?
  weight     Int?
  duration   Int?
  imageId    Int?
  note       Note?        @relation(fields: [noteId], references: [id])
  noteId     String?
  activity   Activity?    @relation(fields: [activityId], references: [id])
  activityId String?
}

model Climb {
  id         String    @id @default(cuid())
  name       String?
  grade      Int
  project    Boolean?
  attempts   Int?
  flashed    Boolean?
  location   Location? @relation(fields: [locationId], references: [id])
  note       Note?     @relation(fields: [noteId], references: [id])
  noteId     String?
  activity   Activity? @relation(fields: [activityId], references: [id])
  activityId String?
  locationId String?
}

model Location {
  id      String  @id @default(cuid())
  name    String
  address String?
  note    Note?   @relation(fields: [noteId], references: [id])
  climbs  Climb[]
  noteId  String?
}

model RecoveryLevel {
  id           String        @id @default(cuid())
  level        String
  trainingDays TrainingDay[]
}

model Note {
  id           String        @id @default(cuid())
  text         String
  trainingDays TrainingDay[]
  exercises    Exercise[]
  climbs       Climb[]
  locations    Location[]
  routines     Routine[]
}

enum CycleType {
  MESO
  MICRO
}

enum CycleSchema {
  BOULDER_GAIN
  ROUTE_GAIN
  DUP
}

enum ActivityType {
  CLIMBING
  STRENGTH
  CONDITIONING
  ACTIVE_RECOVERY
  REST
}

enum ExerciseType {
  WEIGHTED_REPS
  BW_REPS
  WEIGHTED_BW
  DURATION
}

enum Equipment {
  NONE
  BARBELL
  DUMBBELL
  KETTLEBELL
  PLATE
  TRX
}
