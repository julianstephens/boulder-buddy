// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator zod {
  provider         = "zod-prisma-types"
  useMultipleFiles = true
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  mesocycles    Mesocycle[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Mesocycle {
  id          String       @id @default(cuid())
  goal        String
  description String?
  startDate   Int
  endDate     Int
  userId      String
  schema      CycleSchema
  isActive    Boolean
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  microcycles Microcycle[]

  @@map("Mesocycle")
}

model Microcycle {
  id            String          @id @default(cuid())
  goal          String
  description   String?
  mesoId        String
  mesocycle     Mesocycle       @relation(fields: [mesoId], references: [id], onDelete: Cascade)
  trainingBlock TrainingBlock[]
}

model TrainingBlock {
  id        String     @id @default(cuid())
  weekday   Int
  name      String
  duration  Int
  blockType String
  cycleId   String
  cycle     Microcycle @relation(fields: [cycleId], references: [id], onDelete: Cascade)
  log       ClimbLog?
}

model ClimbLog {
  id      String        @id @default(cuid())
  blockId String        @unique
  block   TrainingBlock @relation(fields: [blockId], references: [id], onDelete: Cascade)
  grade   Int
  project Boolean?
  notes   String
}

model Routine {
  id        String     @id @default(cuid())
  name      String
  exercises Exercise[]
}

model Exercise {
  id        String       @id @default(cuid())
  name      String
  type      ActivityType
  equipment Equipment
  sets      Int
  reps      Int?
  duration  Int?
  imageId   Int?

  routine   Routine? @relation(fields: [routineId], references: [id])
  routineId String?
}

enum CycleType {
  MESO
  MICRO
}

enum CycleSchema {
  BOULDER_GAIN
  ROUTE_GAIN
  DUP
}

enum BlockType {
  CLIMBING
  STRENGTH
  CONDITIONING
  STRENGTH_CONDITIONING
  ACTIVE_RECOVERY
  REST
}

enum ActivityType {
  WEIGHTED_REPS
  BW_REPS
  WEIGHTED_BW
  DURATION
}

enum Equipment {
  NONE
  BARBELL
  DUMBBELL
  KETTLEBELL
  PLATE
  TRX
}
