// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "security": [],
                "description": "retrieve server status",
                "summary": "Healthcheck",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/router.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/router.Response"
                        }
                    }
                }
            }
        },
        "/mesos": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "get all mesocyles for current user",
                "tags": [
                    "Mesos"
                ],
                "summary": "Retrieve mesocyles",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/handlers.Mesocycle"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.Error"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "create a new mesocycle",
                "tags": [
                    "Mesos"
                ],
                "summary": "Create a mesocyle",
                "parameters": [
                    {
                        "description": "new mesocycle info",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.Mesocycle"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.Mesocycle"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.Error": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Machine-readable error code.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/utils.errorCode"
                        }
                    ]
                },
                "fields": {
                    "description": "Some context of error",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "message": {
                    "description": "Human-readable message.",
                    "type": "string"
                },
                "op": {
                    "description": "Logical operation.",
                    "type": "string"
                },
                "stack": {
                    "description": "Wrapped error"
                }
            }
        },
        "handlers.Mesocycle": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "endDate": {
                    "type": "integer"
                },
                "goal": {
                    "type": "string"
                },
                "isActive": {
                    "type": "boolean"
                },
                "numMicros": {
                    "type": "integer"
                },
                "startDate": {
                    "type": "integer"
                }
            }
        },
        "router.Response": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "utils.errorCode": {
            "type": "string",
            "enum": [
                "conflict",
                "internal",
                "invalid",
                "not_found",
                "not_modified",
                "already_exists",
                "permission_denied",
                "unauthenticated",
                "cannot_decode",
                "cannot_encode",
                "cannot_parse",
                "undefined_behavior",
                "unsupported",
                "test_error_code"
            ],
            "x-enum-varnames": [
                "ECONFLICT",
                "EINTERNAL",
                "EINVALID",
                "ENOTFOUND",
                "ENOTMODIFIED",
                "EALREADYEXISTS",
                "EPERMISSIONDENIED",
                "EUNAUTHENTICATED",
                "ECANNOTDECODE",
                "ECANNOTENCODE",
                "ECANNOTPARSE",
                "EBEHAVIOUR",
                "EUNSUPPORTED",
                "ETEST"
            ]
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:3500",
	BasePath:         "/api/v1",
	Schemes:          []string{"http"},
	Title:            "Boulder Buddy API",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
