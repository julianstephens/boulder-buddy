
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  detectRuntime,
} = require('./runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.2.0
 * Query Engine version: 2804dc98259d2ea960602aca6b8e7fdc03c1758f
 */
Prisma.prismaVersion = {
  client: "5.2.0",
  engine: "2804dc98259d2ea960602aca6b8e7fdc03c1758f"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.MesocycleScalarFieldEnum = {
  id: 'id',
  goal: 'goal',
  description: 'description',
  startDate: 'startDate',
  endDate: 'endDate',
  numMicros: 'numMicros',
  userId: 'userId',
  isActive: 'isActive'
};

exports.Prisma.MicrocycleScalarFieldEnum = {
  id: 'id',
  goal: 'goal',
  startDate: 'startDate',
  endDate: 'endDate',
  schema: 'schema',
  description: 'description',
  mesoId: 'mesoId'
};

exports.Prisma.TrainingDayScalarFieldEnum = {
  id: 'id',
  date: 'date',
  sortOrder: 'sortOrder',
  microcycleId: 'microcycleId',
  recoveryLevelId: 'recoveryLevelId',
  noteId: 'noteId'
};

exports.Prisma.RoutineScalarFieldEnum = {
  id: 'id',
  name: 'name',
  duration: 'duration',
  type: 'type',
  sortOrder: 'sortOrder',
  routineSubtypeId: 'routineSubtypeId',
  noteId: 'noteId'
};

exports.Prisma.RoutineSubtypeScalarFieldEnum = {
  id: 'id',
  type: 'type'
};

exports.Prisma.ExerciseScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  equipment: 'equipment',
  imageId: 'imageId',
  noteId: 'noteId'
};

exports.Prisma.ExerciseLogScalarFieldEnum = {
  id: 'id',
  exerciseId: 'exerciseId',
  sets: 'sets',
  reps: 'reps',
  weight: 'weight',
  duration: 'duration',
  noteId: 'noteId',
  trainingDayId: 'trainingDayId'
};

exports.Prisma.ClimbLogScalarFieldEnum = {
  id: 'id',
  name: 'name',
  grade: 'grade',
  project: 'project',
  attempts: 'attempts',
  flashed: 'flashed',
  locationId: 'locationId',
  noteId: 'noteId',
  workoutLogId: 'workoutLogId'
};

exports.Prisma.LocationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  address: 'address',
  noteId: 'noteId'
};

exports.Prisma.RecoveryLevelScalarFieldEnum = {
  id: 'id',
  level: 'level'
};

exports.Prisma.NoteScalarFieldEnum = {
  id: 'id',
  text: 'text'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.CycleSchema = exports.$Enums.CycleSchema = {
  BOULDER_GAIN: 'BOULDER_GAIN',
  ROUTE_GAIN: 'ROUTE_GAIN',
  DUP: 'DUP'
};

exports.RoutineType = exports.$Enums.RoutineType = {
  CLIMBING: 'CLIMBING',
  STRENGTH: 'STRENGTH',
  CONDITIONING: 'CONDITIONING',
  WARMUP: 'WARMUP',
  COOLDOWN: 'COOLDOWN',
  ACTIVE_RECOVERY: 'ACTIVE_RECOVERY',
  REST: 'REST'
};

exports.ExerciseType = exports.$Enums.ExerciseType = {
  WEIGHTED_REPS: 'WEIGHTED_REPS',
  BODYWEIGHT: 'BODYWEIGHT',
  WEIGHTED_BW: 'WEIGHTED_BW',
  DURATION: 'DURATION',
  WARMUP: 'WARMUP',
  CLIMBING_DRILL: 'CLIMBING_DRILL',
  CLIMBING_SESSION: 'CLIMBING_SESSION'
};

exports.Equipment = exports.$Enums.Equipment = {
  NONE: 'NONE',
  BARBELL: 'BARBELL',
  DUMBBELL: 'DUMBBELL',
  KETTLEBELL: 'KETTLEBELL',
  PLATE: 'PLATE',
  TRX: 'TRX',
  OTHER: 'OTHER'
};

exports.Prisma.ModelName = {
  Account: 'Account',
  Session: 'Session',
  User: 'User',
  VerificationToken: 'VerificationToken',
  Mesocycle: 'Mesocycle',
  Microcycle: 'Microcycle',
  TrainingDay: 'TrainingDay',
  Routine: 'Routine',
  RoutineSubtype: 'RoutineSubtype',
  Exercise: 'Exercise',
  ExerciseLog: 'ExerciseLog',
  ClimbLog: 'ClimbLog',
  Location: 'Location',
  RecoveryLevel: 'RecoveryLevel',
  Note: 'Note'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        const runtime = detectRuntime()
        const edgeRuntimeName = {
          'workerd': 'Cloudflare Workers',
          'deno': 'Deno and Deno Deploy',
          'netlify': 'Netlify Edge Functions',
          'edge-light': 'Vercel Edge Functions',
        }[runtime]

        let message = 'PrismaClient is unable to run in '
        if (edgeRuntimeName !== undefined) {
          message += edgeRuntimeName + '. As an alternative, try Accelerate: https://pris.ly/d/accelerate.'
        } else {
          message += 'this browser environment, or has been bundled for the browser (running in `' + runtime + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://github.com/prisma/prisma/issues`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
