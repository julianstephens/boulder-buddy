
/**
 * Client
**/

import * as runtime from './runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model VerificationToken
 * 
 */
export type VerificationToken = $Result.DefaultSelection<Prisma.$VerificationTokenPayload>
/**
 * Model Mesocycle
 * 
 */
export type Mesocycle = $Result.DefaultSelection<Prisma.$MesocyclePayload>
/**
 * Model Microcycle
 * 
 */
export type Microcycle = $Result.DefaultSelection<Prisma.$MicrocyclePayload>
/**
 * Model TrainingDay
 * 
 */
export type TrainingDay = $Result.DefaultSelection<Prisma.$TrainingDayPayload>
/**
 * Model Routine
 * 
 */
export type Routine = $Result.DefaultSelection<Prisma.$RoutinePayload>
/**
 * Model RoutineSubtype
 * 
 */
export type RoutineSubtype = $Result.DefaultSelection<Prisma.$RoutineSubtypePayload>
/**
 * Model Exercise
 * 
 */
export type Exercise = $Result.DefaultSelection<Prisma.$ExercisePayload>
/**
 * Model ExerciseLog
 * 
 */
export type ExerciseLog = $Result.DefaultSelection<Prisma.$ExerciseLogPayload>
/**
 * Model ClimbLog
 * 
 */
export type ClimbLog = $Result.DefaultSelection<Prisma.$ClimbLogPayload>
/**
 * Model Location
 * 
 */
export type Location = $Result.DefaultSelection<Prisma.$LocationPayload>
/**
 * Model RecoveryLevel
 * 
 */
export type RecoveryLevel = $Result.DefaultSelection<Prisma.$RecoveryLevelPayload>
/**
 * Model Note
 * 
 */
export type Note = $Result.DefaultSelection<Prisma.$NotePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const CycleSchema: {
  BOULDER_GAIN: 'BOULDER_GAIN',
  ROUTE_GAIN: 'ROUTE_GAIN',
  DUP: 'DUP'
};

export type CycleSchema = (typeof CycleSchema)[keyof typeof CycleSchema]


export const RoutineType: {
  CLIMBING: 'CLIMBING',
  STRENGTH: 'STRENGTH',
  CONDITIONING: 'CONDITIONING',
  WARMUP: 'WARMUP',
  COOLDOWN: 'COOLDOWN',
  ACTIVE_RECOVERY: 'ACTIVE_RECOVERY',
  REST: 'REST'
};

export type RoutineType = (typeof RoutineType)[keyof typeof RoutineType]


export const ExerciseType: {
  WEIGHTED_REPS: 'WEIGHTED_REPS',
  BODYWEIGHT: 'BODYWEIGHT',
  WEIGHTED_BW: 'WEIGHTED_BW',
  DURATION: 'DURATION',
  WARMUP: 'WARMUP',
  CLIMBING_DRILL: 'CLIMBING_DRILL',
  CLIMBING_SESSION: 'CLIMBING_SESSION'
};

export type ExerciseType = (typeof ExerciseType)[keyof typeof ExerciseType]


export const Equipment: {
  NONE: 'NONE',
  BARBELL: 'BARBELL',
  DUMBBELL: 'DUMBBELL',
  KETTLEBELL: 'KETTLEBELL',
  PLATE: 'PLATE',
  TRX: 'TRX',
  OTHER: 'OTHER'
};

export type Equipment = (typeof Equipment)[keyof typeof Equipment]

}

export type CycleSchema = $Enums.CycleSchema

export const CycleSchema: typeof $Enums.CycleSchema

export type RoutineType = $Enums.RoutineType

export const RoutineType: typeof $Enums.RoutineType

export type ExerciseType = $Enums.ExerciseType

export const ExerciseType: typeof $Enums.ExerciseType

export type Equipment = $Enums.Equipment

export const Equipment: typeof $Enums.Equipment

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Accounts
 * const accounts = await prisma.account.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Accounts
   * const accounts = await prisma.account.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.verificationToken`: Exposes CRUD operations for the **VerificationToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VerificationTokens
    * const verificationTokens = await prisma.verificationToken.findMany()
    * ```
    */
  get verificationToken(): Prisma.VerificationTokenDelegate<ExtArgs>;

  /**
   * `prisma.mesocycle`: Exposes CRUD operations for the **Mesocycle** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Mesocycles
    * const mesocycles = await prisma.mesocycle.findMany()
    * ```
    */
  get mesocycle(): Prisma.MesocycleDelegate<ExtArgs>;

  /**
   * `prisma.microcycle`: Exposes CRUD operations for the **Microcycle** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Microcycles
    * const microcycles = await prisma.microcycle.findMany()
    * ```
    */
  get microcycle(): Prisma.MicrocycleDelegate<ExtArgs>;

  /**
   * `prisma.trainingDay`: Exposes CRUD operations for the **TrainingDay** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TrainingDays
    * const trainingDays = await prisma.trainingDay.findMany()
    * ```
    */
  get trainingDay(): Prisma.TrainingDayDelegate<ExtArgs>;

  /**
   * `prisma.routine`: Exposes CRUD operations for the **Routine** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Routines
    * const routines = await prisma.routine.findMany()
    * ```
    */
  get routine(): Prisma.RoutineDelegate<ExtArgs>;

  /**
   * `prisma.routineSubtype`: Exposes CRUD operations for the **RoutineSubtype** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RoutineSubtypes
    * const routineSubtypes = await prisma.routineSubtype.findMany()
    * ```
    */
  get routineSubtype(): Prisma.RoutineSubtypeDelegate<ExtArgs>;

  /**
   * `prisma.exercise`: Exposes CRUD operations for the **Exercise** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Exercises
    * const exercises = await prisma.exercise.findMany()
    * ```
    */
  get exercise(): Prisma.ExerciseDelegate<ExtArgs>;

  /**
   * `prisma.exerciseLog`: Exposes CRUD operations for the **ExerciseLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ExerciseLogs
    * const exerciseLogs = await prisma.exerciseLog.findMany()
    * ```
    */
  get exerciseLog(): Prisma.ExerciseLogDelegate<ExtArgs>;

  /**
   * `prisma.climbLog`: Exposes CRUD operations for the **ClimbLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ClimbLogs
    * const climbLogs = await prisma.climbLog.findMany()
    * ```
    */
  get climbLog(): Prisma.ClimbLogDelegate<ExtArgs>;

  /**
   * `prisma.location`: Exposes CRUD operations for the **Location** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Locations
    * const locations = await prisma.location.findMany()
    * ```
    */
  get location(): Prisma.LocationDelegate<ExtArgs>;

  /**
   * `prisma.recoveryLevel`: Exposes CRUD operations for the **RecoveryLevel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RecoveryLevels
    * const recoveryLevels = await prisma.recoveryLevel.findMany()
    * ```
    */
  get recoveryLevel(): Prisma.RecoveryLevelDelegate<ExtArgs>;

  /**
   * `prisma.note`: Exposes CRUD operations for the **Note** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notes
    * const notes = await prisma.note.findMany()
    * ```
    */
  get note(): Prisma.NoteDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.2.0
   * Query Engine version: 2804dc98259d2ea960602aca6b8e7fdc03c1758f
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Account: 'Account',
    Session: 'Session',
    User: 'User',
    VerificationToken: 'VerificationToken',
    Mesocycle: 'Mesocycle',
    Microcycle: 'Microcycle',
    TrainingDay: 'TrainingDay',
    Routine: 'Routine',
    RoutineSubtype: 'RoutineSubtype',
    Exercise: 'Exercise',
    ExerciseLog: 'ExerciseLog',
    ClimbLog: 'ClimbLog',
    Location: 'Location',
    RecoveryLevel: 'RecoveryLevel',
    Note: 'Note'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'account' | 'session' | 'user' | 'verificationToken' | 'mesocycle' | 'microcycle' | 'trainingDay' | 'routine' | 'routineSubtype' | 'exercise' | 'exerciseLog' | 'climbLog' | 'location' | 'recoveryLevel' | 'note'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>,
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>,
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      VerificationToken: {
        payload: Prisma.$VerificationTokenPayload<ExtArgs>
        fields: Prisma.VerificationTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VerificationTokenFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VerificationTokenFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findFirst: {
            args: Prisma.VerificationTokenFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VerificationTokenFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findMany: {
            args: Prisma.VerificationTokenFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          create: {
            args: Prisma.VerificationTokenCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          createMany: {
            args: Prisma.VerificationTokenCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.VerificationTokenDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          update: {
            args: Prisma.VerificationTokenUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          deleteMany: {
            args: Prisma.VerificationTokenDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.VerificationTokenUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.VerificationTokenUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          aggregate: {
            args: Prisma.VerificationTokenAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateVerificationToken>
          }
          groupBy: {
            args: Prisma.VerificationTokenGroupByArgs<ExtArgs>,
            result: $Utils.Optional<VerificationTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.VerificationTokenCountArgs<ExtArgs>,
            result: $Utils.Optional<VerificationTokenCountAggregateOutputType> | number
          }
        }
      }
      Mesocycle: {
        payload: Prisma.$MesocyclePayload<ExtArgs>
        fields: Prisma.MesocycleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MesocycleFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MesocyclePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MesocycleFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MesocyclePayload>
          }
          findFirst: {
            args: Prisma.MesocycleFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MesocyclePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MesocycleFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MesocyclePayload>
          }
          findMany: {
            args: Prisma.MesocycleFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MesocyclePayload>[]
          }
          create: {
            args: Prisma.MesocycleCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MesocyclePayload>
          }
          createMany: {
            args: Prisma.MesocycleCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MesocycleDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MesocyclePayload>
          }
          update: {
            args: Prisma.MesocycleUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MesocyclePayload>
          }
          deleteMany: {
            args: Prisma.MesocycleDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MesocycleUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MesocycleUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MesocyclePayload>
          }
          aggregate: {
            args: Prisma.MesocycleAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMesocycle>
          }
          groupBy: {
            args: Prisma.MesocycleGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MesocycleGroupByOutputType>[]
          }
          count: {
            args: Prisma.MesocycleCountArgs<ExtArgs>,
            result: $Utils.Optional<MesocycleCountAggregateOutputType> | number
          }
        }
      }
      Microcycle: {
        payload: Prisma.$MicrocyclePayload<ExtArgs>
        fields: Prisma.MicrocycleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MicrocycleFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MicrocyclePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MicrocycleFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MicrocyclePayload>
          }
          findFirst: {
            args: Prisma.MicrocycleFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MicrocyclePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MicrocycleFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MicrocyclePayload>
          }
          findMany: {
            args: Prisma.MicrocycleFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MicrocyclePayload>[]
          }
          create: {
            args: Prisma.MicrocycleCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MicrocyclePayload>
          }
          createMany: {
            args: Prisma.MicrocycleCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MicrocycleDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MicrocyclePayload>
          }
          update: {
            args: Prisma.MicrocycleUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MicrocyclePayload>
          }
          deleteMany: {
            args: Prisma.MicrocycleDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MicrocycleUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MicrocycleUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MicrocyclePayload>
          }
          aggregate: {
            args: Prisma.MicrocycleAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMicrocycle>
          }
          groupBy: {
            args: Prisma.MicrocycleGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MicrocycleGroupByOutputType>[]
          }
          count: {
            args: Prisma.MicrocycleCountArgs<ExtArgs>,
            result: $Utils.Optional<MicrocycleCountAggregateOutputType> | number
          }
        }
      }
      TrainingDay: {
        payload: Prisma.$TrainingDayPayload<ExtArgs>
        fields: Prisma.TrainingDayFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TrainingDayFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TrainingDayPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TrainingDayFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TrainingDayPayload>
          }
          findFirst: {
            args: Prisma.TrainingDayFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TrainingDayPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TrainingDayFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TrainingDayPayload>
          }
          findMany: {
            args: Prisma.TrainingDayFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TrainingDayPayload>[]
          }
          create: {
            args: Prisma.TrainingDayCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TrainingDayPayload>
          }
          createMany: {
            args: Prisma.TrainingDayCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TrainingDayDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TrainingDayPayload>
          }
          update: {
            args: Prisma.TrainingDayUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TrainingDayPayload>
          }
          deleteMany: {
            args: Prisma.TrainingDayDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TrainingDayUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TrainingDayUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TrainingDayPayload>
          }
          aggregate: {
            args: Prisma.TrainingDayAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTrainingDay>
          }
          groupBy: {
            args: Prisma.TrainingDayGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TrainingDayGroupByOutputType>[]
          }
          count: {
            args: Prisma.TrainingDayCountArgs<ExtArgs>,
            result: $Utils.Optional<TrainingDayCountAggregateOutputType> | number
          }
        }
      }
      Routine: {
        payload: Prisma.$RoutinePayload<ExtArgs>
        fields: Prisma.RoutineFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoutineFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RoutinePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoutineFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RoutinePayload>
          }
          findFirst: {
            args: Prisma.RoutineFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RoutinePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoutineFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RoutinePayload>
          }
          findMany: {
            args: Prisma.RoutineFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RoutinePayload>[]
          }
          create: {
            args: Prisma.RoutineCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RoutinePayload>
          }
          createMany: {
            args: Prisma.RoutineCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.RoutineDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RoutinePayload>
          }
          update: {
            args: Prisma.RoutineUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RoutinePayload>
          }
          deleteMany: {
            args: Prisma.RoutineDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RoutineUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RoutineUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RoutinePayload>
          }
          aggregate: {
            args: Prisma.RoutineAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRoutine>
          }
          groupBy: {
            args: Prisma.RoutineGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RoutineGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoutineCountArgs<ExtArgs>,
            result: $Utils.Optional<RoutineCountAggregateOutputType> | number
          }
        }
      }
      RoutineSubtype: {
        payload: Prisma.$RoutineSubtypePayload<ExtArgs>
        fields: Prisma.RoutineSubtypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoutineSubtypeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RoutineSubtypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoutineSubtypeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RoutineSubtypePayload>
          }
          findFirst: {
            args: Prisma.RoutineSubtypeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RoutineSubtypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoutineSubtypeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RoutineSubtypePayload>
          }
          findMany: {
            args: Prisma.RoutineSubtypeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RoutineSubtypePayload>[]
          }
          create: {
            args: Prisma.RoutineSubtypeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RoutineSubtypePayload>
          }
          createMany: {
            args: Prisma.RoutineSubtypeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.RoutineSubtypeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RoutineSubtypePayload>
          }
          update: {
            args: Prisma.RoutineSubtypeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RoutineSubtypePayload>
          }
          deleteMany: {
            args: Prisma.RoutineSubtypeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RoutineSubtypeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RoutineSubtypeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RoutineSubtypePayload>
          }
          aggregate: {
            args: Prisma.RoutineSubtypeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRoutineSubtype>
          }
          groupBy: {
            args: Prisma.RoutineSubtypeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RoutineSubtypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoutineSubtypeCountArgs<ExtArgs>,
            result: $Utils.Optional<RoutineSubtypeCountAggregateOutputType> | number
          }
        }
      }
      Exercise: {
        payload: Prisma.$ExercisePayload<ExtArgs>
        fields: Prisma.ExerciseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExerciseFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExerciseFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          findFirst: {
            args: Prisma.ExerciseFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExerciseFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          findMany: {
            args: Prisma.ExerciseFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>[]
          }
          create: {
            args: Prisma.ExerciseCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          createMany: {
            args: Prisma.ExerciseCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ExerciseDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          update: {
            args: Prisma.ExerciseUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          deleteMany: {
            args: Prisma.ExerciseDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ExerciseUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ExerciseUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisePayload>
          }
          aggregate: {
            args: Prisma.ExerciseAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateExercise>
          }
          groupBy: {
            args: Prisma.ExerciseGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ExerciseGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExerciseCountArgs<ExtArgs>,
            result: $Utils.Optional<ExerciseCountAggregateOutputType> | number
          }
        }
      }
      ExerciseLog: {
        payload: Prisma.$ExerciseLogPayload<ExtArgs>
        fields: Prisma.ExerciseLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExerciseLogFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExerciseLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExerciseLogFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExerciseLogPayload>
          }
          findFirst: {
            args: Prisma.ExerciseLogFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExerciseLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExerciseLogFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExerciseLogPayload>
          }
          findMany: {
            args: Prisma.ExerciseLogFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExerciseLogPayload>[]
          }
          create: {
            args: Prisma.ExerciseLogCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExerciseLogPayload>
          }
          createMany: {
            args: Prisma.ExerciseLogCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ExerciseLogDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExerciseLogPayload>
          }
          update: {
            args: Prisma.ExerciseLogUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExerciseLogPayload>
          }
          deleteMany: {
            args: Prisma.ExerciseLogDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ExerciseLogUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ExerciseLogUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExerciseLogPayload>
          }
          aggregate: {
            args: Prisma.ExerciseLogAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateExerciseLog>
          }
          groupBy: {
            args: Prisma.ExerciseLogGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ExerciseLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExerciseLogCountArgs<ExtArgs>,
            result: $Utils.Optional<ExerciseLogCountAggregateOutputType> | number
          }
        }
      }
      ClimbLog: {
        payload: Prisma.$ClimbLogPayload<ExtArgs>
        fields: Prisma.ClimbLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClimbLogFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClimbLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClimbLogFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClimbLogPayload>
          }
          findFirst: {
            args: Prisma.ClimbLogFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClimbLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClimbLogFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClimbLogPayload>
          }
          findMany: {
            args: Prisma.ClimbLogFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClimbLogPayload>[]
          }
          create: {
            args: Prisma.ClimbLogCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClimbLogPayload>
          }
          createMany: {
            args: Prisma.ClimbLogCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ClimbLogDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClimbLogPayload>
          }
          update: {
            args: Prisma.ClimbLogUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClimbLogPayload>
          }
          deleteMany: {
            args: Prisma.ClimbLogDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ClimbLogUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ClimbLogUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClimbLogPayload>
          }
          aggregate: {
            args: Prisma.ClimbLogAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateClimbLog>
          }
          groupBy: {
            args: Prisma.ClimbLogGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ClimbLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClimbLogCountArgs<ExtArgs>,
            result: $Utils.Optional<ClimbLogCountAggregateOutputType> | number
          }
        }
      }
      Location: {
        payload: Prisma.$LocationPayload<ExtArgs>
        fields: Prisma.LocationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LocationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LocationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          findFirst: {
            args: Prisma.LocationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LocationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          findMany: {
            args: Prisma.LocationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>[]
          }
          create: {
            args: Prisma.LocationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          createMany: {
            args: Prisma.LocationCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.LocationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          update: {
            args: Prisma.LocationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          deleteMany: {
            args: Prisma.LocationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.LocationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.LocationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          aggregate: {
            args: Prisma.LocationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLocation>
          }
          groupBy: {
            args: Prisma.LocationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LocationGroupByOutputType>[]
          }
          count: {
            args: Prisma.LocationCountArgs<ExtArgs>,
            result: $Utils.Optional<LocationCountAggregateOutputType> | number
          }
        }
      }
      RecoveryLevel: {
        payload: Prisma.$RecoveryLevelPayload<ExtArgs>
        fields: Prisma.RecoveryLevelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RecoveryLevelFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecoveryLevelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RecoveryLevelFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecoveryLevelPayload>
          }
          findFirst: {
            args: Prisma.RecoveryLevelFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecoveryLevelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RecoveryLevelFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecoveryLevelPayload>
          }
          findMany: {
            args: Prisma.RecoveryLevelFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecoveryLevelPayload>[]
          }
          create: {
            args: Prisma.RecoveryLevelCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecoveryLevelPayload>
          }
          createMany: {
            args: Prisma.RecoveryLevelCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.RecoveryLevelDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecoveryLevelPayload>
          }
          update: {
            args: Prisma.RecoveryLevelUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecoveryLevelPayload>
          }
          deleteMany: {
            args: Prisma.RecoveryLevelDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RecoveryLevelUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RecoveryLevelUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecoveryLevelPayload>
          }
          aggregate: {
            args: Prisma.RecoveryLevelAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRecoveryLevel>
          }
          groupBy: {
            args: Prisma.RecoveryLevelGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RecoveryLevelGroupByOutputType>[]
          }
          count: {
            args: Prisma.RecoveryLevelCountArgs<ExtArgs>,
            result: $Utils.Optional<RecoveryLevelCountAggregateOutputType> | number
          }
        }
      }
      Note: {
        payload: Prisma.$NotePayload<ExtArgs>
        fields: Prisma.NoteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NoteFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NoteFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          findFirst: {
            args: Prisma.NoteFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NoteFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          findMany: {
            args: Prisma.NoteFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotePayload>[]
          }
          create: {
            args: Prisma.NoteCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          createMany: {
            args: Prisma.NoteCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.NoteDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          update: {
            args: Prisma.NoteUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          deleteMany: {
            args: Prisma.NoteDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.NoteUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.NoteUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          aggregate: {
            args: Prisma.NoteAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateNote>
          }
          groupBy: {
            args: Prisma.NoteGroupByArgs<ExtArgs>,
            result: $Utils.Optional<NoteGroupByOutputType>[]
          }
          count: {
            args: Prisma.NoteCountArgs<ExtArgs>,
            result: $Utils.Optional<NoteCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    accounts: number
    sessions: number
    mesocycles: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    accounts?: boolean | UserCountOutputTypeCountAccountsArgs
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    mesocycles?: boolean | UserCountOutputTypeCountMesocyclesArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMesocyclesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MesocycleWhereInput
  }



  /**
   * Count Type MesocycleCountOutputType
   */

  export type MesocycleCountOutputType = {
    microcycles: number
  }

  export type MesocycleCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    microcycles?: boolean | MesocycleCountOutputTypeCountMicrocyclesArgs
  }

  // Custom InputTypes

  /**
   * MesocycleCountOutputType without action
   */
  export type MesocycleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MesocycleCountOutputType
     */
    select?: MesocycleCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * MesocycleCountOutputType without action
   */
  export type MesocycleCountOutputTypeCountMicrocyclesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MicrocycleWhereInput
  }



  /**
   * Count Type MicrocycleCountOutputType
   */

  export type MicrocycleCountOutputType = {
    trainingDays: number
  }

  export type MicrocycleCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    trainingDays?: boolean | MicrocycleCountOutputTypeCountTrainingDaysArgs
  }

  // Custom InputTypes

  /**
   * MicrocycleCountOutputType without action
   */
  export type MicrocycleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MicrocycleCountOutputType
     */
    select?: MicrocycleCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * MicrocycleCountOutputType without action
   */
  export type MicrocycleCountOutputTypeCountTrainingDaysArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: TrainingDayWhereInput
  }



  /**
   * Count Type TrainingDayCountOutputType
   */

  export type TrainingDayCountOutputType = {
    routines: number
    workoutLog: number
  }

  export type TrainingDayCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    routines?: boolean | TrainingDayCountOutputTypeCountRoutinesArgs
    workoutLog?: boolean | TrainingDayCountOutputTypeCountWorkoutLogArgs
  }

  // Custom InputTypes

  /**
   * TrainingDayCountOutputType without action
   */
  export type TrainingDayCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingDayCountOutputType
     */
    select?: TrainingDayCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * TrainingDayCountOutputType without action
   */
  export type TrainingDayCountOutputTypeCountRoutinesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: RoutineWhereInput
  }


  /**
   * TrainingDayCountOutputType without action
   */
  export type TrainingDayCountOutputTypeCountWorkoutLogArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ExerciseLogWhereInput
  }



  /**
   * Count Type RoutineCountOutputType
   */

  export type RoutineCountOutputType = {
    exercises: number
    trainingDays: number
  }

  export type RoutineCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    exercises?: boolean | RoutineCountOutputTypeCountExercisesArgs
    trainingDays?: boolean | RoutineCountOutputTypeCountTrainingDaysArgs
  }

  // Custom InputTypes

  /**
   * RoutineCountOutputType without action
   */
  export type RoutineCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineCountOutputType
     */
    select?: RoutineCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * RoutineCountOutputType without action
   */
  export type RoutineCountOutputTypeCountExercisesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ExerciseWhereInput
  }


  /**
   * RoutineCountOutputType without action
   */
  export type RoutineCountOutputTypeCountTrainingDaysArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: TrainingDayWhereInput
  }



  /**
   * Count Type RoutineSubtypeCountOutputType
   */

  export type RoutineSubtypeCountOutputType = {
    routine: number
  }

  export type RoutineSubtypeCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    routine?: boolean | RoutineSubtypeCountOutputTypeCountRoutineArgs
  }

  // Custom InputTypes

  /**
   * RoutineSubtypeCountOutputType without action
   */
  export type RoutineSubtypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSubtypeCountOutputType
     */
    select?: RoutineSubtypeCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * RoutineSubtypeCountOutputType without action
   */
  export type RoutineSubtypeCountOutputTypeCountRoutineArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: RoutineWhereInput
  }



  /**
   * Count Type ExerciseCountOutputType
   */

  export type ExerciseCountOutputType = {
    history: number
    routines: number
  }

  export type ExerciseCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    history?: boolean | ExerciseCountOutputTypeCountHistoryArgs
    routines?: boolean | ExerciseCountOutputTypeCountRoutinesArgs
  }

  // Custom InputTypes

  /**
   * ExerciseCountOutputType without action
   */
  export type ExerciseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseCountOutputType
     */
    select?: ExerciseCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ExerciseCountOutputType without action
   */
  export type ExerciseCountOutputTypeCountHistoryArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ExerciseLogWhereInput
  }


  /**
   * ExerciseCountOutputType without action
   */
  export type ExerciseCountOutputTypeCountRoutinesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: RoutineWhereInput
  }



  /**
   * Count Type ExerciseLogCountOutputType
   */

  export type ExerciseLogCountOutputType = {
    climbLog: number
  }

  export type ExerciseLogCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    climbLog?: boolean | ExerciseLogCountOutputTypeCountClimbLogArgs
  }

  // Custom InputTypes

  /**
   * ExerciseLogCountOutputType without action
   */
  export type ExerciseLogCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseLogCountOutputType
     */
    select?: ExerciseLogCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ExerciseLogCountOutputType without action
   */
  export type ExerciseLogCountOutputTypeCountClimbLogArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ClimbLogWhereInput
  }



  /**
   * Count Type LocationCountOutputType
   */

  export type LocationCountOutputType = {
    climbs: number
  }

  export type LocationCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    climbs?: boolean | LocationCountOutputTypeCountClimbsArgs
  }

  // Custom InputTypes

  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationCountOutputType
     */
    select?: LocationCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeCountClimbsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ClimbLogWhereInput
  }



  /**
   * Count Type RecoveryLevelCountOutputType
   */

  export type RecoveryLevelCountOutputType = {
    trainingDays: number
  }

  export type RecoveryLevelCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    trainingDays?: boolean | RecoveryLevelCountOutputTypeCountTrainingDaysArgs
  }

  // Custom InputTypes

  /**
   * RecoveryLevelCountOutputType without action
   */
  export type RecoveryLevelCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecoveryLevelCountOutputType
     */
    select?: RecoveryLevelCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * RecoveryLevelCountOutputType without action
   */
  export type RecoveryLevelCountOutputTypeCountTrainingDaysArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: TrainingDayWhereInput
  }



  /**
   * Count Type NoteCountOutputType
   */

  export type NoteCountOutputType = {
    trainingDays: number
    exercises: number
    climbs: number
    locations: number
    routines: number
    WorkoutLog: number
  }

  export type NoteCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    trainingDays?: boolean | NoteCountOutputTypeCountTrainingDaysArgs
    exercises?: boolean | NoteCountOutputTypeCountExercisesArgs
    climbs?: boolean | NoteCountOutputTypeCountClimbsArgs
    locations?: boolean | NoteCountOutputTypeCountLocationsArgs
    routines?: boolean | NoteCountOutputTypeCountRoutinesArgs
    WorkoutLog?: boolean | NoteCountOutputTypeCountWorkoutLogArgs
  }

  // Custom InputTypes

  /**
   * NoteCountOutputType without action
   */
  export type NoteCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoteCountOutputType
     */
    select?: NoteCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * NoteCountOutputType without action
   */
  export type NoteCountOutputTypeCountTrainingDaysArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: TrainingDayWhereInput
  }


  /**
   * NoteCountOutputType without action
   */
  export type NoteCountOutputTypeCountExercisesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ExerciseWhereInput
  }


  /**
   * NoteCountOutputType without action
   */
  export type NoteCountOutputTypeCountClimbsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ClimbLogWhereInput
  }


  /**
   * NoteCountOutputType without action
   */
  export type NoteCountOutputTypeCountLocationsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: LocationWhereInput
  }


  /**
   * NoteCountOutputType without action
   */
  export type NoteCountOutputTypeCountRoutinesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: RoutineWhereInput
  }


  /**
   * NoteCountOutputType without action
   */
  export type NoteCountOutputTypeCountWorkoutLogArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ExerciseLogWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountSumAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    provider: number
    providerAccountId: number
    refresh_token: number
    access_token: number
    expires_at: number
    token_type: number
    scope: number
    id_token: number
    session_state: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    expires_at?: true
  }

  export type AccountSumAggregateInputType = {
    expires_at?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
  }

  export type AccountInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $AccountPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: string
      userId: string
      type: string
      provider: string
      providerAccountId: string
      refresh_token: string | null
      access_token: string | null
      expires_at: number | null
      token_type: string | null
      scope: string | null
      id_token: string | null
      session_state: string | null
    }, ExtArgs["result"]["account"]>
    composites: {}
  }


  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<AccountFindManyArgs, 'select' | 'include'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AccountFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Account that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AccountFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AccountFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
    **/
    create<T extends AccountCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AccountCreateArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Accounts.
     *     @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     *     @example
     *     // Create many Accounts
     *     const account = await prisma.account.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AccountCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
    **/
    delete<T extends AccountDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AccountUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AccountDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AccountUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
    **/
    upsert<T extends AccountUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Account model
   */ 
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'String'>
    readonly userId: FieldRef<"Account", 'String'>
    readonly type: FieldRef<"Account", 'String'>
    readonly provider: FieldRef<"Account", 'String'>
    readonly providerAccountId: FieldRef<"Account", 'String'>
    readonly refresh_token: FieldRef<"Account", 'String'>
    readonly access_token: FieldRef<"Account", 'String'>
    readonly expires_at: FieldRef<"Account", 'Int'>
    readonly token_type: FieldRef<"Account", 'String'>
    readonly scope: FieldRef<"Account", 'String'>
    readonly id_token: FieldRef<"Account", 'String'>
    readonly session_state: FieldRef<"Account", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }


  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }


  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }


  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }


  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }


  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }


  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }


  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
  }


  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }


  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }


  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
  }


  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
  }



  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    sessionToken: number
    userId: number
    expires: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    sessionToken: string
    userId: string
    expires: Date
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
  }

  export type SessionInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $SessionPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: string
      sessionToken: string
      userId: string
      expires: Date
    }, ExtArgs["result"]["session"]>
    composites: {}
  }


  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<SessionFindManyArgs, 'select' | 'include'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SessionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Session that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SessionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SessionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
    **/
    create<T extends SessionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SessionCreateArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Sessions.
     *     @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     *     @example
     *     // Create many Sessions
     *     const session = await prisma.session.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SessionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
    **/
    delete<T extends SessionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SessionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SessionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SessionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
    **/
    upsert<T extends SessionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Session model
   */ 
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly sessionToken: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'String'>
    readonly expires: FieldRef<"Session", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }


  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }


  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }


  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }


  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
  }


  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }


  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
  }


  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
  }



  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    emailVerified: number
    image: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    accounts?: boolean | User$accountsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    mesocycles?: boolean | User$mesocyclesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    accounts?: boolean | User$accountsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    mesocycles?: boolean | User$mesocyclesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      accounts: Prisma.$AccountPayload<ExtArgs>[]
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      mesocycles: Prisma.$MesocyclePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: string
      name: string | null
      email: string | null
      emailVerified: Date | null
      image: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    accounts<T extends User$accountsArgs<ExtArgs> = {}>(args?: Subset<T, User$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findMany'> | Null>;

    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'findMany'> | Null>;

    mesocycles<T extends User$mesocyclesArgs<ExtArgs> = {}>(args?: Subset<T, User$mesocyclesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MesocyclePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly emailVerified: FieldRef<"User", 'DateTime'>
    readonly image: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data?: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.accounts
   */
  export type User$accountsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }


  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }


  /**
   * User.mesocycles
   */
  export type User$mesocyclesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mesocycle
     */
    select?: MesocycleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MesocycleInclude<ExtArgs> | null
    where?: MesocycleWhereInput
    orderBy?: MesocycleOrderByWithRelationInput | MesocycleOrderByWithRelationInput[]
    cursor?: MesocycleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MesocycleScalarFieldEnum | MesocycleScalarFieldEnum[]
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model VerificationToken
   */

  export type AggregateVerificationToken = {
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  export type VerificationTokenMinAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenMaxAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenCountAggregateOutputType = {
    identifier: number
    token: number
    expires: number
    _all: number
  }


  export type VerificationTokenMinAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenMaxAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenCountAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
    _all?: true
  }

  export type VerificationTokenAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationToken to aggregate.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VerificationTokens
    **/
    _count?: true | VerificationTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type GetVerificationTokenAggregateType<T extends VerificationTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateVerificationToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerificationToken[P]>
      : GetScalarType<T[P], AggregateVerificationToken[P]>
  }




  export type VerificationTokenGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: VerificationTokenWhereInput
    orderBy?: VerificationTokenOrderByWithAggregationInput | VerificationTokenOrderByWithAggregationInput[]
    by: VerificationTokenScalarFieldEnum[] | VerificationTokenScalarFieldEnum
    having?: VerificationTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationTokenCountAggregateInputType | true
    _min?: VerificationTokenMinAggregateInputType
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type VerificationTokenGroupByOutputType = {
    identifier: string
    token: string
    expires: Date
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  type GetVerificationTokenGroupByPayload<T extends VerificationTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VerificationTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
        }
      >
    >


  export type VerificationTokenSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectScalar = {
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }


  export type $VerificationTokenPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "VerificationToken"
    objects: {}
    scalars: $Extensions.GetResult<{
      identifier: string
      token: string
      expires: Date
    }, ExtArgs["result"]["verificationToken"]>
    composites: {}
  }


  type VerificationTokenGetPayload<S extends boolean | null | undefined | VerificationTokenDefaultArgs> = $Result.GetResult<Prisma.$VerificationTokenPayload, S>

  type VerificationTokenCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<VerificationTokenFindManyArgs, 'select' | 'include'> & {
      select?: VerificationTokenCountAggregateInputType | true
    }

  export interface VerificationTokenDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VerificationToken'], meta: { name: 'VerificationToken' } }
    /**
     * Find zero or one VerificationToken that matches the filter.
     * @param {VerificationTokenFindUniqueArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VerificationTokenFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, VerificationTokenFindUniqueArgs<ExtArgs>>
    ): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one VerificationToken that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {VerificationTokenFindUniqueOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends VerificationTokenFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VerificationTokenFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first VerificationToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VerificationTokenFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, VerificationTokenFindFirstArgs<ExtArgs>>
    ): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first VerificationToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends VerificationTokenFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VerificationTokenFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more VerificationTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany()
     * 
     * // Get first 10 VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany({ take: 10 })
     * 
     * // Only select the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.findMany({ select: { identifier: true } })
     * 
    **/
    findMany<T extends VerificationTokenFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VerificationTokenFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a VerificationToken.
     * @param {VerificationTokenCreateArgs} args - Arguments to create a VerificationToken.
     * @example
     * // Create one VerificationToken
     * const VerificationToken = await prisma.verificationToken.create({
     *   data: {
     *     // ... data to create a VerificationToken
     *   }
     * })
     * 
    **/
    create<T extends VerificationTokenCreateArgs<ExtArgs>>(
      args: SelectSubset<T, VerificationTokenCreateArgs<ExtArgs>>
    ): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many VerificationTokens.
     *     @param {VerificationTokenCreateManyArgs} args - Arguments to create many VerificationTokens.
     *     @example
     *     // Create many VerificationTokens
     *     const verificationToken = await prisma.verificationToken.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends VerificationTokenCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VerificationTokenCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a VerificationToken.
     * @param {VerificationTokenDeleteArgs} args - Arguments to delete one VerificationToken.
     * @example
     * // Delete one VerificationToken
     * const VerificationToken = await prisma.verificationToken.delete({
     *   where: {
     *     // ... filter to delete one VerificationToken
     *   }
     * })
     * 
    **/
    delete<T extends VerificationTokenDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, VerificationTokenDeleteArgs<ExtArgs>>
    ): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one VerificationToken.
     * @param {VerificationTokenUpdateArgs} args - Arguments to update one VerificationToken.
     * @example
     * // Update one VerificationToken
     * const verificationToken = await prisma.verificationToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VerificationTokenUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, VerificationTokenUpdateArgs<ExtArgs>>
    ): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more VerificationTokens.
     * @param {VerificationTokenDeleteManyArgs} args - Arguments to filter VerificationTokens to delete.
     * @example
     * // Delete a few VerificationTokens
     * const { count } = await prisma.verificationToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VerificationTokenDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VerificationTokenDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VerificationTokenUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, VerificationTokenUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one VerificationToken.
     * @param {VerificationTokenUpsertArgs} args - Arguments to update or create a VerificationToken.
     * @example
     * // Update or create a VerificationToken
     * const verificationToken = await prisma.verificationToken.upsert({
     *   create: {
     *     // ... data to create a VerificationToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VerificationToken we want to update
     *   }
     * })
    **/
    upsert<T extends VerificationTokenUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, VerificationTokenUpsertArgs<ExtArgs>>
    ): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenCountArgs} args - Arguments to filter VerificationTokens to count.
     * @example
     * // Count the number of VerificationTokens
     * const count = await prisma.verificationToken.count({
     *   where: {
     *     // ... the filter for the VerificationTokens we want to count
     *   }
     * })
    **/
    count<T extends VerificationTokenCountArgs>(
      args?: Subset<T, VerificationTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationTokenAggregateArgs>(args: Subset<T, VerificationTokenAggregateArgs>): Prisma.PrismaPromise<GetVerificationTokenAggregateType<T>>

    /**
     * Group by VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationTokenGroupByArgs['orderBy'] }
        : { orderBy?: VerificationTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VerificationToken model
   */
  readonly fields: VerificationTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VerificationToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VerificationTokenClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the VerificationToken model
   */ 
  interface VerificationTokenFieldRefs {
    readonly identifier: FieldRef<"VerificationToken", 'String'>
    readonly token: FieldRef<"VerificationToken", 'String'>
    readonly expires: FieldRef<"VerificationToken", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * VerificationToken findUnique
   */
  export type VerificationTokenFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }


  /**
   * VerificationToken findUniqueOrThrow
   */
  export type VerificationTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }


  /**
   * VerificationToken findFirst
   */
  export type VerificationTokenFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }


  /**
   * VerificationToken findFirstOrThrow
   */
  export type VerificationTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }


  /**
   * VerificationToken findMany
   */
  export type VerificationTokenFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationTokens to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }


  /**
   * VerificationToken create
   */
  export type VerificationTokenCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * The data needed to create a VerificationToken.
     */
    data: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
  }


  /**
   * VerificationToken createMany
   */
  export type VerificationTokenCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * VerificationToken update
   */
  export type VerificationTokenUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * The data needed to update a VerificationToken.
     */
    data: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
    /**
     * Choose, which VerificationToken to update.
     */
    where: VerificationTokenWhereUniqueInput
  }


  /**
   * VerificationToken updateMany
   */
  export type VerificationTokenUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VerificationTokens.
     */
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     */
    where?: VerificationTokenWhereInput
  }


  /**
   * VerificationToken upsert
   */
  export type VerificationTokenUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * The filter to search for the VerificationToken to update in case it exists.
     */
    where: VerificationTokenWhereUniqueInput
    /**
     * In case the VerificationToken found by the `where` argument doesn't exist, create a new VerificationToken with this data.
     */
    create: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
    /**
     * In case the VerificationToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
  }


  /**
   * VerificationToken delete
   */
  export type VerificationTokenDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter which VerificationToken to delete.
     */
    where: VerificationTokenWhereUniqueInput
  }


  /**
   * VerificationToken deleteMany
   */
  export type VerificationTokenDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationTokens to delete
     */
    where?: VerificationTokenWhereInput
  }


  /**
   * VerificationToken without action
   */
  export type VerificationTokenDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
  }



  /**
   * Model Mesocycle
   */

  export type AggregateMesocycle = {
    _count: MesocycleCountAggregateOutputType | null
    _avg: MesocycleAvgAggregateOutputType | null
    _sum: MesocycleSumAggregateOutputType | null
    _min: MesocycleMinAggregateOutputType | null
    _max: MesocycleMaxAggregateOutputType | null
  }

  export type MesocycleAvgAggregateOutputType = {
    startDate: number | null
    endDate: number | null
    numMicros: number | null
  }

  export type MesocycleSumAggregateOutputType = {
    startDate: number | null
    endDate: number | null
    numMicros: number | null
  }

  export type MesocycleMinAggregateOutputType = {
    id: string | null
    goal: string | null
    description: string | null
    startDate: number | null
    endDate: number | null
    numMicros: number | null
    userId: string | null
    isActive: boolean | null
  }

  export type MesocycleMaxAggregateOutputType = {
    id: string | null
    goal: string | null
    description: string | null
    startDate: number | null
    endDate: number | null
    numMicros: number | null
    userId: string | null
    isActive: boolean | null
  }

  export type MesocycleCountAggregateOutputType = {
    id: number
    goal: number
    description: number
    startDate: number
    endDate: number
    numMicros: number
    userId: number
    isActive: number
    _all: number
  }


  export type MesocycleAvgAggregateInputType = {
    startDate?: true
    endDate?: true
    numMicros?: true
  }

  export type MesocycleSumAggregateInputType = {
    startDate?: true
    endDate?: true
    numMicros?: true
  }

  export type MesocycleMinAggregateInputType = {
    id?: true
    goal?: true
    description?: true
    startDate?: true
    endDate?: true
    numMicros?: true
    userId?: true
    isActive?: true
  }

  export type MesocycleMaxAggregateInputType = {
    id?: true
    goal?: true
    description?: true
    startDate?: true
    endDate?: true
    numMicros?: true
    userId?: true
    isActive?: true
  }

  export type MesocycleCountAggregateInputType = {
    id?: true
    goal?: true
    description?: true
    startDate?: true
    endDate?: true
    numMicros?: true
    userId?: true
    isActive?: true
    _all?: true
  }

  export type MesocycleAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Mesocycle to aggregate.
     */
    where?: MesocycleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mesocycles to fetch.
     */
    orderBy?: MesocycleOrderByWithRelationInput | MesocycleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MesocycleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mesocycles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mesocycles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Mesocycles
    **/
    _count?: true | MesocycleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MesocycleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MesocycleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MesocycleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MesocycleMaxAggregateInputType
  }

  export type GetMesocycleAggregateType<T extends MesocycleAggregateArgs> = {
        [P in keyof T & keyof AggregateMesocycle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMesocycle[P]>
      : GetScalarType<T[P], AggregateMesocycle[P]>
  }




  export type MesocycleGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MesocycleWhereInput
    orderBy?: MesocycleOrderByWithAggregationInput | MesocycleOrderByWithAggregationInput[]
    by: MesocycleScalarFieldEnum[] | MesocycleScalarFieldEnum
    having?: MesocycleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MesocycleCountAggregateInputType | true
    _avg?: MesocycleAvgAggregateInputType
    _sum?: MesocycleSumAggregateInputType
    _min?: MesocycleMinAggregateInputType
    _max?: MesocycleMaxAggregateInputType
  }

  export type MesocycleGroupByOutputType = {
    id: string
    goal: string
    description: string | null
    startDate: number
    endDate: number
    numMicros: number
    userId: string
    isActive: boolean
    _count: MesocycleCountAggregateOutputType | null
    _avg: MesocycleAvgAggregateOutputType | null
    _sum: MesocycleSumAggregateOutputType | null
    _min: MesocycleMinAggregateOutputType | null
    _max: MesocycleMaxAggregateOutputType | null
  }

  type GetMesocycleGroupByPayload<T extends MesocycleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MesocycleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MesocycleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MesocycleGroupByOutputType[P]>
            : GetScalarType<T[P], MesocycleGroupByOutputType[P]>
        }
      >
    >


  export type MesocycleSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    goal?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    numMicros?: boolean
    userId?: boolean
    isActive?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    microcycles?: boolean | Mesocycle$microcyclesArgs<ExtArgs>
    _count?: boolean | MesocycleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mesocycle"]>

  export type MesocycleSelectScalar = {
    id?: boolean
    goal?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    numMicros?: boolean
    userId?: boolean
    isActive?: boolean
  }

  export type MesocycleInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    microcycles?: boolean | Mesocycle$microcyclesArgs<ExtArgs>
    _count?: boolean | MesocycleCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $MesocyclePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Mesocycle"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      microcycles: Prisma.$MicrocyclePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: string
      goal: string
      description: string | null
      startDate: number
      endDate: number
      numMicros: number
      userId: string
      isActive: boolean
    }, ExtArgs["result"]["mesocycle"]>
    composites: {}
  }


  type MesocycleGetPayload<S extends boolean | null | undefined | MesocycleDefaultArgs> = $Result.GetResult<Prisma.$MesocyclePayload, S>

  type MesocycleCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<MesocycleFindManyArgs, 'select' | 'include'> & {
      select?: MesocycleCountAggregateInputType | true
    }

  export interface MesocycleDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Mesocycle'], meta: { name: 'Mesocycle' } }
    /**
     * Find zero or one Mesocycle that matches the filter.
     * @param {MesocycleFindUniqueArgs} args - Arguments to find a Mesocycle
     * @example
     * // Get one Mesocycle
     * const mesocycle = await prisma.mesocycle.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MesocycleFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MesocycleFindUniqueArgs<ExtArgs>>
    ): Prisma__MesocycleClient<$Result.GetResult<Prisma.$MesocyclePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Mesocycle that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MesocycleFindUniqueOrThrowArgs} args - Arguments to find a Mesocycle
     * @example
     * // Get one Mesocycle
     * const mesocycle = await prisma.mesocycle.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MesocycleFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MesocycleFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MesocycleClient<$Result.GetResult<Prisma.$MesocyclePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Mesocycle that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MesocycleFindFirstArgs} args - Arguments to find a Mesocycle
     * @example
     * // Get one Mesocycle
     * const mesocycle = await prisma.mesocycle.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MesocycleFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MesocycleFindFirstArgs<ExtArgs>>
    ): Prisma__MesocycleClient<$Result.GetResult<Prisma.$MesocyclePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Mesocycle that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MesocycleFindFirstOrThrowArgs} args - Arguments to find a Mesocycle
     * @example
     * // Get one Mesocycle
     * const mesocycle = await prisma.mesocycle.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MesocycleFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MesocycleFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MesocycleClient<$Result.GetResult<Prisma.$MesocyclePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Mesocycles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MesocycleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Mesocycles
     * const mesocycles = await prisma.mesocycle.findMany()
     * 
     * // Get first 10 Mesocycles
     * const mesocycles = await prisma.mesocycle.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mesocycleWithIdOnly = await prisma.mesocycle.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MesocycleFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MesocycleFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MesocyclePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Mesocycle.
     * @param {MesocycleCreateArgs} args - Arguments to create a Mesocycle.
     * @example
     * // Create one Mesocycle
     * const Mesocycle = await prisma.mesocycle.create({
     *   data: {
     *     // ... data to create a Mesocycle
     *   }
     * })
     * 
    **/
    create<T extends MesocycleCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MesocycleCreateArgs<ExtArgs>>
    ): Prisma__MesocycleClient<$Result.GetResult<Prisma.$MesocyclePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Mesocycles.
     *     @param {MesocycleCreateManyArgs} args - Arguments to create many Mesocycles.
     *     @example
     *     // Create many Mesocycles
     *     const mesocycle = await prisma.mesocycle.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MesocycleCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MesocycleCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Mesocycle.
     * @param {MesocycleDeleteArgs} args - Arguments to delete one Mesocycle.
     * @example
     * // Delete one Mesocycle
     * const Mesocycle = await prisma.mesocycle.delete({
     *   where: {
     *     // ... filter to delete one Mesocycle
     *   }
     * })
     * 
    **/
    delete<T extends MesocycleDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MesocycleDeleteArgs<ExtArgs>>
    ): Prisma__MesocycleClient<$Result.GetResult<Prisma.$MesocyclePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Mesocycle.
     * @param {MesocycleUpdateArgs} args - Arguments to update one Mesocycle.
     * @example
     * // Update one Mesocycle
     * const mesocycle = await prisma.mesocycle.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MesocycleUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MesocycleUpdateArgs<ExtArgs>>
    ): Prisma__MesocycleClient<$Result.GetResult<Prisma.$MesocyclePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Mesocycles.
     * @param {MesocycleDeleteManyArgs} args - Arguments to filter Mesocycles to delete.
     * @example
     * // Delete a few Mesocycles
     * const { count } = await prisma.mesocycle.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MesocycleDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MesocycleDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Mesocycles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MesocycleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Mesocycles
     * const mesocycle = await prisma.mesocycle.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MesocycleUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MesocycleUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Mesocycle.
     * @param {MesocycleUpsertArgs} args - Arguments to update or create a Mesocycle.
     * @example
     * // Update or create a Mesocycle
     * const mesocycle = await prisma.mesocycle.upsert({
     *   create: {
     *     // ... data to create a Mesocycle
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Mesocycle we want to update
     *   }
     * })
    **/
    upsert<T extends MesocycleUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MesocycleUpsertArgs<ExtArgs>>
    ): Prisma__MesocycleClient<$Result.GetResult<Prisma.$MesocyclePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Mesocycles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MesocycleCountArgs} args - Arguments to filter Mesocycles to count.
     * @example
     * // Count the number of Mesocycles
     * const count = await prisma.mesocycle.count({
     *   where: {
     *     // ... the filter for the Mesocycles we want to count
     *   }
     * })
    **/
    count<T extends MesocycleCountArgs>(
      args?: Subset<T, MesocycleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MesocycleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Mesocycle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MesocycleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MesocycleAggregateArgs>(args: Subset<T, MesocycleAggregateArgs>): Prisma.PrismaPromise<GetMesocycleAggregateType<T>>

    /**
     * Group by Mesocycle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MesocycleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MesocycleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MesocycleGroupByArgs['orderBy'] }
        : { orderBy?: MesocycleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MesocycleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMesocycleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Mesocycle model
   */
  readonly fields: MesocycleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Mesocycle.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MesocycleClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    microcycles<T extends Mesocycle$microcyclesArgs<ExtArgs> = {}>(args?: Subset<T, Mesocycle$microcyclesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MicrocyclePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Mesocycle model
   */ 
  interface MesocycleFieldRefs {
    readonly id: FieldRef<"Mesocycle", 'String'>
    readonly goal: FieldRef<"Mesocycle", 'String'>
    readonly description: FieldRef<"Mesocycle", 'String'>
    readonly startDate: FieldRef<"Mesocycle", 'Int'>
    readonly endDate: FieldRef<"Mesocycle", 'Int'>
    readonly numMicros: FieldRef<"Mesocycle", 'Int'>
    readonly userId: FieldRef<"Mesocycle", 'String'>
    readonly isActive: FieldRef<"Mesocycle", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Mesocycle findUnique
   */
  export type MesocycleFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mesocycle
     */
    select?: MesocycleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MesocycleInclude<ExtArgs> | null
    /**
     * Filter, which Mesocycle to fetch.
     */
    where: MesocycleWhereUniqueInput
  }


  /**
   * Mesocycle findUniqueOrThrow
   */
  export type MesocycleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mesocycle
     */
    select?: MesocycleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MesocycleInclude<ExtArgs> | null
    /**
     * Filter, which Mesocycle to fetch.
     */
    where: MesocycleWhereUniqueInput
  }


  /**
   * Mesocycle findFirst
   */
  export type MesocycleFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mesocycle
     */
    select?: MesocycleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MesocycleInclude<ExtArgs> | null
    /**
     * Filter, which Mesocycle to fetch.
     */
    where?: MesocycleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mesocycles to fetch.
     */
    orderBy?: MesocycleOrderByWithRelationInput | MesocycleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Mesocycles.
     */
    cursor?: MesocycleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mesocycles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mesocycles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Mesocycles.
     */
    distinct?: MesocycleScalarFieldEnum | MesocycleScalarFieldEnum[]
  }


  /**
   * Mesocycle findFirstOrThrow
   */
  export type MesocycleFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mesocycle
     */
    select?: MesocycleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MesocycleInclude<ExtArgs> | null
    /**
     * Filter, which Mesocycle to fetch.
     */
    where?: MesocycleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mesocycles to fetch.
     */
    orderBy?: MesocycleOrderByWithRelationInput | MesocycleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Mesocycles.
     */
    cursor?: MesocycleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mesocycles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mesocycles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Mesocycles.
     */
    distinct?: MesocycleScalarFieldEnum | MesocycleScalarFieldEnum[]
  }


  /**
   * Mesocycle findMany
   */
  export type MesocycleFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mesocycle
     */
    select?: MesocycleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MesocycleInclude<ExtArgs> | null
    /**
     * Filter, which Mesocycles to fetch.
     */
    where?: MesocycleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mesocycles to fetch.
     */
    orderBy?: MesocycleOrderByWithRelationInput | MesocycleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Mesocycles.
     */
    cursor?: MesocycleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mesocycles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mesocycles.
     */
    skip?: number
    distinct?: MesocycleScalarFieldEnum | MesocycleScalarFieldEnum[]
  }


  /**
   * Mesocycle create
   */
  export type MesocycleCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mesocycle
     */
    select?: MesocycleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MesocycleInclude<ExtArgs> | null
    /**
     * The data needed to create a Mesocycle.
     */
    data: XOR<MesocycleCreateInput, MesocycleUncheckedCreateInput>
  }


  /**
   * Mesocycle createMany
   */
  export type MesocycleCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Mesocycles.
     */
    data: MesocycleCreateManyInput | MesocycleCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Mesocycle update
   */
  export type MesocycleUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mesocycle
     */
    select?: MesocycleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MesocycleInclude<ExtArgs> | null
    /**
     * The data needed to update a Mesocycle.
     */
    data: XOR<MesocycleUpdateInput, MesocycleUncheckedUpdateInput>
    /**
     * Choose, which Mesocycle to update.
     */
    where: MesocycleWhereUniqueInput
  }


  /**
   * Mesocycle updateMany
   */
  export type MesocycleUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Mesocycles.
     */
    data: XOR<MesocycleUpdateManyMutationInput, MesocycleUncheckedUpdateManyInput>
    /**
     * Filter which Mesocycles to update
     */
    where?: MesocycleWhereInput
  }


  /**
   * Mesocycle upsert
   */
  export type MesocycleUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mesocycle
     */
    select?: MesocycleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MesocycleInclude<ExtArgs> | null
    /**
     * The filter to search for the Mesocycle to update in case it exists.
     */
    where: MesocycleWhereUniqueInput
    /**
     * In case the Mesocycle found by the `where` argument doesn't exist, create a new Mesocycle with this data.
     */
    create: XOR<MesocycleCreateInput, MesocycleUncheckedCreateInput>
    /**
     * In case the Mesocycle was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MesocycleUpdateInput, MesocycleUncheckedUpdateInput>
  }


  /**
   * Mesocycle delete
   */
  export type MesocycleDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mesocycle
     */
    select?: MesocycleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MesocycleInclude<ExtArgs> | null
    /**
     * Filter which Mesocycle to delete.
     */
    where: MesocycleWhereUniqueInput
  }


  /**
   * Mesocycle deleteMany
   */
  export type MesocycleDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Mesocycles to delete
     */
    where?: MesocycleWhereInput
  }


  /**
   * Mesocycle.microcycles
   */
  export type Mesocycle$microcyclesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Microcycle
     */
    select?: MicrocycleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MicrocycleInclude<ExtArgs> | null
    where?: MicrocycleWhereInput
    orderBy?: MicrocycleOrderByWithRelationInput | MicrocycleOrderByWithRelationInput[]
    cursor?: MicrocycleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MicrocycleScalarFieldEnum | MicrocycleScalarFieldEnum[]
  }


  /**
   * Mesocycle without action
   */
  export type MesocycleDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mesocycle
     */
    select?: MesocycleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MesocycleInclude<ExtArgs> | null
  }



  /**
   * Model Microcycle
   */

  export type AggregateMicrocycle = {
    _count: MicrocycleCountAggregateOutputType | null
    _avg: MicrocycleAvgAggregateOutputType | null
    _sum: MicrocycleSumAggregateOutputType | null
    _min: MicrocycleMinAggregateOutputType | null
    _max: MicrocycleMaxAggregateOutputType | null
  }

  export type MicrocycleAvgAggregateOutputType = {
    startDate: number | null
    endDate: number | null
  }

  export type MicrocycleSumAggregateOutputType = {
    startDate: number | null
    endDate: number | null
  }

  export type MicrocycleMinAggregateOutputType = {
    id: string | null
    goal: string | null
    startDate: number | null
    endDate: number | null
    schema: $Enums.CycleSchema | null
    description: string | null
    mesoId: string | null
  }

  export type MicrocycleMaxAggregateOutputType = {
    id: string | null
    goal: string | null
    startDate: number | null
    endDate: number | null
    schema: $Enums.CycleSchema | null
    description: string | null
    mesoId: string | null
  }

  export type MicrocycleCountAggregateOutputType = {
    id: number
    goal: number
    startDate: number
    endDate: number
    schema: number
    description: number
    mesoId: number
    _all: number
  }


  export type MicrocycleAvgAggregateInputType = {
    startDate?: true
    endDate?: true
  }

  export type MicrocycleSumAggregateInputType = {
    startDate?: true
    endDate?: true
  }

  export type MicrocycleMinAggregateInputType = {
    id?: true
    goal?: true
    startDate?: true
    endDate?: true
    schema?: true
    description?: true
    mesoId?: true
  }

  export type MicrocycleMaxAggregateInputType = {
    id?: true
    goal?: true
    startDate?: true
    endDate?: true
    schema?: true
    description?: true
    mesoId?: true
  }

  export type MicrocycleCountAggregateInputType = {
    id?: true
    goal?: true
    startDate?: true
    endDate?: true
    schema?: true
    description?: true
    mesoId?: true
    _all?: true
  }

  export type MicrocycleAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Microcycle to aggregate.
     */
    where?: MicrocycleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Microcycles to fetch.
     */
    orderBy?: MicrocycleOrderByWithRelationInput | MicrocycleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MicrocycleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Microcycles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Microcycles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Microcycles
    **/
    _count?: true | MicrocycleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MicrocycleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MicrocycleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MicrocycleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MicrocycleMaxAggregateInputType
  }

  export type GetMicrocycleAggregateType<T extends MicrocycleAggregateArgs> = {
        [P in keyof T & keyof AggregateMicrocycle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMicrocycle[P]>
      : GetScalarType<T[P], AggregateMicrocycle[P]>
  }




  export type MicrocycleGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MicrocycleWhereInput
    orderBy?: MicrocycleOrderByWithAggregationInput | MicrocycleOrderByWithAggregationInput[]
    by: MicrocycleScalarFieldEnum[] | MicrocycleScalarFieldEnum
    having?: MicrocycleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MicrocycleCountAggregateInputType | true
    _avg?: MicrocycleAvgAggregateInputType
    _sum?: MicrocycleSumAggregateInputType
    _min?: MicrocycleMinAggregateInputType
    _max?: MicrocycleMaxAggregateInputType
  }

  export type MicrocycleGroupByOutputType = {
    id: string
    goal: string
    startDate: number
    endDate: number
    schema: $Enums.CycleSchema
    description: string | null
    mesoId: string
    _count: MicrocycleCountAggregateOutputType | null
    _avg: MicrocycleAvgAggregateOutputType | null
    _sum: MicrocycleSumAggregateOutputType | null
    _min: MicrocycleMinAggregateOutputType | null
    _max: MicrocycleMaxAggregateOutputType | null
  }

  type GetMicrocycleGroupByPayload<T extends MicrocycleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MicrocycleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MicrocycleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MicrocycleGroupByOutputType[P]>
            : GetScalarType<T[P], MicrocycleGroupByOutputType[P]>
        }
      >
    >


  export type MicrocycleSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    goal?: boolean
    startDate?: boolean
    endDate?: boolean
    schema?: boolean
    description?: boolean
    mesoId?: boolean
    mesocycle?: boolean | MesocycleDefaultArgs<ExtArgs>
    trainingDays?: boolean | Microcycle$trainingDaysArgs<ExtArgs>
    _count?: boolean | MicrocycleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["microcycle"]>

  export type MicrocycleSelectScalar = {
    id?: boolean
    goal?: boolean
    startDate?: boolean
    endDate?: boolean
    schema?: boolean
    description?: boolean
    mesoId?: boolean
  }

  export type MicrocycleInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    mesocycle?: boolean | MesocycleDefaultArgs<ExtArgs>
    trainingDays?: boolean | Microcycle$trainingDaysArgs<ExtArgs>
    _count?: boolean | MicrocycleCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $MicrocyclePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Microcycle"
    objects: {
      mesocycle: Prisma.$MesocyclePayload<ExtArgs>
      trainingDays: Prisma.$TrainingDayPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: string
      goal: string
      startDate: number
      endDate: number
      schema: $Enums.CycleSchema
      description: string | null
      mesoId: string
    }, ExtArgs["result"]["microcycle"]>
    composites: {}
  }


  type MicrocycleGetPayload<S extends boolean | null | undefined | MicrocycleDefaultArgs> = $Result.GetResult<Prisma.$MicrocyclePayload, S>

  type MicrocycleCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<MicrocycleFindManyArgs, 'select' | 'include'> & {
      select?: MicrocycleCountAggregateInputType | true
    }

  export interface MicrocycleDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Microcycle'], meta: { name: 'Microcycle' } }
    /**
     * Find zero or one Microcycle that matches the filter.
     * @param {MicrocycleFindUniqueArgs} args - Arguments to find a Microcycle
     * @example
     * // Get one Microcycle
     * const microcycle = await prisma.microcycle.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MicrocycleFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MicrocycleFindUniqueArgs<ExtArgs>>
    ): Prisma__MicrocycleClient<$Result.GetResult<Prisma.$MicrocyclePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Microcycle that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MicrocycleFindUniqueOrThrowArgs} args - Arguments to find a Microcycle
     * @example
     * // Get one Microcycle
     * const microcycle = await prisma.microcycle.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MicrocycleFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MicrocycleFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MicrocycleClient<$Result.GetResult<Prisma.$MicrocyclePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Microcycle that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MicrocycleFindFirstArgs} args - Arguments to find a Microcycle
     * @example
     * // Get one Microcycle
     * const microcycle = await prisma.microcycle.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MicrocycleFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MicrocycleFindFirstArgs<ExtArgs>>
    ): Prisma__MicrocycleClient<$Result.GetResult<Prisma.$MicrocyclePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Microcycle that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MicrocycleFindFirstOrThrowArgs} args - Arguments to find a Microcycle
     * @example
     * // Get one Microcycle
     * const microcycle = await prisma.microcycle.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MicrocycleFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MicrocycleFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MicrocycleClient<$Result.GetResult<Prisma.$MicrocyclePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Microcycles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MicrocycleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Microcycles
     * const microcycles = await prisma.microcycle.findMany()
     * 
     * // Get first 10 Microcycles
     * const microcycles = await prisma.microcycle.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const microcycleWithIdOnly = await prisma.microcycle.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MicrocycleFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MicrocycleFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MicrocyclePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Microcycle.
     * @param {MicrocycleCreateArgs} args - Arguments to create a Microcycle.
     * @example
     * // Create one Microcycle
     * const Microcycle = await prisma.microcycle.create({
     *   data: {
     *     // ... data to create a Microcycle
     *   }
     * })
     * 
    **/
    create<T extends MicrocycleCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MicrocycleCreateArgs<ExtArgs>>
    ): Prisma__MicrocycleClient<$Result.GetResult<Prisma.$MicrocyclePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Microcycles.
     *     @param {MicrocycleCreateManyArgs} args - Arguments to create many Microcycles.
     *     @example
     *     // Create many Microcycles
     *     const microcycle = await prisma.microcycle.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MicrocycleCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MicrocycleCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Microcycle.
     * @param {MicrocycleDeleteArgs} args - Arguments to delete one Microcycle.
     * @example
     * // Delete one Microcycle
     * const Microcycle = await prisma.microcycle.delete({
     *   where: {
     *     // ... filter to delete one Microcycle
     *   }
     * })
     * 
    **/
    delete<T extends MicrocycleDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MicrocycleDeleteArgs<ExtArgs>>
    ): Prisma__MicrocycleClient<$Result.GetResult<Prisma.$MicrocyclePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Microcycle.
     * @param {MicrocycleUpdateArgs} args - Arguments to update one Microcycle.
     * @example
     * // Update one Microcycle
     * const microcycle = await prisma.microcycle.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MicrocycleUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MicrocycleUpdateArgs<ExtArgs>>
    ): Prisma__MicrocycleClient<$Result.GetResult<Prisma.$MicrocyclePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Microcycles.
     * @param {MicrocycleDeleteManyArgs} args - Arguments to filter Microcycles to delete.
     * @example
     * // Delete a few Microcycles
     * const { count } = await prisma.microcycle.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MicrocycleDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MicrocycleDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Microcycles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MicrocycleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Microcycles
     * const microcycle = await prisma.microcycle.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MicrocycleUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MicrocycleUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Microcycle.
     * @param {MicrocycleUpsertArgs} args - Arguments to update or create a Microcycle.
     * @example
     * // Update or create a Microcycle
     * const microcycle = await prisma.microcycle.upsert({
     *   create: {
     *     // ... data to create a Microcycle
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Microcycle we want to update
     *   }
     * })
    **/
    upsert<T extends MicrocycleUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MicrocycleUpsertArgs<ExtArgs>>
    ): Prisma__MicrocycleClient<$Result.GetResult<Prisma.$MicrocyclePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Microcycles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MicrocycleCountArgs} args - Arguments to filter Microcycles to count.
     * @example
     * // Count the number of Microcycles
     * const count = await prisma.microcycle.count({
     *   where: {
     *     // ... the filter for the Microcycles we want to count
     *   }
     * })
    **/
    count<T extends MicrocycleCountArgs>(
      args?: Subset<T, MicrocycleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MicrocycleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Microcycle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MicrocycleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MicrocycleAggregateArgs>(args: Subset<T, MicrocycleAggregateArgs>): Prisma.PrismaPromise<GetMicrocycleAggregateType<T>>

    /**
     * Group by Microcycle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MicrocycleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MicrocycleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MicrocycleGroupByArgs['orderBy'] }
        : { orderBy?: MicrocycleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MicrocycleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMicrocycleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Microcycle model
   */
  readonly fields: MicrocycleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Microcycle.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MicrocycleClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    mesocycle<T extends MesocycleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MesocycleDefaultArgs<ExtArgs>>): Prisma__MesocycleClient<$Result.GetResult<Prisma.$MesocyclePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    trainingDays<T extends Microcycle$trainingDaysArgs<ExtArgs> = {}>(args?: Subset<T, Microcycle$trainingDaysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrainingDayPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Microcycle model
   */ 
  interface MicrocycleFieldRefs {
    readonly id: FieldRef<"Microcycle", 'String'>
    readonly goal: FieldRef<"Microcycle", 'String'>
    readonly startDate: FieldRef<"Microcycle", 'Int'>
    readonly endDate: FieldRef<"Microcycle", 'Int'>
    readonly schema: FieldRef<"Microcycle", 'CycleSchema'>
    readonly description: FieldRef<"Microcycle", 'String'>
    readonly mesoId: FieldRef<"Microcycle", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Microcycle findUnique
   */
  export type MicrocycleFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Microcycle
     */
    select?: MicrocycleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MicrocycleInclude<ExtArgs> | null
    /**
     * Filter, which Microcycle to fetch.
     */
    where: MicrocycleWhereUniqueInput
  }


  /**
   * Microcycle findUniqueOrThrow
   */
  export type MicrocycleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Microcycle
     */
    select?: MicrocycleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MicrocycleInclude<ExtArgs> | null
    /**
     * Filter, which Microcycle to fetch.
     */
    where: MicrocycleWhereUniqueInput
  }


  /**
   * Microcycle findFirst
   */
  export type MicrocycleFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Microcycle
     */
    select?: MicrocycleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MicrocycleInclude<ExtArgs> | null
    /**
     * Filter, which Microcycle to fetch.
     */
    where?: MicrocycleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Microcycles to fetch.
     */
    orderBy?: MicrocycleOrderByWithRelationInput | MicrocycleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Microcycles.
     */
    cursor?: MicrocycleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Microcycles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Microcycles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Microcycles.
     */
    distinct?: MicrocycleScalarFieldEnum | MicrocycleScalarFieldEnum[]
  }


  /**
   * Microcycle findFirstOrThrow
   */
  export type MicrocycleFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Microcycle
     */
    select?: MicrocycleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MicrocycleInclude<ExtArgs> | null
    /**
     * Filter, which Microcycle to fetch.
     */
    where?: MicrocycleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Microcycles to fetch.
     */
    orderBy?: MicrocycleOrderByWithRelationInput | MicrocycleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Microcycles.
     */
    cursor?: MicrocycleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Microcycles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Microcycles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Microcycles.
     */
    distinct?: MicrocycleScalarFieldEnum | MicrocycleScalarFieldEnum[]
  }


  /**
   * Microcycle findMany
   */
  export type MicrocycleFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Microcycle
     */
    select?: MicrocycleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MicrocycleInclude<ExtArgs> | null
    /**
     * Filter, which Microcycles to fetch.
     */
    where?: MicrocycleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Microcycles to fetch.
     */
    orderBy?: MicrocycleOrderByWithRelationInput | MicrocycleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Microcycles.
     */
    cursor?: MicrocycleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Microcycles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Microcycles.
     */
    skip?: number
    distinct?: MicrocycleScalarFieldEnum | MicrocycleScalarFieldEnum[]
  }


  /**
   * Microcycle create
   */
  export type MicrocycleCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Microcycle
     */
    select?: MicrocycleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MicrocycleInclude<ExtArgs> | null
    /**
     * The data needed to create a Microcycle.
     */
    data: XOR<MicrocycleCreateInput, MicrocycleUncheckedCreateInput>
  }


  /**
   * Microcycle createMany
   */
  export type MicrocycleCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Microcycles.
     */
    data: MicrocycleCreateManyInput | MicrocycleCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Microcycle update
   */
  export type MicrocycleUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Microcycle
     */
    select?: MicrocycleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MicrocycleInclude<ExtArgs> | null
    /**
     * The data needed to update a Microcycle.
     */
    data: XOR<MicrocycleUpdateInput, MicrocycleUncheckedUpdateInput>
    /**
     * Choose, which Microcycle to update.
     */
    where: MicrocycleWhereUniqueInput
  }


  /**
   * Microcycle updateMany
   */
  export type MicrocycleUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Microcycles.
     */
    data: XOR<MicrocycleUpdateManyMutationInput, MicrocycleUncheckedUpdateManyInput>
    /**
     * Filter which Microcycles to update
     */
    where?: MicrocycleWhereInput
  }


  /**
   * Microcycle upsert
   */
  export type MicrocycleUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Microcycle
     */
    select?: MicrocycleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MicrocycleInclude<ExtArgs> | null
    /**
     * The filter to search for the Microcycle to update in case it exists.
     */
    where: MicrocycleWhereUniqueInput
    /**
     * In case the Microcycle found by the `where` argument doesn't exist, create a new Microcycle with this data.
     */
    create: XOR<MicrocycleCreateInput, MicrocycleUncheckedCreateInput>
    /**
     * In case the Microcycle was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MicrocycleUpdateInput, MicrocycleUncheckedUpdateInput>
  }


  /**
   * Microcycle delete
   */
  export type MicrocycleDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Microcycle
     */
    select?: MicrocycleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MicrocycleInclude<ExtArgs> | null
    /**
     * Filter which Microcycle to delete.
     */
    where: MicrocycleWhereUniqueInput
  }


  /**
   * Microcycle deleteMany
   */
  export type MicrocycleDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Microcycles to delete
     */
    where?: MicrocycleWhereInput
  }


  /**
   * Microcycle.trainingDays
   */
  export type Microcycle$trainingDaysArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingDay
     */
    select?: TrainingDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainingDayInclude<ExtArgs> | null
    where?: TrainingDayWhereInput
    orderBy?: TrainingDayOrderByWithRelationInput | TrainingDayOrderByWithRelationInput[]
    cursor?: TrainingDayWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TrainingDayScalarFieldEnum | TrainingDayScalarFieldEnum[]
  }


  /**
   * Microcycle without action
   */
  export type MicrocycleDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Microcycle
     */
    select?: MicrocycleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MicrocycleInclude<ExtArgs> | null
  }



  /**
   * Model TrainingDay
   */

  export type AggregateTrainingDay = {
    _count: TrainingDayCountAggregateOutputType | null
    _avg: TrainingDayAvgAggregateOutputType | null
    _sum: TrainingDaySumAggregateOutputType | null
    _min: TrainingDayMinAggregateOutputType | null
    _max: TrainingDayMaxAggregateOutputType | null
  }

  export type TrainingDayAvgAggregateOutputType = {
    date: number | null
  }

  export type TrainingDaySumAggregateOutputType = {
    date: number | null
  }

  export type TrainingDayMinAggregateOutputType = {
    id: string | null
    date: number | null
    sortOrder: string | null
    microcycleId: string | null
    recoveryLevelId: string | null
    noteId: string | null
  }

  export type TrainingDayMaxAggregateOutputType = {
    id: string | null
    date: number | null
    sortOrder: string | null
    microcycleId: string | null
    recoveryLevelId: string | null
    noteId: string | null
  }

  export type TrainingDayCountAggregateOutputType = {
    id: number
    date: number
    sortOrder: number
    microcycleId: number
    recoveryLevelId: number
    noteId: number
    _all: number
  }


  export type TrainingDayAvgAggregateInputType = {
    date?: true
  }

  export type TrainingDaySumAggregateInputType = {
    date?: true
  }

  export type TrainingDayMinAggregateInputType = {
    id?: true
    date?: true
    sortOrder?: true
    microcycleId?: true
    recoveryLevelId?: true
    noteId?: true
  }

  export type TrainingDayMaxAggregateInputType = {
    id?: true
    date?: true
    sortOrder?: true
    microcycleId?: true
    recoveryLevelId?: true
    noteId?: true
  }

  export type TrainingDayCountAggregateInputType = {
    id?: true
    date?: true
    sortOrder?: true
    microcycleId?: true
    recoveryLevelId?: true
    noteId?: true
    _all?: true
  }

  export type TrainingDayAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which TrainingDay to aggregate.
     */
    where?: TrainingDayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrainingDays to fetch.
     */
    orderBy?: TrainingDayOrderByWithRelationInput | TrainingDayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TrainingDayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrainingDays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrainingDays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TrainingDays
    **/
    _count?: true | TrainingDayCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TrainingDayAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TrainingDaySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TrainingDayMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TrainingDayMaxAggregateInputType
  }

  export type GetTrainingDayAggregateType<T extends TrainingDayAggregateArgs> = {
        [P in keyof T & keyof AggregateTrainingDay]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTrainingDay[P]>
      : GetScalarType<T[P], AggregateTrainingDay[P]>
  }




  export type TrainingDayGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: TrainingDayWhereInput
    orderBy?: TrainingDayOrderByWithAggregationInput | TrainingDayOrderByWithAggregationInput[]
    by: TrainingDayScalarFieldEnum[] | TrainingDayScalarFieldEnum
    having?: TrainingDayScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TrainingDayCountAggregateInputType | true
    _avg?: TrainingDayAvgAggregateInputType
    _sum?: TrainingDaySumAggregateInputType
    _min?: TrainingDayMinAggregateInputType
    _max?: TrainingDayMaxAggregateInputType
  }

  export type TrainingDayGroupByOutputType = {
    id: string
    date: number
    sortOrder: string
    microcycleId: string
    recoveryLevelId: string | null
    noteId: string | null
    _count: TrainingDayCountAggregateOutputType | null
    _avg: TrainingDayAvgAggregateOutputType | null
    _sum: TrainingDaySumAggregateOutputType | null
    _min: TrainingDayMinAggregateOutputType | null
    _max: TrainingDayMaxAggregateOutputType | null
  }

  type GetTrainingDayGroupByPayload<T extends TrainingDayGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TrainingDayGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TrainingDayGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TrainingDayGroupByOutputType[P]>
            : GetScalarType<T[P], TrainingDayGroupByOutputType[P]>
        }
      >
    >


  export type TrainingDaySelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    sortOrder?: boolean
    microcycleId?: boolean
    recoveryLevelId?: boolean
    noteId?: boolean
    routines?: boolean | TrainingDay$routinesArgs<ExtArgs>
    microcycle?: boolean | MicrocycleDefaultArgs<ExtArgs>
    recoveryLevel?: boolean | TrainingDay$recoveryLevelArgs<ExtArgs>
    workoutLog?: boolean | TrainingDay$workoutLogArgs<ExtArgs>
    note?: boolean | TrainingDay$noteArgs<ExtArgs>
    _count?: boolean | TrainingDayCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trainingDay"]>

  export type TrainingDaySelectScalar = {
    id?: boolean
    date?: boolean
    sortOrder?: boolean
    microcycleId?: boolean
    recoveryLevelId?: boolean
    noteId?: boolean
  }

  export type TrainingDayInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    routines?: boolean | TrainingDay$routinesArgs<ExtArgs>
    microcycle?: boolean | MicrocycleDefaultArgs<ExtArgs>
    recoveryLevel?: boolean | TrainingDay$recoveryLevelArgs<ExtArgs>
    workoutLog?: boolean | TrainingDay$workoutLogArgs<ExtArgs>
    note?: boolean | TrainingDay$noteArgs<ExtArgs>
    _count?: boolean | TrainingDayCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $TrainingDayPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "TrainingDay"
    objects: {
      routines: Prisma.$RoutinePayload<ExtArgs>[]
      microcycle: Prisma.$MicrocyclePayload<ExtArgs>
      recoveryLevel: Prisma.$RecoveryLevelPayload<ExtArgs> | null
      workoutLog: Prisma.$ExerciseLogPayload<ExtArgs>[]
      note: Prisma.$NotePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetResult<{
      id: string
      date: number
      sortOrder: string
      microcycleId: string
      recoveryLevelId: string | null
      noteId: string | null
    }, ExtArgs["result"]["trainingDay"]>
    composites: {}
  }


  type TrainingDayGetPayload<S extends boolean | null | undefined | TrainingDayDefaultArgs> = $Result.GetResult<Prisma.$TrainingDayPayload, S>

  type TrainingDayCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<TrainingDayFindManyArgs, 'select' | 'include'> & {
      select?: TrainingDayCountAggregateInputType | true
    }

  export interface TrainingDayDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TrainingDay'], meta: { name: 'TrainingDay' } }
    /**
     * Find zero or one TrainingDay that matches the filter.
     * @param {TrainingDayFindUniqueArgs} args - Arguments to find a TrainingDay
     * @example
     * // Get one TrainingDay
     * const trainingDay = await prisma.trainingDay.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TrainingDayFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TrainingDayFindUniqueArgs<ExtArgs>>
    ): Prisma__TrainingDayClient<$Result.GetResult<Prisma.$TrainingDayPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one TrainingDay that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TrainingDayFindUniqueOrThrowArgs} args - Arguments to find a TrainingDay
     * @example
     * // Get one TrainingDay
     * const trainingDay = await prisma.trainingDay.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TrainingDayFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TrainingDayFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TrainingDayClient<$Result.GetResult<Prisma.$TrainingDayPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first TrainingDay that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingDayFindFirstArgs} args - Arguments to find a TrainingDay
     * @example
     * // Get one TrainingDay
     * const trainingDay = await prisma.trainingDay.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TrainingDayFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TrainingDayFindFirstArgs<ExtArgs>>
    ): Prisma__TrainingDayClient<$Result.GetResult<Prisma.$TrainingDayPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first TrainingDay that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingDayFindFirstOrThrowArgs} args - Arguments to find a TrainingDay
     * @example
     * // Get one TrainingDay
     * const trainingDay = await prisma.trainingDay.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TrainingDayFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TrainingDayFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TrainingDayClient<$Result.GetResult<Prisma.$TrainingDayPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more TrainingDays that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingDayFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TrainingDays
     * const trainingDays = await prisma.trainingDay.findMany()
     * 
     * // Get first 10 TrainingDays
     * const trainingDays = await prisma.trainingDay.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const trainingDayWithIdOnly = await prisma.trainingDay.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TrainingDayFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TrainingDayFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrainingDayPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a TrainingDay.
     * @param {TrainingDayCreateArgs} args - Arguments to create a TrainingDay.
     * @example
     * // Create one TrainingDay
     * const TrainingDay = await prisma.trainingDay.create({
     *   data: {
     *     // ... data to create a TrainingDay
     *   }
     * })
     * 
    **/
    create<T extends TrainingDayCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TrainingDayCreateArgs<ExtArgs>>
    ): Prisma__TrainingDayClient<$Result.GetResult<Prisma.$TrainingDayPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many TrainingDays.
     *     @param {TrainingDayCreateManyArgs} args - Arguments to create many TrainingDays.
     *     @example
     *     // Create many TrainingDays
     *     const trainingDay = await prisma.trainingDay.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TrainingDayCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TrainingDayCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TrainingDay.
     * @param {TrainingDayDeleteArgs} args - Arguments to delete one TrainingDay.
     * @example
     * // Delete one TrainingDay
     * const TrainingDay = await prisma.trainingDay.delete({
     *   where: {
     *     // ... filter to delete one TrainingDay
     *   }
     * })
     * 
    **/
    delete<T extends TrainingDayDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TrainingDayDeleteArgs<ExtArgs>>
    ): Prisma__TrainingDayClient<$Result.GetResult<Prisma.$TrainingDayPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one TrainingDay.
     * @param {TrainingDayUpdateArgs} args - Arguments to update one TrainingDay.
     * @example
     * // Update one TrainingDay
     * const trainingDay = await prisma.trainingDay.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TrainingDayUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TrainingDayUpdateArgs<ExtArgs>>
    ): Prisma__TrainingDayClient<$Result.GetResult<Prisma.$TrainingDayPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more TrainingDays.
     * @param {TrainingDayDeleteManyArgs} args - Arguments to filter TrainingDays to delete.
     * @example
     * // Delete a few TrainingDays
     * const { count } = await prisma.trainingDay.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TrainingDayDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TrainingDayDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TrainingDays.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingDayUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TrainingDays
     * const trainingDay = await prisma.trainingDay.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TrainingDayUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TrainingDayUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TrainingDay.
     * @param {TrainingDayUpsertArgs} args - Arguments to update or create a TrainingDay.
     * @example
     * // Update or create a TrainingDay
     * const trainingDay = await prisma.trainingDay.upsert({
     *   create: {
     *     // ... data to create a TrainingDay
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TrainingDay we want to update
     *   }
     * })
    **/
    upsert<T extends TrainingDayUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TrainingDayUpsertArgs<ExtArgs>>
    ): Prisma__TrainingDayClient<$Result.GetResult<Prisma.$TrainingDayPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of TrainingDays.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingDayCountArgs} args - Arguments to filter TrainingDays to count.
     * @example
     * // Count the number of TrainingDays
     * const count = await prisma.trainingDay.count({
     *   where: {
     *     // ... the filter for the TrainingDays we want to count
     *   }
     * })
    **/
    count<T extends TrainingDayCountArgs>(
      args?: Subset<T, TrainingDayCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TrainingDayCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TrainingDay.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingDayAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TrainingDayAggregateArgs>(args: Subset<T, TrainingDayAggregateArgs>): Prisma.PrismaPromise<GetTrainingDayAggregateType<T>>

    /**
     * Group by TrainingDay.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingDayGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TrainingDayGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TrainingDayGroupByArgs['orderBy'] }
        : { orderBy?: TrainingDayGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TrainingDayGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTrainingDayGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TrainingDay model
   */
  readonly fields: TrainingDayFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TrainingDay.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TrainingDayClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    routines<T extends TrainingDay$routinesArgs<ExtArgs> = {}>(args?: Subset<T, TrainingDay$routinesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoutinePayload<ExtArgs>, T, 'findMany'> | Null>;

    microcycle<T extends MicrocycleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MicrocycleDefaultArgs<ExtArgs>>): Prisma__MicrocycleClient<$Result.GetResult<Prisma.$MicrocyclePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    recoveryLevel<T extends TrainingDay$recoveryLevelArgs<ExtArgs> = {}>(args?: Subset<T, TrainingDay$recoveryLevelArgs<ExtArgs>>): Prisma__RecoveryLevelClient<$Result.GetResult<Prisma.$RecoveryLevelPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    workoutLog<T extends TrainingDay$workoutLogArgs<ExtArgs> = {}>(args?: Subset<T, TrainingDay$workoutLogArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExerciseLogPayload<ExtArgs>, T, 'findMany'> | Null>;

    note<T extends TrainingDay$noteArgs<ExtArgs> = {}>(args?: Subset<T, TrainingDay$noteArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the TrainingDay model
   */ 
  interface TrainingDayFieldRefs {
    readonly id: FieldRef<"TrainingDay", 'String'>
    readonly date: FieldRef<"TrainingDay", 'Int'>
    readonly sortOrder: FieldRef<"TrainingDay", 'String'>
    readonly microcycleId: FieldRef<"TrainingDay", 'String'>
    readonly recoveryLevelId: FieldRef<"TrainingDay", 'String'>
    readonly noteId: FieldRef<"TrainingDay", 'String'>
  }
    

  // Custom InputTypes

  /**
   * TrainingDay findUnique
   */
  export type TrainingDayFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingDay
     */
    select?: TrainingDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainingDayInclude<ExtArgs> | null
    /**
     * Filter, which TrainingDay to fetch.
     */
    where: TrainingDayWhereUniqueInput
  }


  /**
   * TrainingDay findUniqueOrThrow
   */
  export type TrainingDayFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingDay
     */
    select?: TrainingDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainingDayInclude<ExtArgs> | null
    /**
     * Filter, which TrainingDay to fetch.
     */
    where: TrainingDayWhereUniqueInput
  }


  /**
   * TrainingDay findFirst
   */
  export type TrainingDayFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingDay
     */
    select?: TrainingDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainingDayInclude<ExtArgs> | null
    /**
     * Filter, which TrainingDay to fetch.
     */
    where?: TrainingDayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrainingDays to fetch.
     */
    orderBy?: TrainingDayOrderByWithRelationInput | TrainingDayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TrainingDays.
     */
    cursor?: TrainingDayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrainingDays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrainingDays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TrainingDays.
     */
    distinct?: TrainingDayScalarFieldEnum | TrainingDayScalarFieldEnum[]
  }


  /**
   * TrainingDay findFirstOrThrow
   */
  export type TrainingDayFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingDay
     */
    select?: TrainingDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainingDayInclude<ExtArgs> | null
    /**
     * Filter, which TrainingDay to fetch.
     */
    where?: TrainingDayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrainingDays to fetch.
     */
    orderBy?: TrainingDayOrderByWithRelationInput | TrainingDayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TrainingDays.
     */
    cursor?: TrainingDayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrainingDays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrainingDays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TrainingDays.
     */
    distinct?: TrainingDayScalarFieldEnum | TrainingDayScalarFieldEnum[]
  }


  /**
   * TrainingDay findMany
   */
  export type TrainingDayFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingDay
     */
    select?: TrainingDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainingDayInclude<ExtArgs> | null
    /**
     * Filter, which TrainingDays to fetch.
     */
    where?: TrainingDayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrainingDays to fetch.
     */
    orderBy?: TrainingDayOrderByWithRelationInput | TrainingDayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TrainingDays.
     */
    cursor?: TrainingDayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrainingDays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrainingDays.
     */
    skip?: number
    distinct?: TrainingDayScalarFieldEnum | TrainingDayScalarFieldEnum[]
  }


  /**
   * TrainingDay create
   */
  export type TrainingDayCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingDay
     */
    select?: TrainingDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainingDayInclude<ExtArgs> | null
    /**
     * The data needed to create a TrainingDay.
     */
    data: XOR<TrainingDayCreateInput, TrainingDayUncheckedCreateInput>
  }


  /**
   * TrainingDay createMany
   */
  export type TrainingDayCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TrainingDays.
     */
    data: TrainingDayCreateManyInput | TrainingDayCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * TrainingDay update
   */
  export type TrainingDayUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingDay
     */
    select?: TrainingDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainingDayInclude<ExtArgs> | null
    /**
     * The data needed to update a TrainingDay.
     */
    data: XOR<TrainingDayUpdateInput, TrainingDayUncheckedUpdateInput>
    /**
     * Choose, which TrainingDay to update.
     */
    where: TrainingDayWhereUniqueInput
  }


  /**
   * TrainingDay updateMany
   */
  export type TrainingDayUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TrainingDays.
     */
    data: XOR<TrainingDayUpdateManyMutationInput, TrainingDayUncheckedUpdateManyInput>
    /**
     * Filter which TrainingDays to update
     */
    where?: TrainingDayWhereInput
  }


  /**
   * TrainingDay upsert
   */
  export type TrainingDayUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingDay
     */
    select?: TrainingDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainingDayInclude<ExtArgs> | null
    /**
     * The filter to search for the TrainingDay to update in case it exists.
     */
    where: TrainingDayWhereUniqueInput
    /**
     * In case the TrainingDay found by the `where` argument doesn't exist, create a new TrainingDay with this data.
     */
    create: XOR<TrainingDayCreateInput, TrainingDayUncheckedCreateInput>
    /**
     * In case the TrainingDay was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TrainingDayUpdateInput, TrainingDayUncheckedUpdateInput>
  }


  /**
   * TrainingDay delete
   */
  export type TrainingDayDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingDay
     */
    select?: TrainingDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainingDayInclude<ExtArgs> | null
    /**
     * Filter which TrainingDay to delete.
     */
    where: TrainingDayWhereUniqueInput
  }


  /**
   * TrainingDay deleteMany
   */
  export type TrainingDayDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which TrainingDays to delete
     */
    where?: TrainingDayWhereInput
  }


  /**
   * TrainingDay.routines
   */
  export type TrainingDay$routinesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Routine
     */
    select?: RoutineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoutineInclude<ExtArgs> | null
    where?: RoutineWhereInput
    orderBy?: RoutineOrderByWithRelationInput | RoutineOrderByWithRelationInput[]
    cursor?: RoutineWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoutineScalarFieldEnum | RoutineScalarFieldEnum[]
  }


  /**
   * TrainingDay.recoveryLevel
   */
  export type TrainingDay$recoveryLevelArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecoveryLevel
     */
    select?: RecoveryLevelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecoveryLevelInclude<ExtArgs> | null
    where?: RecoveryLevelWhereInput
  }


  /**
   * TrainingDay.workoutLog
   */
  export type TrainingDay$workoutLogArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseLog
     */
    select?: ExerciseLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseLogInclude<ExtArgs> | null
    where?: ExerciseLogWhereInput
    orderBy?: ExerciseLogOrderByWithRelationInput | ExerciseLogOrderByWithRelationInput[]
    cursor?: ExerciseLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExerciseLogScalarFieldEnum | ExerciseLogScalarFieldEnum[]
  }


  /**
   * TrainingDay.note
   */
  export type TrainingDay$noteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NoteInclude<ExtArgs> | null
    where?: NoteWhereInput
  }


  /**
   * TrainingDay without action
   */
  export type TrainingDayDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingDay
     */
    select?: TrainingDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainingDayInclude<ExtArgs> | null
  }



  /**
   * Model Routine
   */

  export type AggregateRoutine = {
    _count: RoutineCountAggregateOutputType | null
    _avg: RoutineAvgAggregateOutputType | null
    _sum: RoutineSumAggregateOutputType | null
    _min: RoutineMinAggregateOutputType | null
    _max: RoutineMaxAggregateOutputType | null
  }

  export type RoutineAvgAggregateOutputType = {
    duration: number | null
  }

  export type RoutineSumAggregateOutputType = {
    duration: number | null
  }

  export type RoutineMinAggregateOutputType = {
    id: string | null
    name: string | null
    duration: number | null
    type: $Enums.RoutineType | null
    sortOrder: string | null
    routineSubtypeId: string | null
    noteId: string | null
  }

  export type RoutineMaxAggregateOutputType = {
    id: string | null
    name: string | null
    duration: number | null
    type: $Enums.RoutineType | null
    sortOrder: string | null
    routineSubtypeId: string | null
    noteId: string | null
  }

  export type RoutineCountAggregateOutputType = {
    id: number
    name: number
    duration: number
    type: number
    sortOrder: number
    routineSubtypeId: number
    noteId: number
    _all: number
  }


  export type RoutineAvgAggregateInputType = {
    duration?: true
  }

  export type RoutineSumAggregateInputType = {
    duration?: true
  }

  export type RoutineMinAggregateInputType = {
    id?: true
    name?: true
    duration?: true
    type?: true
    sortOrder?: true
    routineSubtypeId?: true
    noteId?: true
  }

  export type RoutineMaxAggregateInputType = {
    id?: true
    name?: true
    duration?: true
    type?: true
    sortOrder?: true
    routineSubtypeId?: true
    noteId?: true
  }

  export type RoutineCountAggregateInputType = {
    id?: true
    name?: true
    duration?: true
    type?: true
    sortOrder?: true
    routineSubtypeId?: true
    noteId?: true
    _all?: true
  }

  export type RoutineAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Routine to aggregate.
     */
    where?: RoutineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Routines to fetch.
     */
    orderBy?: RoutineOrderByWithRelationInput | RoutineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoutineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Routines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Routines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Routines
    **/
    _count?: true | RoutineCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoutineAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoutineSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoutineMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoutineMaxAggregateInputType
  }

  export type GetRoutineAggregateType<T extends RoutineAggregateArgs> = {
        [P in keyof T & keyof AggregateRoutine]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoutine[P]>
      : GetScalarType<T[P], AggregateRoutine[P]>
  }




  export type RoutineGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: RoutineWhereInput
    orderBy?: RoutineOrderByWithAggregationInput | RoutineOrderByWithAggregationInput[]
    by: RoutineScalarFieldEnum[] | RoutineScalarFieldEnum
    having?: RoutineScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoutineCountAggregateInputType | true
    _avg?: RoutineAvgAggregateInputType
    _sum?: RoutineSumAggregateInputType
    _min?: RoutineMinAggregateInputType
    _max?: RoutineMaxAggregateInputType
  }

  export type RoutineGroupByOutputType = {
    id: string
    name: string
    duration: number | null
    type: $Enums.RoutineType
    sortOrder: string
    routineSubtypeId: string | null
    noteId: string | null
    _count: RoutineCountAggregateOutputType | null
    _avg: RoutineAvgAggregateOutputType | null
    _sum: RoutineSumAggregateOutputType | null
    _min: RoutineMinAggregateOutputType | null
    _max: RoutineMaxAggregateOutputType | null
  }

  type GetRoutineGroupByPayload<T extends RoutineGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoutineGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoutineGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoutineGroupByOutputType[P]>
            : GetScalarType<T[P], RoutineGroupByOutputType[P]>
        }
      >
    >


  export type RoutineSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    duration?: boolean
    type?: boolean
    sortOrder?: boolean
    routineSubtypeId?: boolean
    noteId?: boolean
    exercises?: boolean | Routine$exercisesArgs<ExtArgs>
    trainingDays?: boolean | Routine$trainingDaysArgs<ExtArgs>
    routineSubtype?: boolean | Routine$routineSubtypeArgs<ExtArgs>
    note?: boolean | Routine$noteArgs<ExtArgs>
    _count?: boolean | RoutineCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["routine"]>

  export type RoutineSelectScalar = {
    id?: boolean
    name?: boolean
    duration?: boolean
    type?: boolean
    sortOrder?: boolean
    routineSubtypeId?: boolean
    noteId?: boolean
  }

  export type RoutineInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    exercises?: boolean | Routine$exercisesArgs<ExtArgs>
    trainingDays?: boolean | Routine$trainingDaysArgs<ExtArgs>
    routineSubtype?: boolean | Routine$routineSubtypeArgs<ExtArgs>
    note?: boolean | Routine$noteArgs<ExtArgs>
    _count?: boolean | RoutineCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $RoutinePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Routine"
    objects: {
      exercises: Prisma.$ExercisePayload<ExtArgs>[]
      trainingDays: Prisma.$TrainingDayPayload<ExtArgs>[]
      routineSubtype: Prisma.$RoutineSubtypePayload<ExtArgs> | null
      note: Prisma.$NotePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetResult<{
      id: string
      name: string
      duration: number | null
      type: $Enums.RoutineType
      sortOrder: string
      routineSubtypeId: string | null
      noteId: string | null
    }, ExtArgs["result"]["routine"]>
    composites: {}
  }


  type RoutineGetPayload<S extends boolean | null | undefined | RoutineDefaultArgs> = $Result.GetResult<Prisma.$RoutinePayload, S>

  type RoutineCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<RoutineFindManyArgs, 'select' | 'include'> & {
      select?: RoutineCountAggregateInputType | true
    }

  export interface RoutineDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Routine'], meta: { name: 'Routine' } }
    /**
     * Find zero or one Routine that matches the filter.
     * @param {RoutineFindUniqueArgs} args - Arguments to find a Routine
     * @example
     * // Get one Routine
     * const routine = await prisma.routine.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RoutineFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RoutineFindUniqueArgs<ExtArgs>>
    ): Prisma__RoutineClient<$Result.GetResult<Prisma.$RoutinePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Routine that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RoutineFindUniqueOrThrowArgs} args - Arguments to find a Routine
     * @example
     * // Get one Routine
     * const routine = await prisma.routine.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RoutineFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RoutineFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RoutineClient<$Result.GetResult<Prisma.$RoutinePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Routine that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoutineFindFirstArgs} args - Arguments to find a Routine
     * @example
     * // Get one Routine
     * const routine = await prisma.routine.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RoutineFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RoutineFindFirstArgs<ExtArgs>>
    ): Prisma__RoutineClient<$Result.GetResult<Prisma.$RoutinePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Routine that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoutineFindFirstOrThrowArgs} args - Arguments to find a Routine
     * @example
     * // Get one Routine
     * const routine = await prisma.routine.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RoutineFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RoutineFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RoutineClient<$Result.GetResult<Prisma.$RoutinePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Routines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoutineFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Routines
     * const routines = await prisma.routine.findMany()
     * 
     * // Get first 10 Routines
     * const routines = await prisma.routine.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const routineWithIdOnly = await prisma.routine.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RoutineFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RoutineFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoutinePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Routine.
     * @param {RoutineCreateArgs} args - Arguments to create a Routine.
     * @example
     * // Create one Routine
     * const Routine = await prisma.routine.create({
     *   data: {
     *     // ... data to create a Routine
     *   }
     * })
     * 
    **/
    create<T extends RoutineCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RoutineCreateArgs<ExtArgs>>
    ): Prisma__RoutineClient<$Result.GetResult<Prisma.$RoutinePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Routines.
     *     @param {RoutineCreateManyArgs} args - Arguments to create many Routines.
     *     @example
     *     // Create many Routines
     *     const routine = await prisma.routine.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RoutineCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RoutineCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Routine.
     * @param {RoutineDeleteArgs} args - Arguments to delete one Routine.
     * @example
     * // Delete one Routine
     * const Routine = await prisma.routine.delete({
     *   where: {
     *     // ... filter to delete one Routine
     *   }
     * })
     * 
    **/
    delete<T extends RoutineDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RoutineDeleteArgs<ExtArgs>>
    ): Prisma__RoutineClient<$Result.GetResult<Prisma.$RoutinePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Routine.
     * @param {RoutineUpdateArgs} args - Arguments to update one Routine.
     * @example
     * // Update one Routine
     * const routine = await prisma.routine.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RoutineUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RoutineUpdateArgs<ExtArgs>>
    ): Prisma__RoutineClient<$Result.GetResult<Prisma.$RoutinePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Routines.
     * @param {RoutineDeleteManyArgs} args - Arguments to filter Routines to delete.
     * @example
     * // Delete a few Routines
     * const { count } = await prisma.routine.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RoutineDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RoutineDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Routines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoutineUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Routines
     * const routine = await prisma.routine.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RoutineUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RoutineUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Routine.
     * @param {RoutineUpsertArgs} args - Arguments to update or create a Routine.
     * @example
     * // Update or create a Routine
     * const routine = await prisma.routine.upsert({
     *   create: {
     *     // ... data to create a Routine
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Routine we want to update
     *   }
     * })
    **/
    upsert<T extends RoutineUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RoutineUpsertArgs<ExtArgs>>
    ): Prisma__RoutineClient<$Result.GetResult<Prisma.$RoutinePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Routines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoutineCountArgs} args - Arguments to filter Routines to count.
     * @example
     * // Count the number of Routines
     * const count = await prisma.routine.count({
     *   where: {
     *     // ... the filter for the Routines we want to count
     *   }
     * })
    **/
    count<T extends RoutineCountArgs>(
      args?: Subset<T, RoutineCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoutineCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Routine.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoutineAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoutineAggregateArgs>(args: Subset<T, RoutineAggregateArgs>): Prisma.PrismaPromise<GetRoutineAggregateType<T>>

    /**
     * Group by Routine.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoutineGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoutineGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoutineGroupByArgs['orderBy'] }
        : { orderBy?: RoutineGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoutineGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoutineGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Routine model
   */
  readonly fields: RoutineFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Routine.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoutineClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    exercises<T extends Routine$exercisesArgs<ExtArgs> = {}>(args?: Subset<T, Routine$exercisesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'findMany'> | Null>;

    trainingDays<T extends Routine$trainingDaysArgs<ExtArgs> = {}>(args?: Subset<T, Routine$trainingDaysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrainingDayPayload<ExtArgs>, T, 'findMany'> | Null>;

    routineSubtype<T extends Routine$routineSubtypeArgs<ExtArgs> = {}>(args?: Subset<T, Routine$routineSubtypeArgs<ExtArgs>>): Prisma__RoutineSubtypeClient<$Result.GetResult<Prisma.$RoutineSubtypePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    note<T extends Routine$noteArgs<ExtArgs> = {}>(args?: Subset<T, Routine$noteArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Routine model
   */ 
  interface RoutineFieldRefs {
    readonly id: FieldRef<"Routine", 'String'>
    readonly name: FieldRef<"Routine", 'String'>
    readonly duration: FieldRef<"Routine", 'Int'>
    readonly type: FieldRef<"Routine", 'RoutineType'>
    readonly sortOrder: FieldRef<"Routine", 'String'>
    readonly routineSubtypeId: FieldRef<"Routine", 'String'>
    readonly noteId: FieldRef<"Routine", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Routine findUnique
   */
  export type RoutineFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Routine
     */
    select?: RoutineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoutineInclude<ExtArgs> | null
    /**
     * Filter, which Routine to fetch.
     */
    where: RoutineWhereUniqueInput
  }


  /**
   * Routine findUniqueOrThrow
   */
  export type RoutineFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Routine
     */
    select?: RoutineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoutineInclude<ExtArgs> | null
    /**
     * Filter, which Routine to fetch.
     */
    where: RoutineWhereUniqueInput
  }


  /**
   * Routine findFirst
   */
  export type RoutineFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Routine
     */
    select?: RoutineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoutineInclude<ExtArgs> | null
    /**
     * Filter, which Routine to fetch.
     */
    where?: RoutineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Routines to fetch.
     */
    orderBy?: RoutineOrderByWithRelationInput | RoutineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Routines.
     */
    cursor?: RoutineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Routines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Routines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Routines.
     */
    distinct?: RoutineScalarFieldEnum | RoutineScalarFieldEnum[]
  }


  /**
   * Routine findFirstOrThrow
   */
  export type RoutineFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Routine
     */
    select?: RoutineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoutineInclude<ExtArgs> | null
    /**
     * Filter, which Routine to fetch.
     */
    where?: RoutineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Routines to fetch.
     */
    orderBy?: RoutineOrderByWithRelationInput | RoutineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Routines.
     */
    cursor?: RoutineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Routines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Routines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Routines.
     */
    distinct?: RoutineScalarFieldEnum | RoutineScalarFieldEnum[]
  }


  /**
   * Routine findMany
   */
  export type RoutineFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Routine
     */
    select?: RoutineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoutineInclude<ExtArgs> | null
    /**
     * Filter, which Routines to fetch.
     */
    where?: RoutineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Routines to fetch.
     */
    orderBy?: RoutineOrderByWithRelationInput | RoutineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Routines.
     */
    cursor?: RoutineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Routines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Routines.
     */
    skip?: number
    distinct?: RoutineScalarFieldEnum | RoutineScalarFieldEnum[]
  }


  /**
   * Routine create
   */
  export type RoutineCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Routine
     */
    select?: RoutineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoutineInclude<ExtArgs> | null
    /**
     * The data needed to create a Routine.
     */
    data: XOR<RoutineCreateInput, RoutineUncheckedCreateInput>
  }


  /**
   * Routine createMany
   */
  export type RoutineCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Routines.
     */
    data: RoutineCreateManyInput | RoutineCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Routine update
   */
  export type RoutineUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Routine
     */
    select?: RoutineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoutineInclude<ExtArgs> | null
    /**
     * The data needed to update a Routine.
     */
    data: XOR<RoutineUpdateInput, RoutineUncheckedUpdateInput>
    /**
     * Choose, which Routine to update.
     */
    where: RoutineWhereUniqueInput
  }


  /**
   * Routine updateMany
   */
  export type RoutineUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Routines.
     */
    data: XOR<RoutineUpdateManyMutationInput, RoutineUncheckedUpdateManyInput>
    /**
     * Filter which Routines to update
     */
    where?: RoutineWhereInput
  }


  /**
   * Routine upsert
   */
  export type RoutineUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Routine
     */
    select?: RoutineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoutineInclude<ExtArgs> | null
    /**
     * The filter to search for the Routine to update in case it exists.
     */
    where: RoutineWhereUniqueInput
    /**
     * In case the Routine found by the `where` argument doesn't exist, create a new Routine with this data.
     */
    create: XOR<RoutineCreateInput, RoutineUncheckedCreateInput>
    /**
     * In case the Routine was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoutineUpdateInput, RoutineUncheckedUpdateInput>
  }


  /**
   * Routine delete
   */
  export type RoutineDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Routine
     */
    select?: RoutineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoutineInclude<ExtArgs> | null
    /**
     * Filter which Routine to delete.
     */
    where: RoutineWhereUniqueInput
  }


  /**
   * Routine deleteMany
   */
  export type RoutineDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Routines to delete
     */
    where?: RoutineWhereInput
  }


  /**
   * Routine.exercises
   */
  export type Routine$exercisesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseInclude<ExtArgs> | null
    where?: ExerciseWhereInput
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    cursor?: ExerciseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }


  /**
   * Routine.trainingDays
   */
  export type Routine$trainingDaysArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingDay
     */
    select?: TrainingDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainingDayInclude<ExtArgs> | null
    where?: TrainingDayWhereInput
    orderBy?: TrainingDayOrderByWithRelationInput | TrainingDayOrderByWithRelationInput[]
    cursor?: TrainingDayWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TrainingDayScalarFieldEnum | TrainingDayScalarFieldEnum[]
  }


  /**
   * Routine.routineSubtype
   */
  export type Routine$routineSubtypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSubtype
     */
    select?: RoutineSubtypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoutineSubtypeInclude<ExtArgs> | null
    where?: RoutineSubtypeWhereInput
  }


  /**
   * Routine.note
   */
  export type Routine$noteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NoteInclude<ExtArgs> | null
    where?: NoteWhereInput
  }


  /**
   * Routine without action
   */
  export type RoutineDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Routine
     */
    select?: RoutineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoutineInclude<ExtArgs> | null
  }



  /**
   * Model RoutineSubtype
   */

  export type AggregateRoutineSubtype = {
    _count: RoutineSubtypeCountAggregateOutputType | null
    _min: RoutineSubtypeMinAggregateOutputType | null
    _max: RoutineSubtypeMaxAggregateOutputType | null
  }

  export type RoutineSubtypeMinAggregateOutputType = {
    id: string | null
    type: string | null
  }

  export type RoutineSubtypeMaxAggregateOutputType = {
    id: string | null
    type: string | null
  }

  export type RoutineSubtypeCountAggregateOutputType = {
    id: number
    type: number
    _all: number
  }


  export type RoutineSubtypeMinAggregateInputType = {
    id?: true
    type?: true
  }

  export type RoutineSubtypeMaxAggregateInputType = {
    id?: true
    type?: true
  }

  export type RoutineSubtypeCountAggregateInputType = {
    id?: true
    type?: true
    _all?: true
  }

  export type RoutineSubtypeAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which RoutineSubtype to aggregate.
     */
    where?: RoutineSubtypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoutineSubtypes to fetch.
     */
    orderBy?: RoutineSubtypeOrderByWithRelationInput | RoutineSubtypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoutineSubtypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoutineSubtypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoutineSubtypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RoutineSubtypes
    **/
    _count?: true | RoutineSubtypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoutineSubtypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoutineSubtypeMaxAggregateInputType
  }

  export type GetRoutineSubtypeAggregateType<T extends RoutineSubtypeAggregateArgs> = {
        [P in keyof T & keyof AggregateRoutineSubtype]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoutineSubtype[P]>
      : GetScalarType<T[P], AggregateRoutineSubtype[P]>
  }




  export type RoutineSubtypeGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: RoutineSubtypeWhereInput
    orderBy?: RoutineSubtypeOrderByWithAggregationInput | RoutineSubtypeOrderByWithAggregationInput[]
    by: RoutineSubtypeScalarFieldEnum[] | RoutineSubtypeScalarFieldEnum
    having?: RoutineSubtypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoutineSubtypeCountAggregateInputType | true
    _min?: RoutineSubtypeMinAggregateInputType
    _max?: RoutineSubtypeMaxAggregateInputType
  }

  export type RoutineSubtypeGroupByOutputType = {
    id: string
    type: string
    _count: RoutineSubtypeCountAggregateOutputType | null
    _min: RoutineSubtypeMinAggregateOutputType | null
    _max: RoutineSubtypeMaxAggregateOutputType | null
  }

  type GetRoutineSubtypeGroupByPayload<T extends RoutineSubtypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoutineSubtypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoutineSubtypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoutineSubtypeGroupByOutputType[P]>
            : GetScalarType<T[P], RoutineSubtypeGroupByOutputType[P]>
        }
      >
    >


  export type RoutineSubtypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    routine?: boolean | RoutineSubtype$routineArgs<ExtArgs>
    _count?: boolean | RoutineSubtypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["routineSubtype"]>

  export type RoutineSubtypeSelectScalar = {
    id?: boolean
    type?: boolean
  }

  export type RoutineSubtypeInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    routine?: boolean | RoutineSubtype$routineArgs<ExtArgs>
    _count?: boolean | RoutineSubtypeCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $RoutineSubtypePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "RoutineSubtype"
    objects: {
      routine: Prisma.$RoutinePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: string
      type: string
    }, ExtArgs["result"]["routineSubtype"]>
    composites: {}
  }


  type RoutineSubtypeGetPayload<S extends boolean | null | undefined | RoutineSubtypeDefaultArgs> = $Result.GetResult<Prisma.$RoutineSubtypePayload, S>

  type RoutineSubtypeCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<RoutineSubtypeFindManyArgs, 'select' | 'include'> & {
      select?: RoutineSubtypeCountAggregateInputType | true
    }

  export interface RoutineSubtypeDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RoutineSubtype'], meta: { name: 'RoutineSubtype' } }
    /**
     * Find zero or one RoutineSubtype that matches the filter.
     * @param {RoutineSubtypeFindUniqueArgs} args - Arguments to find a RoutineSubtype
     * @example
     * // Get one RoutineSubtype
     * const routineSubtype = await prisma.routineSubtype.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RoutineSubtypeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RoutineSubtypeFindUniqueArgs<ExtArgs>>
    ): Prisma__RoutineSubtypeClient<$Result.GetResult<Prisma.$RoutineSubtypePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one RoutineSubtype that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RoutineSubtypeFindUniqueOrThrowArgs} args - Arguments to find a RoutineSubtype
     * @example
     * // Get one RoutineSubtype
     * const routineSubtype = await prisma.routineSubtype.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RoutineSubtypeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RoutineSubtypeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RoutineSubtypeClient<$Result.GetResult<Prisma.$RoutineSubtypePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first RoutineSubtype that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoutineSubtypeFindFirstArgs} args - Arguments to find a RoutineSubtype
     * @example
     * // Get one RoutineSubtype
     * const routineSubtype = await prisma.routineSubtype.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RoutineSubtypeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RoutineSubtypeFindFirstArgs<ExtArgs>>
    ): Prisma__RoutineSubtypeClient<$Result.GetResult<Prisma.$RoutineSubtypePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first RoutineSubtype that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoutineSubtypeFindFirstOrThrowArgs} args - Arguments to find a RoutineSubtype
     * @example
     * // Get one RoutineSubtype
     * const routineSubtype = await prisma.routineSubtype.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RoutineSubtypeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RoutineSubtypeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RoutineSubtypeClient<$Result.GetResult<Prisma.$RoutineSubtypePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more RoutineSubtypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoutineSubtypeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RoutineSubtypes
     * const routineSubtypes = await prisma.routineSubtype.findMany()
     * 
     * // Get first 10 RoutineSubtypes
     * const routineSubtypes = await prisma.routineSubtype.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const routineSubtypeWithIdOnly = await prisma.routineSubtype.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RoutineSubtypeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RoutineSubtypeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoutineSubtypePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a RoutineSubtype.
     * @param {RoutineSubtypeCreateArgs} args - Arguments to create a RoutineSubtype.
     * @example
     * // Create one RoutineSubtype
     * const RoutineSubtype = await prisma.routineSubtype.create({
     *   data: {
     *     // ... data to create a RoutineSubtype
     *   }
     * })
     * 
    **/
    create<T extends RoutineSubtypeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RoutineSubtypeCreateArgs<ExtArgs>>
    ): Prisma__RoutineSubtypeClient<$Result.GetResult<Prisma.$RoutineSubtypePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many RoutineSubtypes.
     *     @param {RoutineSubtypeCreateManyArgs} args - Arguments to create many RoutineSubtypes.
     *     @example
     *     // Create many RoutineSubtypes
     *     const routineSubtype = await prisma.routineSubtype.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RoutineSubtypeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RoutineSubtypeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a RoutineSubtype.
     * @param {RoutineSubtypeDeleteArgs} args - Arguments to delete one RoutineSubtype.
     * @example
     * // Delete one RoutineSubtype
     * const RoutineSubtype = await prisma.routineSubtype.delete({
     *   where: {
     *     // ... filter to delete one RoutineSubtype
     *   }
     * })
     * 
    **/
    delete<T extends RoutineSubtypeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RoutineSubtypeDeleteArgs<ExtArgs>>
    ): Prisma__RoutineSubtypeClient<$Result.GetResult<Prisma.$RoutineSubtypePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one RoutineSubtype.
     * @param {RoutineSubtypeUpdateArgs} args - Arguments to update one RoutineSubtype.
     * @example
     * // Update one RoutineSubtype
     * const routineSubtype = await prisma.routineSubtype.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RoutineSubtypeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RoutineSubtypeUpdateArgs<ExtArgs>>
    ): Prisma__RoutineSubtypeClient<$Result.GetResult<Prisma.$RoutineSubtypePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more RoutineSubtypes.
     * @param {RoutineSubtypeDeleteManyArgs} args - Arguments to filter RoutineSubtypes to delete.
     * @example
     * // Delete a few RoutineSubtypes
     * const { count } = await prisma.routineSubtype.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RoutineSubtypeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RoutineSubtypeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RoutineSubtypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoutineSubtypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RoutineSubtypes
     * const routineSubtype = await prisma.routineSubtype.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RoutineSubtypeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RoutineSubtypeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RoutineSubtype.
     * @param {RoutineSubtypeUpsertArgs} args - Arguments to update or create a RoutineSubtype.
     * @example
     * // Update or create a RoutineSubtype
     * const routineSubtype = await prisma.routineSubtype.upsert({
     *   create: {
     *     // ... data to create a RoutineSubtype
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RoutineSubtype we want to update
     *   }
     * })
    **/
    upsert<T extends RoutineSubtypeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RoutineSubtypeUpsertArgs<ExtArgs>>
    ): Prisma__RoutineSubtypeClient<$Result.GetResult<Prisma.$RoutineSubtypePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of RoutineSubtypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoutineSubtypeCountArgs} args - Arguments to filter RoutineSubtypes to count.
     * @example
     * // Count the number of RoutineSubtypes
     * const count = await prisma.routineSubtype.count({
     *   where: {
     *     // ... the filter for the RoutineSubtypes we want to count
     *   }
     * })
    **/
    count<T extends RoutineSubtypeCountArgs>(
      args?: Subset<T, RoutineSubtypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoutineSubtypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RoutineSubtype.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoutineSubtypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoutineSubtypeAggregateArgs>(args: Subset<T, RoutineSubtypeAggregateArgs>): Prisma.PrismaPromise<GetRoutineSubtypeAggregateType<T>>

    /**
     * Group by RoutineSubtype.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoutineSubtypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoutineSubtypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoutineSubtypeGroupByArgs['orderBy'] }
        : { orderBy?: RoutineSubtypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoutineSubtypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoutineSubtypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RoutineSubtype model
   */
  readonly fields: RoutineSubtypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RoutineSubtype.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoutineSubtypeClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    routine<T extends RoutineSubtype$routineArgs<ExtArgs> = {}>(args?: Subset<T, RoutineSubtype$routineArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoutinePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the RoutineSubtype model
   */ 
  interface RoutineSubtypeFieldRefs {
    readonly id: FieldRef<"RoutineSubtype", 'String'>
    readonly type: FieldRef<"RoutineSubtype", 'String'>
  }
    

  // Custom InputTypes

  /**
   * RoutineSubtype findUnique
   */
  export type RoutineSubtypeFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSubtype
     */
    select?: RoutineSubtypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoutineSubtypeInclude<ExtArgs> | null
    /**
     * Filter, which RoutineSubtype to fetch.
     */
    where: RoutineSubtypeWhereUniqueInput
  }


  /**
   * RoutineSubtype findUniqueOrThrow
   */
  export type RoutineSubtypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSubtype
     */
    select?: RoutineSubtypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoutineSubtypeInclude<ExtArgs> | null
    /**
     * Filter, which RoutineSubtype to fetch.
     */
    where: RoutineSubtypeWhereUniqueInput
  }


  /**
   * RoutineSubtype findFirst
   */
  export type RoutineSubtypeFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSubtype
     */
    select?: RoutineSubtypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoutineSubtypeInclude<ExtArgs> | null
    /**
     * Filter, which RoutineSubtype to fetch.
     */
    where?: RoutineSubtypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoutineSubtypes to fetch.
     */
    orderBy?: RoutineSubtypeOrderByWithRelationInput | RoutineSubtypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RoutineSubtypes.
     */
    cursor?: RoutineSubtypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoutineSubtypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoutineSubtypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RoutineSubtypes.
     */
    distinct?: RoutineSubtypeScalarFieldEnum | RoutineSubtypeScalarFieldEnum[]
  }


  /**
   * RoutineSubtype findFirstOrThrow
   */
  export type RoutineSubtypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSubtype
     */
    select?: RoutineSubtypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoutineSubtypeInclude<ExtArgs> | null
    /**
     * Filter, which RoutineSubtype to fetch.
     */
    where?: RoutineSubtypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoutineSubtypes to fetch.
     */
    orderBy?: RoutineSubtypeOrderByWithRelationInput | RoutineSubtypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RoutineSubtypes.
     */
    cursor?: RoutineSubtypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoutineSubtypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoutineSubtypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RoutineSubtypes.
     */
    distinct?: RoutineSubtypeScalarFieldEnum | RoutineSubtypeScalarFieldEnum[]
  }


  /**
   * RoutineSubtype findMany
   */
  export type RoutineSubtypeFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSubtype
     */
    select?: RoutineSubtypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoutineSubtypeInclude<ExtArgs> | null
    /**
     * Filter, which RoutineSubtypes to fetch.
     */
    where?: RoutineSubtypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoutineSubtypes to fetch.
     */
    orderBy?: RoutineSubtypeOrderByWithRelationInput | RoutineSubtypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RoutineSubtypes.
     */
    cursor?: RoutineSubtypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoutineSubtypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoutineSubtypes.
     */
    skip?: number
    distinct?: RoutineSubtypeScalarFieldEnum | RoutineSubtypeScalarFieldEnum[]
  }


  /**
   * RoutineSubtype create
   */
  export type RoutineSubtypeCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSubtype
     */
    select?: RoutineSubtypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoutineSubtypeInclude<ExtArgs> | null
    /**
     * The data needed to create a RoutineSubtype.
     */
    data: XOR<RoutineSubtypeCreateInput, RoutineSubtypeUncheckedCreateInput>
  }


  /**
   * RoutineSubtype createMany
   */
  export type RoutineSubtypeCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RoutineSubtypes.
     */
    data: RoutineSubtypeCreateManyInput | RoutineSubtypeCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * RoutineSubtype update
   */
  export type RoutineSubtypeUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSubtype
     */
    select?: RoutineSubtypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoutineSubtypeInclude<ExtArgs> | null
    /**
     * The data needed to update a RoutineSubtype.
     */
    data: XOR<RoutineSubtypeUpdateInput, RoutineSubtypeUncheckedUpdateInput>
    /**
     * Choose, which RoutineSubtype to update.
     */
    where: RoutineSubtypeWhereUniqueInput
  }


  /**
   * RoutineSubtype updateMany
   */
  export type RoutineSubtypeUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RoutineSubtypes.
     */
    data: XOR<RoutineSubtypeUpdateManyMutationInput, RoutineSubtypeUncheckedUpdateManyInput>
    /**
     * Filter which RoutineSubtypes to update
     */
    where?: RoutineSubtypeWhereInput
  }


  /**
   * RoutineSubtype upsert
   */
  export type RoutineSubtypeUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSubtype
     */
    select?: RoutineSubtypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoutineSubtypeInclude<ExtArgs> | null
    /**
     * The filter to search for the RoutineSubtype to update in case it exists.
     */
    where: RoutineSubtypeWhereUniqueInput
    /**
     * In case the RoutineSubtype found by the `where` argument doesn't exist, create a new RoutineSubtype with this data.
     */
    create: XOR<RoutineSubtypeCreateInput, RoutineSubtypeUncheckedCreateInput>
    /**
     * In case the RoutineSubtype was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoutineSubtypeUpdateInput, RoutineSubtypeUncheckedUpdateInput>
  }


  /**
   * RoutineSubtype delete
   */
  export type RoutineSubtypeDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSubtype
     */
    select?: RoutineSubtypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoutineSubtypeInclude<ExtArgs> | null
    /**
     * Filter which RoutineSubtype to delete.
     */
    where: RoutineSubtypeWhereUniqueInput
  }


  /**
   * RoutineSubtype deleteMany
   */
  export type RoutineSubtypeDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which RoutineSubtypes to delete
     */
    where?: RoutineSubtypeWhereInput
  }


  /**
   * RoutineSubtype.routine
   */
  export type RoutineSubtype$routineArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Routine
     */
    select?: RoutineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoutineInclude<ExtArgs> | null
    where?: RoutineWhereInput
    orderBy?: RoutineOrderByWithRelationInput | RoutineOrderByWithRelationInput[]
    cursor?: RoutineWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoutineScalarFieldEnum | RoutineScalarFieldEnum[]
  }


  /**
   * RoutineSubtype without action
   */
  export type RoutineSubtypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutineSubtype
     */
    select?: RoutineSubtypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoutineSubtypeInclude<ExtArgs> | null
  }



  /**
   * Model Exercise
   */

  export type AggregateExercise = {
    _count: ExerciseCountAggregateOutputType | null
    _avg: ExerciseAvgAggregateOutputType | null
    _sum: ExerciseSumAggregateOutputType | null
    _min: ExerciseMinAggregateOutputType | null
    _max: ExerciseMaxAggregateOutputType | null
  }

  export type ExerciseAvgAggregateOutputType = {
    imageId: number | null
  }

  export type ExerciseSumAggregateOutputType = {
    imageId: number | null
  }

  export type ExerciseMinAggregateOutputType = {
    id: string | null
    name: string | null
    type: $Enums.ExerciseType | null
    equipment: $Enums.Equipment | null
    imageId: number | null
    noteId: string | null
  }

  export type ExerciseMaxAggregateOutputType = {
    id: string | null
    name: string | null
    type: $Enums.ExerciseType | null
    equipment: $Enums.Equipment | null
    imageId: number | null
    noteId: string | null
  }

  export type ExerciseCountAggregateOutputType = {
    id: number
    name: number
    type: number
    equipment: number
    imageId: number
    noteId: number
    _all: number
  }


  export type ExerciseAvgAggregateInputType = {
    imageId?: true
  }

  export type ExerciseSumAggregateInputType = {
    imageId?: true
  }

  export type ExerciseMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    equipment?: true
    imageId?: true
    noteId?: true
  }

  export type ExerciseMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    equipment?: true
    imageId?: true
    noteId?: true
  }

  export type ExerciseCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    equipment?: true
    imageId?: true
    noteId?: true
    _all?: true
  }

  export type ExerciseAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Exercise to aggregate.
     */
    where?: ExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercises to fetch.
     */
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Exercises
    **/
    _count?: true | ExerciseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExerciseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExerciseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExerciseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExerciseMaxAggregateInputType
  }

  export type GetExerciseAggregateType<T extends ExerciseAggregateArgs> = {
        [P in keyof T & keyof AggregateExercise]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExercise[P]>
      : GetScalarType<T[P], AggregateExercise[P]>
  }




  export type ExerciseGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ExerciseWhereInput
    orderBy?: ExerciseOrderByWithAggregationInput | ExerciseOrderByWithAggregationInput[]
    by: ExerciseScalarFieldEnum[] | ExerciseScalarFieldEnum
    having?: ExerciseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExerciseCountAggregateInputType | true
    _avg?: ExerciseAvgAggregateInputType
    _sum?: ExerciseSumAggregateInputType
    _min?: ExerciseMinAggregateInputType
    _max?: ExerciseMaxAggregateInputType
  }

  export type ExerciseGroupByOutputType = {
    id: string
    name: string
    type: $Enums.ExerciseType
    equipment: $Enums.Equipment
    imageId: number | null
    noteId: string | null
    _count: ExerciseCountAggregateOutputType | null
    _avg: ExerciseAvgAggregateOutputType | null
    _sum: ExerciseSumAggregateOutputType | null
    _min: ExerciseMinAggregateOutputType | null
    _max: ExerciseMaxAggregateOutputType | null
  }

  type GetExerciseGroupByPayload<T extends ExerciseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExerciseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExerciseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExerciseGroupByOutputType[P]>
            : GetScalarType<T[P], ExerciseGroupByOutputType[P]>
        }
      >
    >


  export type ExerciseSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    equipment?: boolean
    imageId?: boolean
    noteId?: boolean
    note?: boolean | Exercise$noteArgs<ExtArgs>
    history?: boolean | Exercise$historyArgs<ExtArgs>
    routines?: boolean | Exercise$routinesArgs<ExtArgs>
    _count?: boolean | ExerciseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exercise"]>

  export type ExerciseSelectScalar = {
    id?: boolean
    name?: boolean
    type?: boolean
    equipment?: boolean
    imageId?: boolean
    noteId?: boolean
  }

  export type ExerciseInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    note?: boolean | Exercise$noteArgs<ExtArgs>
    history?: boolean | Exercise$historyArgs<ExtArgs>
    routines?: boolean | Exercise$routinesArgs<ExtArgs>
    _count?: boolean | ExerciseCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ExercisePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Exercise"
    objects: {
      note: Prisma.$NotePayload<ExtArgs> | null
      history: Prisma.$ExerciseLogPayload<ExtArgs>[]
      routines: Prisma.$RoutinePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: string
      name: string
      type: $Enums.ExerciseType
      equipment: $Enums.Equipment
      imageId: number | null
      noteId: string | null
    }, ExtArgs["result"]["exercise"]>
    composites: {}
  }


  type ExerciseGetPayload<S extends boolean | null | undefined | ExerciseDefaultArgs> = $Result.GetResult<Prisma.$ExercisePayload, S>

  type ExerciseCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ExerciseFindManyArgs, 'select' | 'include'> & {
      select?: ExerciseCountAggregateInputType | true
    }

  export interface ExerciseDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Exercise'], meta: { name: 'Exercise' } }
    /**
     * Find zero or one Exercise that matches the filter.
     * @param {ExerciseFindUniqueArgs} args - Arguments to find a Exercise
     * @example
     * // Get one Exercise
     * const exercise = await prisma.exercise.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ExerciseFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseFindUniqueArgs<ExtArgs>>
    ): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Exercise that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ExerciseFindUniqueOrThrowArgs} args - Arguments to find a Exercise
     * @example
     * // Get one Exercise
     * const exercise = await prisma.exercise.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ExerciseFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Exercise that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseFindFirstArgs} args - Arguments to find a Exercise
     * @example
     * // Get one Exercise
     * const exercise = await prisma.exercise.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ExerciseFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseFindFirstArgs<ExtArgs>>
    ): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Exercise that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseFindFirstOrThrowArgs} args - Arguments to find a Exercise
     * @example
     * // Get one Exercise
     * const exercise = await prisma.exercise.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ExerciseFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Exercises that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Exercises
     * const exercises = await prisma.exercise.findMany()
     * 
     * // Get first 10 Exercises
     * const exercises = await prisma.exercise.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const exerciseWithIdOnly = await prisma.exercise.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ExerciseFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Exercise.
     * @param {ExerciseCreateArgs} args - Arguments to create a Exercise.
     * @example
     * // Create one Exercise
     * const Exercise = await prisma.exercise.create({
     *   data: {
     *     // ... data to create a Exercise
     *   }
     * })
     * 
    **/
    create<T extends ExerciseCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseCreateArgs<ExtArgs>>
    ): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Exercises.
     *     @param {ExerciseCreateManyArgs} args - Arguments to create many Exercises.
     *     @example
     *     // Create many Exercises
     *     const exercise = await prisma.exercise.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ExerciseCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Exercise.
     * @param {ExerciseDeleteArgs} args - Arguments to delete one Exercise.
     * @example
     * // Delete one Exercise
     * const Exercise = await prisma.exercise.delete({
     *   where: {
     *     // ... filter to delete one Exercise
     *   }
     * })
     * 
    **/
    delete<T extends ExerciseDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseDeleteArgs<ExtArgs>>
    ): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Exercise.
     * @param {ExerciseUpdateArgs} args - Arguments to update one Exercise.
     * @example
     * // Update one Exercise
     * const exercise = await prisma.exercise.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ExerciseUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseUpdateArgs<ExtArgs>>
    ): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Exercises.
     * @param {ExerciseDeleteManyArgs} args - Arguments to filter Exercises to delete.
     * @example
     * // Delete a few Exercises
     * const { count } = await prisma.exercise.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ExerciseDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Exercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Exercises
     * const exercise = await prisma.exercise.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ExerciseUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Exercise.
     * @param {ExerciseUpsertArgs} args - Arguments to update or create a Exercise.
     * @example
     * // Update or create a Exercise
     * const exercise = await prisma.exercise.upsert({
     *   create: {
     *     // ... data to create a Exercise
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Exercise we want to update
     *   }
     * })
    **/
    upsert<T extends ExerciseUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseUpsertArgs<ExtArgs>>
    ): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Exercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseCountArgs} args - Arguments to filter Exercises to count.
     * @example
     * // Count the number of Exercises
     * const count = await prisma.exercise.count({
     *   where: {
     *     // ... the filter for the Exercises we want to count
     *   }
     * })
    **/
    count<T extends ExerciseCountArgs>(
      args?: Subset<T, ExerciseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExerciseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Exercise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExerciseAggregateArgs>(args: Subset<T, ExerciseAggregateArgs>): Prisma.PrismaPromise<GetExerciseAggregateType<T>>

    /**
     * Group by Exercise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExerciseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExerciseGroupByArgs['orderBy'] }
        : { orderBy?: ExerciseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExerciseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExerciseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Exercise model
   */
  readonly fields: ExerciseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Exercise.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExerciseClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    note<T extends Exercise$noteArgs<ExtArgs> = {}>(args?: Subset<T, Exercise$noteArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    history<T extends Exercise$historyArgs<ExtArgs> = {}>(args?: Subset<T, Exercise$historyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExerciseLogPayload<ExtArgs>, T, 'findMany'> | Null>;

    routines<T extends Exercise$routinesArgs<ExtArgs> = {}>(args?: Subset<T, Exercise$routinesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoutinePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Exercise model
   */ 
  interface ExerciseFieldRefs {
    readonly id: FieldRef<"Exercise", 'String'>
    readonly name: FieldRef<"Exercise", 'String'>
    readonly type: FieldRef<"Exercise", 'ExerciseType'>
    readonly equipment: FieldRef<"Exercise", 'Equipment'>
    readonly imageId: FieldRef<"Exercise", 'Int'>
    readonly noteId: FieldRef<"Exercise", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Exercise findUnique
   */
  export type ExerciseFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercise to fetch.
     */
    where: ExerciseWhereUniqueInput
  }


  /**
   * Exercise findUniqueOrThrow
   */
  export type ExerciseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercise to fetch.
     */
    where: ExerciseWhereUniqueInput
  }


  /**
   * Exercise findFirst
   */
  export type ExerciseFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercise to fetch.
     */
    where?: ExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercises to fetch.
     */
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exercises.
     */
    cursor?: ExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exercises.
     */
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }


  /**
   * Exercise findFirstOrThrow
   */
  export type ExerciseFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercise to fetch.
     */
    where?: ExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercises to fetch.
     */
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exercises.
     */
    cursor?: ExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exercises.
     */
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }


  /**
   * Exercise findMany
   */
  export type ExerciseFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter, which Exercises to fetch.
     */
    where?: ExerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercises to fetch.
     */
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Exercises.
     */
    cursor?: ExerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercises.
     */
    skip?: number
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }


  /**
   * Exercise create
   */
  export type ExerciseCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * The data needed to create a Exercise.
     */
    data: XOR<ExerciseCreateInput, ExerciseUncheckedCreateInput>
  }


  /**
   * Exercise createMany
   */
  export type ExerciseCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Exercises.
     */
    data: ExerciseCreateManyInput | ExerciseCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Exercise update
   */
  export type ExerciseUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * The data needed to update a Exercise.
     */
    data: XOR<ExerciseUpdateInput, ExerciseUncheckedUpdateInput>
    /**
     * Choose, which Exercise to update.
     */
    where: ExerciseWhereUniqueInput
  }


  /**
   * Exercise updateMany
   */
  export type ExerciseUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Exercises.
     */
    data: XOR<ExerciseUpdateManyMutationInput, ExerciseUncheckedUpdateManyInput>
    /**
     * Filter which Exercises to update
     */
    where?: ExerciseWhereInput
  }


  /**
   * Exercise upsert
   */
  export type ExerciseUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * The filter to search for the Exercise to update in case it exists.
     */
    where: ExerciseWhereUniqueInput
    /**
     * In case the Exercise found by the `where` argument doesn't exist, create a new Exercise with this data.
     */
    create: XOR<ExerciseCreateInput, ExerciseUncheckedCreateInput>
    /**
     * In case the Exercise was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExerciseUpdateInput, ExerciseUncheckedUpdateInput>
  }


  /**
   * Exercise delete
   */
  export type ExerciseDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseInclude<ExtArgs> | null
    /**
     * Filter which Exercise to delete.
     */
    where: ExerciseWhereUniqueInput
  }


  /**
   * Exercise deleteMany
   */
  export type ExerciseDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Exercises to delete
     */
    where?: ExerciseWhereInput
  }


  /**
   * Exercise.note
   */
  export type Exercise$noteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NoteInclude<ExtArgs> | null
    where?: NoteWhereInput
  }


  /**
   * Exercise.history
   */
  export type Exercise$historyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseLog
     */
    select?: ExerciseLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseLogInclude<ExtArgs> | null
    where?: ExerciseLogWhereInput
    orderBy?: ExerciseLogOrderByWithRelationInput | ExerciseLogOrderByWithRelationInput[]
    cursor?: ExerciseLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExerciseLogScalarFieldEnum | ExerciseLogScalarFieldEnum[]
  }


  /**
   * Exercise.routines
   */
  export type Exercise$routinesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Routine
     */
    select?: RoutineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoutineInclude<ExtArgs> | null
    where?: RoutineWhereInput
    orderBy?: RoutineOrderByWithRelationInput | RoutineOrderByWithRelationInput[]
    cursor?: RoutineWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoutineScalarFieldEnum | RoutineScalarFieldEnum[]
  }


  /**
   * Exercise without action
   */
  export type ExerciseDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseInclude<ExtArgs> | null
  }



  /**
   * Model ExerciseLog
   */

  export type AggregateExerciseLog = {
    _count: ExerciseLogCountAggregateOutputType | null
    _avg: ExerciseLogAvgAggregateOutputType | null
    _sum: ExerciseLogSumAggregateOutputType | null
    _min: ExerciseLogMinAggregateOutputType | null
    _max: ExerciseLogMaxAggregateOutputType | null
  }

  export type ExerciseLogAvgAggregateOutputType = {
    sets: number | null
    reps: number | null
    weight: number | null
    duration: number | null
  }

  export type ExerciseLogSumAggregateOutputType = {
    sets: number | null
    reps: number | null
    weight: number | null
    duration: number | null
  }

  export type ExerciseLogMinAggregateOutputType = {
    id: string | null
    exerciseId: string | null
    sets: number | null
    reps: number | null
    weight: number | null
    duration: number | null
    noteId: string | null
    trainingDayId: string | null
  }

  export type ExerciseLogMaxAggregateOutputType = {
    id: string | null
    exerciseId: string | null
    sets: number | null
    reps: number | null
    weight: number | null
    duration: number | null
    noteId: string | null
    trainingDayId: string | null
  }

  export type ExerciseLogCountAggregateOutputType = {
    id: number
    exerciseId: number
    sets: number
    reps: number
    weight: number
    duration: number
    noteId: number
    trainingDayId: number
    _all: number
  }


  export type ExerciseLogAvgAggregateInputType = {
    sets?: true
    reps?: true
    weight?: true
    duration?: true
  }

  export type ExerciseLogSumAggregateInputType = {
    sets?: true
    reps?: true
    weight?: true
    duration?: true
  }

  export type ExerciseLogMinAggregateInputType = {
    id?: true
    exerciseId?: true
    sets?: true
    reps?: true
    weight?: true
    duration?: true
    noteId?: true
    trainingDayId?: true
  }

  export type ExerciseLogMaxAggregateInputType = {
    id?: true
    exerciseId?: true
    sets?: true
    reps?: true
    weight?: true
    duration?: true
    noteId?: true
    trainingDayId?: true
  }

  export type ExerciseLogCountAggregateInputType = {
    id?: true
    exerciseId?: true
    sets?: true
    reps?: true
    weight?: true
    duration?: true
    noteId?: true
    trainingDayId?: true
    _all?: true
  }

  export type ExerciseLogAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExerciseLog to aggregate.
     */
    where?: ExerciseLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExerciseLogs to fetch.
     */
    orderBy?: ExerciseLogOrderByWithRelationInput | ExerciseLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExerciseLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExerciseLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExerciseLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ExerciseLogs
    **/
    _count?: true | ExerciseLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExerciseLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExerciseLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExerciseLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExerciseLogMaxAggregateInputType
  }

  export type GetExerciseLogAggregateType<T extends ExerciseLogAggregateArgs> = {
        [P in keyof T & keyof AggregateExerciseLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExerciseLog[P]>
      : GetScalarType<T[P], AggregateExerciseLog[P]>
  }




  export type ExerciseLogGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ExerciseLogWhereInput
    orderBy?: ExerciseLogOrderByWithAggregationInput | ExerciseLogOrderByWithAggregationInput[]
    by: ExerciseLogScalarFieldEnum[] | ExerciseLogScalarFieldEnum
    having?: ExerciseLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExerciseLogCountAggregateInputType | true
    _avg?: ExerciseLogAvgAggregateInputType
    _sum?: ExerciseLogSumAggregateInputType
    _min?: ExerciseLogMinAggregateInputType
    _max?: ExerciseLogMaxAggregateInputType
  }

  export type ExerciseLogGroupByOutputType = {
    id: string
    exerciseId: string
    sets: number | null
    reps: number | null
    weight: number | null
    duration: number | null
    noteId: string | null
    trainingDayId: string | null
    _count: ExerciseLogCountAggregateOutputType | null
    _avg: ExerciseLogAvgAggregateOutputType | null
    _sum: ExerciseLogSumAggregateOutputType | null
    _min: ExerciseLogMinAggregateOutputType | null
    _max: ExerciseLogMaxAggregateOutputType | null
  }

  type GetExerciseLogGroupByPayload<T extends ExerciseLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExerciseLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExerciseLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExerciseLogGroupByOutputType[P]>
            : GetScalarType<T[P], ExerciseLogGroupByOutputType[P]>
        }
      >
    >


  export type ExerciseLogSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    exerciseId?: boolean
    sets?: boolean
    reps?: boolean
    weight?: boolean
    duration?: boolean
    noteId?: boolean
    trainingDayId?: boolean
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
    climbLog?: boolean | ExerciseLog$climbLogArgs<ExtArgs>
    note?: boolean | ExerciseLog$noteArgs<ExtArgs>
    TrainingDay?: boolean | ExerciseLog$TrainingDayArgs<ExtArgs>
    _count?: boolean | ExerciseLogCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exerciseLog"]>

  export type ExerciseLogSelectScalar = {
    id?: boolean
    exerciseId?: boolean
    sets?: boolean
    reps?: boolean
    weight?: boolean
    duration?: boolean
    noteId?: boolean
    trainingDayId?: boolean
  }

  export type ExerciseLogInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    exercise?: boolean | ExerciseDefaultArgs<ExtArgs>
    climbLog?: boolean | ExerciseLog$climbLogArgs<ExtArgs>
    note?: boolean | ExerciseLog$noteArgs<ExtArgs>
    TrainingDay?: boolean | ExerciseLog$TrainingDayArgs<ExtArgs>
    _count?: boolean | ExerciseLogCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ExerciseLogPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "ExerciseLog"
    objects: {
      exercise: Prisma.$ExercisePayload<ExtArgs>
      climbLog: Prisma.$ClimbLogPayload<ExtArgs>[]
      note: Prisma.$NotePayload<ExtArgs> | null
      TrainingDay: Prisma.$TrainingDayPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetResult<{
      id: string
      exerciseId: string
      sets: number | null
      reps: number | null
      weight: number | null
      duration: number | null
      noteId: string | null
      trainingDayId: string | null
    }, ExtArgs["result"]["exerciseLog"]>
    composites: {}
  }


  type ExerciseLogGetPayload<S extends boolean | null | undefined | ExerciseLogDefaultArgs> = $Result.GetResult<Prisma.$ExerciseLogPayload, S>

  type ExerciseLogCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ExerciseLogFindManyArgs, 'select' | 'include'> & {
      select?: ExerciseLogCountAggregateInputType | true
    }

  export interface ExerciseLogDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ExerciseLog'], meta: { name: 'ExerciseLog' } }
    /**
     * Find zero or one ExerciseLog that matches the filter.
     * @param {ExerciseLogFindUniqueArgs} args - Arguments to find a ExerciseLog
     * @example
     * // Get one ExerciseLog
     * const exerciseLog = await prisma.exerciseLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ExerciseLogFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseLogFindUniqueArgs<ExtArgs>>
    ): Prisma__ExerciseLogClient<$Result.GetResult<Prisma.$ExerciseLogPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ExerciseLog that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ExerciseLogFindUniqueOrThrowArgs} args - Arguments to find a ExerciseLog
     * @example
     * // Get one ExerciseLog
     * const exerciseLog = await prisma.exerciseLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ExerciseLogFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseLogFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ExerciseLogClient<$Result.GetResult<Prisma.$ExerciseLogPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ExerciseLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseLogFindFirstArgs} args - Arguments to find a ExerciseLog
     * @example
     * // Get one ExerciseLog
     * const exerciseLog = await prisma.exerciseLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ExerciseLogFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseLogFindFirstArgs<ExtArgs>>
    ): Prisma__ExerciseLogClient<$Result.GetResult<Prisma.$ExerciseLogPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ExerciseLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseLogFindFirstOrThrowArgs} args - Arguments to find a ExerciseLog
     * @example
     * // Get one ExerciseLog
     * const exerciseLog = await prisma.exerciseLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ExerciseLogFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseLogFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ExerciseLogClient<$Result.GetResult<Prisma.$ExerciseLogPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ExerciseLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseLogFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ExerciseLogs
     * const exerciseLogs = await prisma.exerciseLog.findMany()
     * 
     * // Get first 10 ExerciseLogs
     * const exerciseLogs = await prisma.exerciseLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const exerciseLogWithIdOnly = await prisma.exerciseLog.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ExerciseLogFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseLogFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExerciseLogPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ExerciseLog.
     * @param {ExerciseLogCreateArgs} args - Arguments to create a ExerciseLog.
     * @example
     * // Create one ExerciseLog
     * const ExerciseLog = await prisma.exerciseLog.create({
     *   data: {
     *     // ... data to create a ExerciseLog
     *   }
     * })
     * 
    **/
    create<T extends ExerciseLogCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseLogCreateArgs<ExtArgs>>
    ): Prisma__ExerciseLogClient<$Result.GetResult<Prisma.$ExerciseLogPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ExerciseLogs.
     *     @param {ExerciseLogCreateManyArgs} args - Arguments to create many ExerciseLogs.
     *     @example
     *     // Create many ExerciseLogs
     *     const exerciseLog = await prisma.exerciseLog.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ExerciseLogCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseLogCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ExerciseLog.
     * @param {ExerciseLogDeleteArgs} args - Arguments to delete one ExerciseLog.
     * @example
     * // Delete one ExerciseLog
     * const ExerciseLog = await prisma.exerciseLog.delete({
     *   where: {
     *     // ... filter to delete one ExerciseLog
     *   }
     * })
     * 
    **/
    delete<T extends ExerciseLogDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseLogDeleteArgs<ExtArgs>>
    ): Prisma__ExerciseLogClient<$Result.GetResult<Prisma.$ExerciseLogPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ExerciseLog.
     * @param {ExerciseLogUpdateArgs} args - Arguments to update one ExerciseLog.
     * @example
     * // Update one ExerciseLog
     * const exerciseLog = await prisma.exerciseLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ExerciseLogUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseLogUpdateArgs<ExtArgs>>
    ): Prisma__ExerciseLogClient<$Result.GetResult<Prisma.$ExerciseLogPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ExerciseLogs.
     * @param {ExerciseLogDeleteManyArgs} args - Arguments to filter ExerciseLogs to delete.
     * @example
     * // Delete a few ExerciseLogs
     * const { count } = await prisma.exerciseLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ExerciseLogDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseLogDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ExerciseLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ExerciseLogs
     * const exerciseLog = await prisma.exerciseLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ExerciseLogUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseLogUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ExerciseLog.
     * @param {ExerciseLogUpsertArgs} args - Arguments to update or create a ExerciseLog.
     * @example
     * // Update or create a ExerciseLog
     * const exerciseLog = await prisma.exerciseLog.upsert({
     *   create: {
     *     // ... data to create a ExerciseLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ExerciseLog we want to update
     *   }
     * })
    **/
    upsert<T extends ExerciseLogUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseLogUpsertArgs<ExtArgs>>
    ): Prisma__ExerciseLogClient<$Result.GetResult<Prisma.$ExerciseLogPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ExerciseLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseLogCountArgs} args - Arguments to filter ExerciseLogs to count.
     * @example
     * // Count the number of ExerciseLogs
     * const count = await prisma.exerciseLog.count({
     *   where: {
     *     // ... the filter for the ExerciseLogs we want to count
     *   }
     * })
    **/
    count<T extends ExerciseLogCountArgs>(
      args?: Subset<T, ExerciseLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExerciseLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ExerciseLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExerciseLogAggregateArgs>(args: Subset<T, ExerciseLogAggregateArgs>): Prisma.PrismaPromise<GetExerciseLogAggregateType<T>>

    /**
     * Group by ExerciseLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExerciseLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExerciseLogGroupByArgs['orderBy'] }
        : { orderBy?: ExerciseLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExerciseLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExerciseLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ExerciseLog model
   */
  readonly fields: ExerciseLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ExerciseLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExerciseLogClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    exercise<T extends ExerciseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ExerciseDefaultArgs<ExtArgs>>): Prisma__ExerciseClient<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    climbLog<T extends ExerciseLog$climbLogArgs<ExtArgs> = {}>(args?: Subset<T, ExerciseLog$climbLogArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClimbLogPayload<ExtArgs>, T, 'findMany'> | Null>;

    note<T extends ExerciseLog$noteArgs<ExtArgs> = {}>(args?: Subset<T, ExerciseLog$noteArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    TrainingDay<T extends ExerciseLog$TrainingDayArgs<ExtArgs> = {}>(args?: Subset<T, ExerciseLog$TrainingDayArgs<ExtArgs>>): Prisma__TrainingDayClient<$Result.GetResult<Prisma.$TrainingDayPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ExerciseLog model
   */ 
  interface ExerciseLogFieldRefs {
    readonly id: FieldRef<"ExerciseLog", 'String'>
    readonly exerciseId: FieldRef<"ExerciseLog", 'String'>
    readonly sets: FieldRef<"ExerciseLog", 'Int'>
    readonly reps: FieldRef<"ExerciseLog", 'Int'>
    readonly weight: FieldRef<"ExerciseLog", 'Int'>
    readonly duration: FieldRef<"ExerciseLog", 'Int'>
    readonly noteId: FieldRef<"ExerciseLog", 'String'>
    readonly trainingDayId: FieldRef<"ExerciseLog", 'String'>
  }
    

  // Custom InputTypes

  /**
   * ExerciseLog findUnique
   */
  export type ExerciseLogFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseLog
     */
    select?: ExerciseLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseLogInclude<ExtArgs> | null
    /**
     * Filter, which ExerciseLog to fetch.
     */
    where: ExerciseLogWhereUniqueInput
  }


  /**
   * ExerciseLog findUniqueOrThrow
   */
  export type ExerciseLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseLog
     */
    select?: ExerciseLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseLogInclude<ExtArgs> | null
    /**
     * Filter, which ExerciseLog to fetch.
     */
    where: ExerciseLogWhereUniqueInput
  }


  /**
   * ExerciseLog findFirst
   */
  export type ExerciseLogFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseLog
     */
    select?: ExerciseLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseLogInclude<ExtArgs> | null
    /**
     * Filter, which ExerciseLog to fetch.
     */
    where?: ExerciseLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExerciseLogs to fetch.
     */
    orderBy?: ExerciseLogOrderByWithRelationInput | ExerciseLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExerciseLogs.
     */
    cursor?: ExerciseLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExerciseLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExerciseLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExerciseLogs.
     */
    distinct?: ExerciseLogScalarFieldEnum | ExerciseLogScalarFieldEnum[]
  }


  /**
   * ExerciseLog findFirstOrThrow
   */
  export type ExerciseLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseLog
     */
    select?: ExerciseLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseLogInclude<ExtArgs> | null
    /**
     * Filter, which ExerciseLog to fetch.
     */
    where?: ExerciseLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExerciseLogs to fetch.
     */
    orderBy?: ExerciseLogOrderByWithRelationInput | ExerciseLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExerciseLogs.
     */
    cursor?: ExerciseLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExerciseLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExerciseLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExerciseLogs.
     */
    distinct?: ExerciseLogScalarFieldEnum | ExerciseLogScalarFieldEnum[]
  }


  /**
   * ExerciseLog findMany
   */
  export type ExerciseLogFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseLog
     */
    select?: ExerciseLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseLogInclude<ExtArgs> | null
    /**
     * Filter, which ExerciseLogs to fetch.
     */
    where?: ExerciseLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExerciseLogs to fetch.
     */
    orderBy?: ExerciseLogOrderByWithRelationInput | ExerciseLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ExerciseLogs.
     */
    cursor?: ExerciseLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExerciseLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExerciseLogs.
     */
    skip?: number
    distinct?: ExerciseLogScalarFieldEnum | ExerciseLogScalarFieldEnum[]
  }


  /**
   * ExerciseLog create
   */
  export type ExerciseLogCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseLog
     */
    select?: ExerciseLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseLogInclude<ExtArgs> | null
    /**
     * The data needed to create a ExerciseLog.
     */
    data: XOR<ExerciseLogCreateInput, ExerciseLogUncheckedCreateInput>
  }


  /**
   * ExerciseLog createMany
   */
  export type ExerciseLogCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ExerciseLogs.
     */
    data: ExerciseLogCreateManyInput | ExerciseLogCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * ExerciseLog update
   */
  export type ExerciseLogUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseLog
     */
    select?: ExerciseLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseLogInclude<ExtArgs> | null
    /**
     * The data needed to update a ExerciseLog.
     */
    data: XOR<ExerciseLogUpdateInput, ExerciseLogUncheckedUpdateInput>
    /**
     * Choose, which ExerciseLog to update.
     */
    where: ExerciseLogWhereUniqueInput
  }


  /**
   * ExerciseLog updateMany
   */
  export type ExerciseLogUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ExerciseLogs.
     */
    data: XOR<ExerciseLogUpdateManyMutationInput, ExerciseLogUncheckedUpdateManyInput>
    /**
     * Filter which ExerciseLogs to update
     */
    where?: ExerciseLogWhereInput
  }


  /**
   * ExerciseLog upsert
   */
  export type ExerciseLogUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseLog
     */
    select?: ExerciseLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseLogInclude<ExtArgs> | null
    /**
     * The filter to search for the ExerciseLog to update in case it exists.
     */
    where: ExerciseLogWhereUniqueInput
    /**
     * In case the ExerciseLog found by the `where` argument doesn't exist, create a new ExerciseLog with this data.
     */
    create: XOR<ExerciseLogCreateInput, ExerciseLogUncheckedCreateInput>
    /**
     * In case the ExerciseLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExerciseLogUpdateInput, ExerciseLogUncheckedUpdateInput>
  }


  /**
   * ExerciseLog delete
   */
  export type ExerciseLogDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseLog
     */
    select?: ExerciseLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseLogInclude<ExtArgs> | null
    /**
     * Filter which ExerciseLog to delete.
     */
    where: ExerciseLogWhereUniqueInput
  }


  /**
   * ExerciseLog deleteMany
   */
  export type ExerciseLogDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExerciseLogs to delete
     */
    where?: ExerciseLogWhereInput
  }


  /**
   * ExerciseLog.climbLog
   */
  export type ExerciseLog$climbLogArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClimbLog
     */
    select?: ClimbLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClimbLogInclude<ExtArgs> | null
    where?: ClimbLogWhereInput
    orderBy?: ClimbLogOrderByWithRelationInput | ClimbLogOrderByWithRelationInput[]
    cursor?: ClimbLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClimbLogScalarFieldEnum | ClimbLogScalarFieldEnum[]
  }


  /**
   * ExerciseLog.note
   */
  export type ExerciseLog$noteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NoteInclude<ExtArgs> | null
    where?: NoteWhereInput
  }


  /**
   * ExerciseLog.TrainingDay
   */
  export type ExerciseLog$TrainingDayArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingDay
     */
    select?: TrainingDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainingDayInclude<ExtArgs> | null
    where?: TrainingDayWhereInput
  }


  /**
   * ExerciseLog without action
   */
  export type ExerciseLogDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseLog
     */
    select?: ExerciseLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseLogInclude<ExtArgs> | null
  }



  /**
   * Model ClimbLog
   */

  export type AggregateClimbLog = {
    _count: ClimbLogCountAggregateOutputType | null
    _avg: ClimbLogAvgAggregateOutputType | null
    _sum: ClimbLogSumAggregateOutputType | null
    _min: ClimbLogMinAggregateOutputType | null
    _max: ClimbLogMaxAggregateOutputType | null
  }

  export type ClimbLogAvgAggregateOutputType = {
    grade: number | null
    attempts: number | null
  }

  export type ClimbLogSumAggregateOutputType = {
    grade: number | null
    attempts: number | null
  }

  export type ClimbLogMinAggregateOutputType = {
    id: string | null
    name: string | null
    grade: number | null
    project: boolean | null
    attempts: number | null
    flashed: boolean | null
    locationId: string | null
    noteId: string | null
    workoutLogId: string | null
  }

  export type ClimbLogMaxAggregateOutputType = {
    id: string | null
    name: string | null
    grade: number | null
    project: boolean | null
    attempts: number | null
    flashed: boolean | null
    locationId: string | null
    noteId: string | null
    workoutLogId: string | null
  }

  export type ClimbLogCountAggregateOutputType = {
    id: number
    name: number
    grade: number
    project: number
    attempts: number
    flashed: number
    locationId: number
    noteId: number
    workoutLogId: number
    _all: number
  }


  export type ClimbLogAvgAggregateInputType = {
    grade?: true
    attempts?: true
  }

  export type ClimbLogSumAggregateInputType = {
    grade?: true
    attempts?: true
  }

  export type ClimbLogMinAggregateInputType = {
    id?: true
    name?: true
    grade?: true
    project?: true
    attempts?: true
    flashed?: true
    locationId?: true
    noteId?: true
    workoutLogId?: true
  }

  export type ClimbLogMaxAggregateInputType = {
    id?: true
    name?: true
    grade?: true
    project?: true
    attempts?: true
    flashed?: true
    locationId?: true
    noteId?: true
    workoutLogId?: true
  }

  export type ClimbLogCountAggregateInputType = {
    id?: true
    name?: true
    grade?: true
    project?: true
    attempts?: true
    flashed?: true
    locationId?: true
    noteId?: true
    workoutLogId?: true
    _all?: true
  }

  export type ClimbLogAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClimbLog to aggregate.
     */
    where?: ClimbLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClimbLogs to fetch.
     */
    orderBy?: ClimbLogOrderByWithRelationInput | ClimbLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClimbLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClimbLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClimbLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ClimbLogs
    **/
    _count?: true | ClimbLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClimbLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClimbLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClimbLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClimbLogMaxAggregateInputType
  }

  export type GetClimbLogAggregateType<T extends ClimbLogAggregateArgs> = {
        [P in keyof T & keyof AggregateClimbLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClimbLog[P]>
      : GetScalarType<T[P], AggregateClimbLog[P]>
  }




  export type ClimbLogGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ClimbLogWhereInput
    orderBy?: ClimbLogOrderByWithAggregationInput | ClimbLogOrderByWithAggregationInput[]
    by: ClimbLogScalarFieldEnum[] | ClimbLogScalarFieldEnum
    having?: ClimbLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClimbLogCountAggregateInputType | true
    _avg?: ClimbLogAvgAggregateInputType
    _sum?: ClimbLogSumAggregateInputType
    _min?: ClimbLogMinAggregateInputType
    _max?: ClimbLogMaxAggregateInputType
  }

  export type ClimbLogGroupByOutputType = {
    id: string
    name: string | null
    grade: number
    project: boolean | null
    attempts: number | null
    flashed: boolean | null
    locationId: string | null
    noteId: string | null
    workoutLogId: string | null
    _count: ClimbLogCountAggregateOutputType | null
    _avg: ClimbLogAvgAggregateOutputType | null
    _sum: ClimbLogSumAggregateOutputType | null
    _min: ClimbLogMinAggregateOutputType | null
    _max: ClimbLogMaxAggregateOutputType | null
  }

  type GetClimbLogGroupByPayload<T extends ClimbLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClimbLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClimbLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClimbLogGroupByOutputType[P]>
            : GetScalarType<T[P], ClimbLogGroupByOutputType[P]>
        }
      >
    >


  export type ClimbLogSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    grade?: boolean
    project?: boolean
    attempts?: boolean
    flashed?: boolean
    locationId?: boolean
    noteId?: boolean
    workoutLogId?: boolean
    location?: boolean | ClimbLog$locationArgs<ExtArgs>
    note?: boolean | ClimbLog$noteArgs<ExtArgs>
    WorkoutLog?: boolean | ClimbLog$WorkoutLogArgs<ExtArgs>
  }, ExtArgs["result"]["climbLog"]>

  export type ClimbLogSelectScalar = {
    id?: boolean
    name?: boolean
    grade?: boolean
    project?: boolean
    attempts?: boolean
    flashed?: boolean
    locationId?: boolean
    noteId?: boolean
    workoutLogId?: boolean
  }

  export type ClimbLogInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    location?: boolean | ClimbLog$locationArgs<ExtArgs>
    note?: boolean | ClimbLog$noteArgs<ExtArgs>
    WorkoutLog?: boolean | ClimbLog$WorkoutLogArgs<ExtArgs>
  }


  export type $ClimbLogPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "ClimbLog"
    objects: {
      location: Prisma.$LocationPayload<ExtArgs> | null
      note: Prisma.$NotePayload<ExtArgs> | null
      WorkoutLog: Prisma.$ExerciseLogPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetResult<{
      id: string
      name: string | null
      grade: number
      project: boolean | null
      attempts: number | null
      flashed: boolean | null
      locationId: string | null
      noteId: string | null
      workoutLogId: string | null
    }, ExtArgs["result"]["climbLog"]>
    composites: {}
  }


  type ClimbLogGetPayload<S extends boolean | null | undefined | ClimbLogDefaultArgs> = $Result.GetResult<Prisma.$ClimbLogPayload, S>

  type ClimbLogCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ClimbLogFindManyArgs, 'select' | 'include'> & {
      select?: ClimbLogCountAggregateInputType | true
    }

  export interface ClimbLogDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ClimbLog'], meta: { name: 'ClimbLog' } }
    /**
     * Find zero or one ClimbLog that matches the filter.
     * @param {ClimbLogFindUniqueArgs} args - Arguments to find a ClimbLog
     * @example
     * // Get one ClimbLog
     * const climbLog = await prisma.climbLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ClimbLogFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ClimbLogFindUniqueArgs<ExtArgs>>
    ): Prisma__ClimbLogClient<$Result.GetResult<Prisma.$ClimbLogPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ClimbLog that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ClimbLogFindUniqueOrThrowArgs} args - Arguments to find a ClimbLog
     * @example
     * // Get one ClimbLog
     * const climbLog = await prisma.climbLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ClimbLogFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ClimbLogFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ClimbLogClient<$Result.GetResult<Prisma.$ClimbLogPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ClimbLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClimbLogFindFirstArgs} args - Arguments to find a ClimbLog
     * @example
     * // Get one ClimbLog
     * const climbLog = await prisma.climbLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ClimbLogFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ClimbLogFindFirstArgs<ExtArgs>>
    ): Prisma__ClimbLogClient<$Result.GetResult<Prisma.$ClimbLogPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ClimbLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClimbLogFindFirstOrThrowArgs} args - Arguments to find a ClimbLog
     * @example
     * // Get one ClimbLog
     * const climbLog = await prisma.climbLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ClimbLogFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ClimbLogFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ClimbLogClient<$Result.GetResult<Prisma.$ClimbLogPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ClimbLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClimbLogFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ClimbLogs
     * const climbLogs = await prisma.climbLog.findMany()
     * 
     * // Get first 10 ClimbLogs
     * const climbLogs = await prisma.climbLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const climbLogWithIdOnly = await prisma.climbLog.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ClimbLogFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClimbLogFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClimbLogPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ClimbLog.
     * @param {ClimbLogCreateArgs} args - Arguments to create a ClimbLog.
     * @example
     * // Create one ClimbLog
     * const ClimbLog = await prisma.climbLog.create({
     *   data: {
     *     // ... data to create a ClimbLog
     *   }
     * })
     * 
    **/
    create<T extends ClimbLogCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ClimbLogCreateArgs<ExtArgs>>
    ): Prisma__ClimbLogClient<$Result.GetResult<Prisma.$ClimbLogPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ClimbLogs.
     *     @param {ClimbLogCreateManyArgs} args - Arguments to create many ClimbLogs.
     *     @example
     *     // Create many ClimbLogs
     *     const climbLog = await prisma.climbLog.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ClimbLogCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClimbLogCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ClimbLog.
     * @param {ClimbLogDeleteArgs} args - Arguments to delete one ClimbLog.
     * @example
     * // Delete one ClimbLog
     * const ClimbLog = await prisma.climbLog.delete({
     *   where: {
     *     // ... filter to delete one ClimbLog
     *   }
     * })
     * 
    **/
    delete<T extends ClimbLogDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ClimbLogDeleteArgs<ExtArgs>>
    ): Prisma__ClimbLogClient<$Result.GetResult<Prisma.$ClimbLogPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ClimbLog.
     * @param {ClimbLogUpdateArgs} args - Arguments to update one ClimbLog.
     * @example
     * // Update one ClimbLog
     * const climbLog = await prisma.climbLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ClimbLogUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ClimbLogUpdateArgs<ExtArgs>>
    ): Prisma__ClimbLogClient<$Result.GetResult<Prisma.$ClimbLogPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ClimbLogs.
     * @param {ClimbLogDeleteManyArgs} args - Arguments to filter ClimbLogs to delete.
     * @example
     * // Delete a few ClimbLogs
     * const { count } = await prisma.climbLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ClimbLogDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClimbLogDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClimbLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClimbLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ClimbLogs
     * const climbLog = await prisma.climbLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ClimbLogUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ClimbLogUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ClimbLog.
     * @param {ClimbLogUpsertArgs} args - Arguments to update or create a ClimbLog.
     * @example
     * // Update or create a ClimbLog
     * const climbLog = await prisma.climbLog.upsert({
     *   create: {
     *     // ... data to create a ClimbLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ClimbLog we want to update
     *   }
     * })
    **/
    upsert<T extends ClimbLogUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ClimbLogUpsertArgs<ExtArgs>>
    ): Prisma__ClimbLogClient<$Result.GetResult<Prisma.$ClimbLogPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ClimbLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClimbLogCountArgs} args - Arguments to filter ClimbLogs to count.
     * @example
     * // Count the number of ClimbLogs
     * const count = await prisma.climbLog.count({
     *   where: {
     *     // ... the filter for the ClimbLogs we want to count
     *   }
     * })
    **/
    count<T extends ClimbLogCountArgs>(
      args?: Subset<T, ClimbLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClimbLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ClimbLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClimbLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClimbLogAggregateArgs>(args: Subset<T, ClimbLogAggregateArgs>): Prisma.PrismaPromise<GetClimbLogAggregateType<T>>

    /**
     * Group by ClimbLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClimbLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClimbLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClimbLogGroupByArgs['orderBy'] }
        : { orderBy?: ClimbLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClimbLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClimbLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ClimbLog model
   */
  readonly fields: ClimbLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ClimbLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClimbLogClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    location<T extends ClimbLog$locationArgs<ExtArgs> = {}>(args?: Subset<T, ClimbLog$locationArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    note<T extends ClimbLog$noteArgs<ExtArgs> = {}>(args?: Subset<T, ClimbLog$noteArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    WorkoutLog<T extends ClimbLog$WorkoutLogArgs<ExtArgs> = {}>(args?: Subset<T, ClimbLog$WorkoutLogArgs<ExtArgs>>): Prisma__ExerciseLogClient<$Result.GetResult<Prisma.$ExerciseLogPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ClimbLog model
   */ 
  interface ClimbLogFieldRefs {
    readonly id: FieldRef<"ClimbLog", 'String'>
    readonly name: FieldRef<"ClimbLog", 'String'>
    readonly grade: FieldRef<"ClimbLog", 'Int'>
    readonly project: FieldRef<"ClimbLog", 'Boolean'>
    readonly attempts: FieldRef<"ClimbLog", 'Int'>
    readonly flashed: FieldRef<"ClimbLog", 'Boolean'>
    readonly locationId: FieldRef<"ClimbLog", 'String'>
    readonly noteId: FieldRef<"ClimbLog", 'String'>
    readonly workoutLogId: FieldRef<"ClimbLog", 'String'>
  }
    

  // Custom InputTypes

  /**
   * ClimbLog findUnique
   */
  export type ClimbLogFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClimbLog
     */
    select?: ClimbLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClimbLogInclude<ExtArgs> | null
    /**
     * Filter, which ClimbLog to fetch.
     */
    where: ClimbLogWhereUniqueInput
  }


  /**
   * ClimbLog findUniqueOrThrow
   */
  export type ClimbLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClimbLog
     */
    select?: ClimbLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClimbLogInclude<ExtArgs> | null
    /**
     * Filter, which ClimbLog to fetch.
     */
    where: ClimbLogWhereUniqueInput
  }


  /**
   * ClimbLog findFirst
   */
  export type ClimbLogFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClimbLog
     */
    select?: ClimbLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClimbLogInclude<ExtArgs> | null
    /**
     * Filter, which ClimbLog to fetch.
     */
    where?: ClimbLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClimbLogs to fetch.
     */
    orderBy?: ClimbLogOrderByWithRelationInput | ClimbLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClimbLogs.
     */
    cursor?: ClimbLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClimbLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClimbLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClimbLogs.
     */
    distinct?: ClimbLogScalarFieldEnum | ClimbLogScalarFieldEnum[]
  }


  /**
   * ClimbLog findFirstOrThrow
   */
  export type ClimbLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClimbLog
     */
    select?: ClimbLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClimbLogInclude<ExtArgs> | null
    /**
     * Filter, which ClimbLog to fetch.
     */
    where?: ClimbLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClimbLogs to fetch.
     */
    orderBy?: ClimbLogOrderByWithRelationInput | ClimbLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClimbLogs.
     */
    cursor?: ClimbLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClimbLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClimbLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClimbLogs.
     */
    distinct?: ClimbLogScalarFieldEnum | ClimbLogScalarFieldEnum[]
  }


  /**
   * ClimbLog findMany
   */
  export type ClimbLogFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClimbLog
     */
    select?: ClimbLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClimbLogInclude<ExtArgs> | null
    /**
     * Filter, which ClimbLogs to fetch.
     */
    where?: ClimbLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClimbLogs to fetch.
     */
    orderBy?: ClimbLogOrderByWithRelationInput | ClimbLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ClimbLogs.
     */
    cursor?: ClimbLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClimbLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClimbLogs.
     */
    skip?: number
    distinct?: ClimbLogScalarFieldEnum | ClimbLogScalarFieldEnum[]
  }


  /**
   * ClimbLog create
   */
  export type ClimbLogCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClimbLog
     */
    select?: ClimbLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClimbLogInclude<ExtArgs> | null
    /**
     * The data needed to create a ClimbLog.
     */
    data: XOR<ClimbLogCreateInput, ClimbLogUncheckedCreateInput>
  }


  /**
   * ClimbLog createMany
   */
  export type ClimbLogCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ClimbLogs.
     */
    data: ClimbLogCreateManyInput | ClimbLogCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * ClimbLog update
   */
  export type ClimbLogUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClimbLog
     */
    select?: ClimbLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClimbLogInclude<ExtArgs> | null
    /**
     * The data needed to update a ClimbLog.
     */
    data: XOR<ClimbLogUpdateInput, ClimbLogUncheckedUpdateInput>
    /**
     * Choose, which ClimbLog to update.
     */
    where: ClimbLogWhereUniqueInput
  }


  /**
   * ClimbLog updateMany
   */
  export type ClimbLogUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ClimbLogs.
     */
    data: XOR<ClimbLogUpdateManyMutationInput, ClimbLogUncheckedUpdateManyInput>
    /**
     * Filter which ClimbLogs to update
     */
    where?: ClimbLogWhereInput
  }


  /**
   * ClimbLog upsert
   */
  export type ClimbLogUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClimbLog
     */
    select?: ClimbLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClimbLogInclude<ExtArgs> | null
    /**
     * The filter to search for the ClimbLog to update in case it exists.
     */
    where: ClimbLogWhereUniqueInput
    /**
     * In case the ClimbLog found by the `where` argument doesn't exist, create a new ClimbLog with this data.
     */
    create: XOR<ClimbLogCreateInput, ClimbLogUncheckedCreateInput>
    /**
     * In case the ClimbLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClimbLogUpdateInput, ClimbLogUncheckedUpdateInput>
  }


  /**
   * ClimbLog delete
   */
  export type ClimbLogDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClimbLog
     */
    select?: ClimbLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClimbLogInclude<ExtArgs> | null
    /**
     * Filter which ClimbLog to delete.
     */
    where: ClimbLogWhereUniqueInput
  }


  /**
   * ClimbLog deleteMany
   */
  export type ClimbLogDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClimbLogs to delete
     */
    where?: ClimbLogWhereInput
  }


  /**
   * ClimbLog.location
   */
  export type ClimbLog$locationArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInclude<ExtArgs> | null
    where?: LocationWhereInput
  }


  /**
   * ClimbLog.note
   */
  export type ClimbLog$noteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NoteInclude<ExtArgs> | null
    where?: NoteWhereInput
  }


  /**
   * ClimbLog.WorkoutLog
   */
  export type ClimbLog$WorkoutLogArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseLog
     */
    select?: ExerciseLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseLogInclude<ExtArgs> | null
    where?: ExerciseLogWhereInput
  }


  /**
   * ClimbLog without action
   */
  export type ClimbLogDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClimbLog
     */
    select?: ClimbLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClimbLogInclude<ExtArgs> | null
  }



  /**
   * Model Location
   */

  export type AggregateLocation = {
    _count: LocationCountAggregateOutputType | null
    _min: LocationMinAggregateOutputType | null
    _max: LocationMaxAggregateOutputType | null
  }

  export type LocationMinAggregateOutputType = {
    id: string | null
    name: string | null
    address: string | null
    noteId: string | null
  }

  export type LocationMaxAggregateOutputType = {
    id: string | null
    name: string | null
    address: string | null
    noteId: string | null
  }

  export type LocationCountAggregateOutputType = {
    id: number
    name: number
    address: number
    noteId: number
    _all: number
  }


  export type LocationMinAggregateInputType = {
    id?: true
    name?: true
    address?: true
    noteId?: true
  }

  export type LocationMaxAggregateInputType = {
    id?: true
    name?: true
    address?: true
    noteId?: true
  }

  export type LocationCountAggregateInputType = {
    id?: true
    name?: true
    address?: true
    noteId?: true
    _all?: true
  }

  export type LocationAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Location to aggregate.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Locations
    **/
    _count?: true | LocationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LocationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LocationMaxAggregateInputType
  }

  export type GetLocationAggregateType<T extends LocationAggregateArgs> = {
        [P in keyof T & keyof AggregateLocation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLocation[P]>
      : GetScalarType<T[P], AggregateLocation[P]>
  }




  export type LocationGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: LocationWhereInput
    orderBy?: LocationOrderByWithAggregationInput | LocationOrderByWithAggregationInput[]
    by: LocationScalarFieldEnum[] | LocationScalarFieldEnum
    having?: LocationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LocationCountAggregateInputType | true
    _min?: LocationMinAggregateInputType
    _max?: LocationMaxAggregateInputType
  }

  export type LocationGroupByOutputType = {
    id: string
    name: string
    address: string | null
    noteId: string | null
    _count: LocationCountAggregateOutputType | null
    _min: LocationMinAggregateOutputType | null
    _max: LocationMaxAggregateOutputType | null
  }

  type GetLocationGroupByPayload<T extends LocationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LocationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LocationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LocationGroupByOutputType[P]>
            : GetScalarType<T[P], LocationGroupByOutputType[P]>
        }
      >
    >


  export type LocationSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    noteId?: boolean
    note?: boolean | Location$noteArgs<ExtArgs>
    climbs?: boolean | Location$climbsArgs<ExtArgs>
    _count?: boolean | LocationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["location"]>

  export type LocationSelectScalar = {
    id?: boolean
    name?: boolean
    address?: boolean
    noteId?: boolean
  }

  export type LocationInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    note?: boolean | Location$noteArgs<ExtArgs>
    climbs?: boolean | Location$climbsArgs<ExtArgs>
    _count?: boolean | LocationCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $LocationPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Location"
    objects: {
      note: Prisma.$NotePayload<ExtArgs> | null
      climbs: Prisma.$ClimbLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: string
      name: string
      address: string | null
      noteId: string | null
    }, ExtArgs["result"]["location"]>
    composites: {}
  }


  type LocationGetPayload<S extends boolean | null | undefined | LocationDefaultArgs> = $Result.GetResult<Prisma.$LocationPayload, S>

  type LocationCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<LocationFindManyArgs, 'select' | 'include'> & {
      select?: LocationCountAggregateInputType | true
    }

  export interface LocationDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Location'], meta: { name: 'Location' } }
    /**
     * Find zero or one Location that matches the filter.
     * @param {LocationFindUniqueArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LocationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, LocationFindUniqueArgs<ExtArgs>>
    ): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Location that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LocationFindUniqueOrThrowArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LocationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LocationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Location that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindFirstArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LocationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, LocationFindFirstArgs<ExtArgs>>
    ): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Location that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindFirstOrThrowArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LocationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LocationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Locations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Locations
     * const locations = await prisma.location.findMany()
     * 
     * // Get first 10 Locations
     * const locations = await prisma.location.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const locationWithIdOnly = await prisma.location.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LocationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LocationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Location.
     * @param {LocationCreateArgs} args - Arguments to create a Location.
     * @example
     * // Create one Location
     * const Location = await prisma.location.create({
     *   data: {
     *     // ... data to create a Location
     *   }
     * })
     * 
    **/
    create<T extends LocationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, LocationCreateArgs<ExtArgs>>
    ): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Locations.
     *     @param {LocationCreateManyArgs} args - Arguments to create many Locations.
     *     @example
     *     // Create many Locations
     *     const location = await prisma.location.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LocationCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LocationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Location.
     * @param {LocationDeleteArgs} args - Arguments to delete one Location.
     * @example
     * // Delete one Location
     * const Location = await prisma.location.delete({
     *   where: {
     *     // ... filter to delete one Location
     *   }
     * })
     * 
    **/
    delete<T extends LocationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, LocationDeleteArgs<ExtArgs>>
    ): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Location.
     * @param {LocationUpdateArgs} args - Arguments to update one Location.
     * @example
     * // Update one Location
     * const location = await prisma.location.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LocationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, LocationUpdateArgs<ExtArgs>>
    ): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Locations.
     * @param {LocationDeleteManyArgs} args - Arguments to filter Locations to delete.
     * @example
     * // Delete a few Locations
     * const { count } = await prisma.location.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LocationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LocationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Locations
     * const location = await prisma.location.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LocationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, LocationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Location.
     * @param {LocationUpsertArgs} args - Arguments to update or create a Location.
     * @example
     * // Update or create a Location
     * const location = await prisma.location.upsert({
     *   create: {
     *     // ... data to create a Location
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Location we want to update
     *   }
     * })
    **/
    upsert<T extends LocationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, LocationUpsertArgs<ExtArgs>>
    ): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationCountArgs} args - Arguments to filter Locations to count.
     * @example
     * // Count the number of Locations
     * const count = await prisma.location.count({
     *   where: {
     *     // ... the filter for the Locations we want to count
     *   }
     * })
    **/
    count<T extends LocationCountArgs>(
      args?: Subset<T, LocationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LocationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Location.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LocationAggregateArgs>(args: Subset<T, LocationAggregateArgs>): Prisma.PrismaPromise<GetLocationAggregateType<T>>

    /**
     * Group by Location.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LocationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LocationGroupByArgs['orderBy'] }
        : { orderBy?: LocationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LocationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLocationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Location model
   */
  readonly fields: LocationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Location.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LocationClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    note<T extends Location$noteArgs<ExtArgs> = {}>(args?: Subset<T, Location$noteArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    climbs<T extends Location$climbsArgs<ExtArgs> = {}>(args?: Subset<T, Location$climbsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClimbLogPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Location model
   */ 
  interface LocationFieldRefs {
    readonly id: FieldRef<"Location", 'String'>
    readonly name: FieldRef<"Location", 'String'>
    readonly address: FieldRef<"Location", 'String'>
    readonly noteId: FieldRef<"Location", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Location findUnique
   */
  export type LocationFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where: LocationWhereUniqueInput
  }


  /**
   * Location findUniqueOrThrow
   */
  export type LocationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where: LocationWhereUniqueInput
  }


  /**
   * Location findFirst
   */
  export type LocationFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Locations.
     */
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }


  /**
   * Location findFirstOrThrow
   */
  export type LocationFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Locations.
     */
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }


  /**
   * Location findMany
   */
  export type LocationFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Locations to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }


  /**
   * Location create
   */
  export type LocationCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The data needed to create a Location.
     */
    data: XOR<LocationCreateInput, LocationUncheckedCreateInput>
  }


  /**
   * Location createMany
   */
  export type LocationCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Locations.
     */
    data: LocationCreateManyInput | LocationCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Location update
   */
  export type LocationUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The data needed to update a Location.
     */
    data: XOR<LocationUpdateInput, LocationUncheckedUpdateInput>
    /**
     * Choose, which Location to update.
     */
    where: LocationWhereUniqueInput
  }


  /**
   * Location updateMany
   */
  export type LocationUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Locations.
     */
    data: XOR<LocationUpdateManyMutationInput, LocationUncheckedUpdateManyInput>
    /**
     * Filter which Locations to update
     */
    where?: LocationWhereInput
  }


  /**
   * Location upsert
   */
  export type LocationUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The filter to search for the Location to update in case it exists.
     */
    where: LocationWhereUniqueInput
    /**
     * In case the Location found by the `where` argument doesn't exist, create a new Location with this data.
     */
    create: XOR<LocationCreateInput, LocationUncheckedCreateInput>
    /**
     * In case the Location was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LocationUpdateInput, LocationUncheckedUpdateInput>
  }


  /**
   * Location delete
   */
  export type LocationDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter which Location to delete.
     */
    where: LocationWhereUniqueInput
  }


  /**
   * Location deleteMany
   */
  export type LocationDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Locations to delete
     */
    where?: LocationWhereInput
  }


  /**
   * Location.note
   */
  export type Location$noteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NoteInclude<ExtArgs> | null
    where?: NoteWhereInput
  }


  /**
   * Location.climbs
   */
  export type Location$climbsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClimbLog
     */
    select?: ClimbLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClimbLogInclude<ExtArgs> | null
    where?: ClimbLogWhereInput
    orderBy?: ClimbLogOrderByWithRelationInput | ClimbLogOrderByWithRelationInput[]
    cursor?: ClimbLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClimbLogScalarFieldEnum | ClimbLogScalarFieldEnum[]
  }


  /**
   * Location without action
   */
  export type LocationDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInclude<ExtArgs> | null
  }



  /**
   * Model RecoveryLevel
   */

  export type AggregateRecoveryLevel = {
    _count: RecoveryLevelCountAggregateOutputType | null
    _min: RecoveryLevelMinAggregateOutputType | null
    _max: RecoveryLevelMaxAggregateOutputType | null
  }

  export type RecoveryLevelMinAggregateOutputType = {
    id: string | null
    level: string | null
  }

  export type RecoveryLevelMaxAggregateOutputType = {
    id: string | null
    level: string | null
  }

  export type RecoveryLevelCountAggregateOutputType = {
    id: number
    level: number
    _all: number
  }


  export type RecoveryLevelMinAggregateInputType = {
    id?: true
    level?: true
  }

  export type RecoveryLevelMaxAggregateInputType = {
    id?: true
    level?: true
  }

  export type RecoveryLevelCountAggregateInputType = {
    id?: true
    level?: true
    _all?: true
  }

  export type RecoveryLevelAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which RecoveryLevel to aggregate.
     */
    where?: RecoveryLevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecoveryLevels to fetch.
     */
    orderBy?: RecoveryLevelOrderByWithRelationInput | RecoveryLevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RecoveryLevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecoveryLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecoveryLevels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RecoveryLevels
    **/
    _count?: true | RecoveryLevelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecoveryLevelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecoveryLevelMaxAggregateInputType
  }

  export type GetRecoveryLevelAggregateType<T extends RecoveryLevelAggregateArgs> = {
        [P in keyof T & keyof AggregateRecoveryLevel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecoveryLevel[P]>
      : GetScalarType<T[P], AggregateRecoveryLevel[P]>
  }




  export type RecoveryLevelGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: RecoveryLevelWhereInput
    orderBy?: RecoveryLevelOrderByWithAggregationInput | RecoveryLevelOrderByWithAggregationInput[]
    by: RecoveryLevelScalarFieldEnum[] | RecoveryLevelScalarFieldEnum
    having?: RecoveryLevelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecoveryLevelCountAggregateInputType | true
    _min?: RecoveryLevelMinAggregateInputType
    _max?: RecoveryLevelMaxAggregateInputType
  }

  export type RecoveryLevelGroupByOutputType = {
    id: string
    level: string
    _count: RecoveryLevelCountAggregateOutputType | null
    _min: RecoveryLevelMinAggregateOutputType | null
    _max: RecoveryLevelMaxAggregateOutputType | null
  }

  type GetRecoveryLevelGroupByPayload<T extends RecoveryLevelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RecoveryLevelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecoveryLevelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecoveryLevelGroupByOutputType[P]>
            : GetScalarType<T[P], RecoveryLevelGroupByOutputType[P]>
        }
      >
    >


  export type RecoveryLevelSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    level?: boolean
    trainingDays?: boolean | RecoveryLevel$trainingDaysArgs<ExtArgs>
    _count?: boolean | RecoveryLevelCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recoveryLevel"]>

  export type RecoveryLevelSelectScalar = {
    id?: boolean
    level?: boolean
  }

  export type RecoveryLevelInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    trainingDays?: boolean | RecoveryLevel$trainingDaysArgs<ExtArgs>
    _count?: boolean | RecoveryLevelCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $RecoveryLevelPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "RecoveryLevel"
    objects: {
      trainingDays: Prisma.$TrainingDayPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: string
      level: string
    }, ExtArgs["result"]["recoveryLevel"]>
    composites: {}
  }


  type RecoveryLevelGetPayload<S extends boolean | null | undefined | RecoveryLevelDefaultArgs> = $Result.GetResult<Prisma.$RecoveryLevelPayload, S>

  type RecoveryLevelCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<RecoveryLevelFindManyArgs, 'select' | 'include'> & {
      select?: RecoveryLevelCountAggregateInputType | true
    }

  export interface RecoveryLevelDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RecoveryLevel'], meta: { name: 'RecoveryLevel' } }
    /**
     * Find zero or one RecoveryLevel that matches the filter.
     * @param {RecoveryLevelFindUniqueArgs} args - Arguments to find a RecoveryLevel
     * @example
     * // Get one RecoveryLevel
     * const recoveryLevel = await prisma.recoveryLevel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RecoveryLevelFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RecoveryLevelFindUniqueArgs<ExtArgs>>
    ): Prisma__RecoveryLevelClient<$Result.GetResult<Prisma.$RecoveryLevelPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one RecoveryLevel that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RecoveryLevelFindUniqueOrThrowArgs} args - Arguments to find a RecoveryLevel
     * @example
     * // Get one RecoveryLevel
     * const recoveryLevel = await prisma.recoveryLevel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RecoveryLevelFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RecoveryLevelFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RecoveryLevelClient<$Result.GetResult<Prisma.$RecoveryLevelPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first RecoveryLevel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecoveryLevelFindFirstArgs} args - Arguments to find a RecoveryLevel
     * @example
     * // Get one RecoveryLevel
     * const recoveryLevel = await prisma.recoveryLevel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RecoveryLevelFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RecoveryLevelFindFirstArgs<ExtArgs>>
    ): Prisma__RecoveryLevelClient<$Result.GetResult<Prisma.$RecoveryLevelPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first RecoveryLevel that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecoveryLevelFindFirstOrThrowArgs} args - Arguments to find a RecoveryLevel
     * @example
     * // Get one RecoveryLevel
     * const recoveryLevel = await prisma.recoveryLevel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RecoveryLevelFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RecoveryLevelFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RecoveryLevelClient<$Result.GetResult<Prisma.$RecoveryLevelPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more RecoveryLevels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecoveryLevelFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RecoveryLevels
     * const recoveryLevels = await prisma.recoveryLevel.findMany()
     * 
     * // Get first 10 RecoveryLevels
     * const recoveryLevels = await prisma.recoveryLevel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const recoveryLevelWithIdOnly = await prisma.recoveryLevel.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RecoveryLevelFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RecoveryLevelFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecoveryLevelPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a RecoveryLevel.
     * @param {RecoveryLevelCreateArgs} args - Arguments to create a RecoveryLevel.
     * @example
     * // Create one RecoveryLevel
     * const RecoveryLevel = await prisma.recoveryLevel.create({
     *   data: {
     *     // ... data to create a RecoveryLevel
     *   }
     * })
     * 
    **/
    create<T extends RecoveryLevelCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RecoveryLevelCreateArgs<ExtArgs>>
    ): Prisma__RecoveryLevelClient<$Result.GetResult<Prisma.$RecoveryLevelPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many RecoveryLevels.
     *     @param {RecoveryLevelCreateManyArgs} args - Arguments to create many RecoveryLevels.
     *     @example
     *     // Create many RecoveryLevels
     *     const recoveryLevel = await prisma.recoveryLevel.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RecoveryLevelCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RecoveryLevelCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a RecoveryLevel.
     * @param {RecoveryLevelDeleteArgs} args - Arguments to delete one RecoveryLevel.
     * @example
     * // Delete one RecoveryLevel
     * const RecoveryLevel = await prisma.recoveryLevel.delete({
     *   where: {
     *     // ... filter to delete one RecoveryLevel
     *   }
     * })
     * 
    **/
    delete<T extends RecoveryLevelDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RecoveryLevelDeleteArgs<ExtArgs>>
    ): Prisma__RecoveryLevelClient<$Result.GetResult<Prisma.$RecoveryLevelPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one RecoveryLevel.
     * @param {RecoveryLevelUpdateArgs} args - Arguments to update one RecoveryLevel.
     * @example
     * // Update one RecoveryLevel
     * const recoveryLevel = await prisma.recoveryLevel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RecoveryLevelUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RecoveryLevelUpdateArgs<ExtArgs>>
    ): Prisma__RecoveryLevelClient<$Result.GetResult<Prisma.$RecoveryLevelPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more RecoveryLevels.
     * @param {RecoveryLevelDeleteManyArgs} args - Arguments to filter RecoveryLevels to delete.
     * @example
     * // Delete a few RecoveryLevels
     * const { count } = await prisma.recoveryLevel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RecoveryLevelDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RecoveryLevelDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RecoveryLevels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecoveryLevelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RecoveryLevels
     * const recoveryLevel = await prisma.recoveryLevel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RecoveryLevelUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RecoveryLevelUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RecoveryLevel.
     * @param {RecoveryLevelUpsertArgs} args - Arguments to update or create a RecoveryLevel.
     * @example
     * // Update or create a RecoveryLevel
     * const recoveryLevel = await prisma.recoveryLevel.upsert({
     *   create: {
     *     // ... data to create a RecoveryLevel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RecoveryLevel we want to update
     *   }
     * })
    **/
    upsert<T extends RecoveryLevelUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RecoveryLevelUpsertArgs<ExtArgs>>
    ): Prisma__RecoveryLevelClient<$Result.GetResult<Prisma.$RecoveryLevelPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of RecoveryLevels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecoveryLevelCountArgs} args - Arguments to filter RecoveryLevels to count.
     * @example
     * // Count the number of RecoveryLevels
     * const count = await prisma.recoveryLevel.count({
     *   where: {
     *     // ... the filter for the RecoveryLevels we want to count
     *   }
     * })
    **/
    count<T extends RecoveryLevelCountArgs>(
      args?: Subset<T, RecoveryLevelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecoveryLevelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RecoveryLevel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecoveryLevelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecoveryLevelAggregateArgs>(args: Subset<T, RecoveryLevelAggregateArgs>): Prisma.PrismaPromise<GetRecoveryLevelAggregateType<T>>

    /**
     * Group by RecoveryLevel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecoveryLevelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RecoveryLevelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RecoveryLevelGroupByArgs['orderBy'] }
        : { orderBy?: RecoveryLevelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RecoveryLevelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecoveryLevelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RecoveryLevel model
   */
  readonly fields: RecoveryLevelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RecoveryLevel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RecoveryLevelClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    trainingDays<T extends RecoveryLevel$trainingDaysArgs<ExtArgs> = {}>(args?: Subset<T, RecoveryLevel$trainingDaysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrainingDayPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the RecoveryLevel model
   */ 
  interface RecoveryLevelFieldRefs {
    readonly id: FieldRef<"RecoveryLevel", 'String'>
    readonly level: FieldRef<"RecoveryLevel", 'String'>
  }
    

  // Custom InputTypes

  /**
   * RecoveryLevel findUnique
   */
  export type RecoveryLevelFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecoveryLevel
     */
    select?: RecoveryLevelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecoveryLevelInclude<ExtArgs> | null
    /**
     * Filter, which RecoveryLevel to fetch.
     */
    where: RecoveryLevelWhereUniqueInput
  }


  /**
   * RecoveryLevel findUniqueOrThrow
   */
  export type RecoveryLevelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecoveryLevel
     */
    select?: RecoveryLevelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecoveryLevelInclude<ExtArgs> | null
    /**
     * Filter, which RecoveryLevel to fetch.
     */
    where: RecoveryLevelWhereUniqueInput
  }


  /**
   * RecoveryLevel findFirst
   */
  export type RecoveryLevelFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecoveryLevel
     */
    select?: RecoveryLevelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecoveryLevelInclude<ExtArgs> | null
    /**
     * Filter, which RecoveryLevel to fetch.
     */
    where?: RecoveryLevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecoveryLevels to fetch.
     */
    orderBy?: RecoveryLevelOrderByWithRelationInput | RecoveryLevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RecoveryLevels.
     */
    cursor?: RecoveryLevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecoveryLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecoveryLevels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RecoveryLevels.
     */
    distinct?: RecoveryLevelScalarFieldEnum | RecoveryLevelScalarFieldEnum[]
  }


  /**
   * RecoveryLevel findFirstOrThrow
   */
  export type RecoveryLevelFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecoveryLevel
     */
    select?: RecoveryLevelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecoveryLevelInclude<ExtArgs> | null
    /**
     * Filter, which RecoveryLevel to fetch.
     */
    where?: RecoveryLevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecoveryLevels to fetch.
     */
    orderBy?: RecoveryLevelOrderByWithRelationInput | RecoveryLevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RecoveryLevels.
     */
    cursor?: RecoveryLevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecoveryLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecoveryLevels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RecoveryLevels.
     */
    distinct?: RecoveryLevelScalarFieldEnum | RecoveryLevelScalarFieldEnum[]
  }


  /**
   * RecoveryLevel findMany
   */
  export type RecoveryLevelFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecoveryLevel
     */
    select?: RecoveryLevelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecoveryLevelInclude<ExtArgs> | null
    /**
     * Filter, which RecoveryLevels to fetch.
     */
    where?: RecoveryLevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecoveryLevels to fetch.
     */
    orderBy?: RecoveryLevelOrderByWithRelationInput | RecoveryLevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RecoveryLevels.
     */
    cursor?: RecoveryLevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecoveryLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecoveryLevels.
     */
    skip?: number
    distinct?: RecoveryLevelScalarFieldEnum | RecoveryLevelScalarFieldEnum[]
  }


  /**
   * RecoveryLevel create
   */
  export type RecoveryLevelCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecoveryLevel
     */
    select?: RecoveryLevelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecoveryLevelInclude<ExtArgs> | null
    /**
     * The data needed to create a RecoveryLevel.
     */
    data: XOR<RecoveryLevelCreateInput, RecoveryLevelUncheckedCreateInput>
  }


  /**
   * RecoveryLevel createMany
   */
  export type RecoveryLevelCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RecoveryLevels.
     */
    data: RecoveryLevelCreateManyInput | RecoveryLevelCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * RecoveryLevel update
   */
  export type RecoveryLevelUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecoveryLevel
     */
    select?: RecoveryLevelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecoveryLevelInclude<ExtArgs> | null
    /**
     * The data needed to update a RecoveryLevel.
     */
    data: XOR<RecoveryLevelUpdateInput, RecoveryLevelUncheckedUpdateInput>
    /**
     * Choose, which RecoveryLevel to update.
     */
    where: RecoveryLevelWhereUniqueInput
  }


  /**
   * RecoveryLevel updateMany
   */
  export type RecoveryLevelUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RecoveryLevels.
     */
    data: XOR<RecoveryLevelUpdateManyMutationInput, RecoveryLevelUncheckedUpdateManyInput>
    /**
     * Filter which RecoveryLevels to update
     */
    where?: RecoveryLevelWhereInput
  }


  /**
   * RecoveryLevel upsert
   */
  export type RecoveryLevelUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecoveryLevel
     */
    select?: RecoveryLevelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecoveryLevelInclude<ExtArgs> | null
    /**
     * The filter to search for the RecoveryLevel to update in case it exists.
     */
    where: RecoveryLevelWhereUniqueInput
    /**
     * In case the RecoveryLevel found by the `where` argument doesn't exist, create a new RecoveryLevel with this data.
     */
    create: XOR<RecoveryLevelCreateInput, RecoveryLevelUncheckedCreateInput>
    /**
     * In case the RecoveryLevel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RecoveryLevelUpdateInput, RecoveryLevelUncheckedUpdateInput>
  }


  /**
   * RecoveryLevel delete
   */
  export type RecoveryLevelDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecoveryLevel
     */
    select?: RecoveryLevelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecoveryLevelInclude<ExtArgs> | null
    /**
     * Filter which RecoveryLevel to delete.
     */
    where: RecoveryLevelWhereUniqueInput
  }


  /**
   * RecoveryLevel deleteMany
   */
  export type RecoveryLevelDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which RecoveryLevels to delete
     */
    where?: RecoveryLevelWhereInput
  }


  /**
   * RecoveryLevel.trainingDays
   */
  export type RecoveryLevel$trainingDaysArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingDay
     */
    select?: TrainingDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainingDayInclude<ExtArgs> | null
    where?: TrainingDayWhereInput
    orderBy?: TrainingDayOrderByWithRelationInput | TrainingDayOrderByWithRelationInput[]
    cursor?: TrainingDayWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TrainingDayScalarFieldEnum | TrainingDayScalarFieldEnum[]
  }


  /**
   * RecoveryLevel without action
   */
  export type RecoveryLevelDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecoveryLevel
     */
    select?: RecoveryLevelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecoveryLevelInclude<ExtArgs> | null
  }



  /**
   * Model Note
   */

  export type AggregateNote = {
    _count: NoteCountAggregateOutputType | null
    _min: NoteMinAggregateOutputType | null
    _max: NoteMaxAggregateOutputType | null
  }

  export type NoteMinAggregateOutputType = {
    id: string | null
    text: string | null
  }

  export type NoteMaxAggregateOutputType = {
    id: string | null
    text: string | null
  }

  export type NoteCountAggregateOutputType = {
    id: number
    text: number
    _all: number
  }


  export type NoteMinAggregateInputType = {
    id?: true
    text?: true
  }

  export type NoteMaxAggregateInputType = {
    id?: true
    text?: true
  }

  export type NoteCountAggregateInputType = {
    id?: true
    text?: true
    _all?: true
  }

  export type NoteAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Note to aggregate.
     */
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     */
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notes
    **/
    _count?: true | NoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NoteMaxAggregateInputType
  }

  export type GetNoteAggregateType<T extends NoteAggregateArgs> = {
        [P in keyof T & keyof AggregateNote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNote[P]>
      : GetScalarType<T[P], AggregateNote[P]>
  }




  export type NoteGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: NoteWhereInput
    orderBy?: NoteOrderByWithAggregationInput | NoteOrderByWithAggregationInput[]
    by: NoteScalarFieldEnum[] | NoteScalarFieldEnum
    having?: NoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NoteCountAggregateInputType | true
    _min?: NoteMinAggregateInputType
    _max?: NoteMaxAggregateInputType
  }

  export type NoteGroupByOutputType = {
    id: string
    text: string
    _count: NoteCountAggregateOutputType | null
    _min: NoteMinAggregateOutputType | null
    _max: NoteMaxAggregateOutputType | null
  }

  type GetNoteGroupByPayload<T extends NoteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NoteGroupByOutputType[P]>
            : GetScalarType<T[P], NoteGroupByOutputType[P]>
        }
      >
    >


  export type NoteSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    text?: boolean
    trainingDays?: boolean | Note$trainingDaysArgs<ExtArgs>
    exercises?: boolean | Note$exercisesArgs<ExtArgs>
    climbs?: boolean | Note$climbsArgs<ExtArgs>
    locations?: boolean | Note$locationsArgs<ExtArgs>
    routines?: boolean | Note$routinesArgs<ExtArgs>
    WorkoutLog?: boolean | Note$WorkoutLogArgs<ExtArgs>
    _count?: boolean | NoteCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["note"]>

  export type NoteSelectScalar = {
    id?: boolean
    text?: boolean
  }

  export type NoteInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    trainingDays?: boolean | Note$trainingDaysArgs<ExtArgs>
    exercises?: boolean | Note$exercisesArgs<ExtArgs>
    climbs?: boolean | Note$climbsArgs<ExtArgs>
    locations?: boolean | Note$locationsArgs<ExtArgs>
    routines?: boolean | Note$routinesArgs<ExtArgs>
    WorkoutLog?: boolean | Note$WorkoutLogArgs<ExtArgs>
    _count?: boolean | NoteCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $NotePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Note"
    objects: {
      trainingDays: Prisma.$TrainingDayPayload<ExtArgs>[]
      exercises: Prisma.$ExercisePayload<ExtArgs>[]
      climbs: Prisma.$ClimbLogPayload<ExtArgs>[]
      locations: Prisma.$LocationPayload<ExtArgs>[]
      routines: Prisma.$RoutinePayload<ExtArgs>[]
      WorkoutLog: Prisma.$ExerciseLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: string
      text: string
    }, ExtArgs["result"]["note"]>
    composites: {}
  }


  type NoteGetPayload<S extends boolean | null | undefined | NoteDefaultArgs> = $Result.GetResult<Prisma.$NotePayload, S>

  type NoteCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<NoteFindManyArgs, 'select' | 'include'> & {
      select?: NoteCountAggregateInputType | true
    }

  export interface NoteDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Note'], meta: { name: 'Note' } }
    /**
     * Find zero or one Note that matches the filter.
     * @param {NoteFindUniqueArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NoteFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, NoteFindUniqueArgs<ExtArgs>>
    ): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Note that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {NoteFindUniqueOrThrowArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends NoteFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NoteFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Note that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteFindFirstArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NoteFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, NoteFindFirstArgs<ExtArgs>>
    ): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Note that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteFindFirstOrThrowArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends NoteFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NoteFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Notes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notes
     * const notes = await prisma.note.findMany()
     * 
     * // Get first 10 Notes
     * const notes = await prisma.note.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const noteWithIdOnly = await prisma.note.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends NoteFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NoteFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Note.
     * @param {NoteCreateArgs} args - Arguments to create a Note.
     * @example
     * // Create one Note
     * const Note = await prisma.note.create({
     *   data: {
     *     // ... data to create a Note
     *   }
     * })
     * 
    **/
    create<T extends NoteCreateArgs<ExtArgs>>(
      args: SelectSubset<T, NoteCreateArgs<ExtArgs>>
    ): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Notes.
     *     @param {NoteCreateManyArgs} args - Arguments to create many Notes.
     *     @example
     *     // Create many Notes
     *     const note = await prisma.note.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NoteCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NoteCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Note.
     * @param {NoteDeleteArgs} args - Arguments to delete one Note.
     * @example
     * // Delete one Note
     * const Note = await prisma.note.delete({
     *   where: {
     *     // ... filter to delete one Note
     *   }
     * })
     * 
    **/
    delete<T extends NoteDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, NoteDeleteArgs<ExtArgs>>
    ): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Note.
     * @param {NoteUpdateArgs} args - Arguments to update one Note.
     * @example
     * // Update one Note
     * const note = await prisma.note.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NoteUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, NoteUpdateArgs<ExtArgs>>
    ): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Notes.
     * @param {NoteDeleteManyArgs} args - Arguments to filter Notes to delete.
     * @example
     * // Delete a few Notes
     * const { count } = await prisma.note.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NoteDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NoteDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notes
     * const note = await prisma.note.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NoteUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, NoteUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Note.
     * @param {NoteUpsertArgs} args - Arguments to update or create a Note.
     * @example
     * // Update or create a Note
     * const note = await prisma.note.upsert({
     *   create: {
     *     // ... data to create a Note
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Note we want to update
     *   }
     * })
    **/
    upsert<T extends NoteUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, NoteUpsertArgs<ExtArgs>>
    ): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Notes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteCountArgs} args - Arguments to filter Notes to count.
     * @example
     * // Count the number of Notes
     * const count = await prisma.note.count({
     *   where: {
     *     // ... the filter for the Notes we want to count
     *   }
     * })
    **/
    count<T extends NoteCountArgs>(
      args?: Subset<T, NoteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Note.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NoteAggregateArgs>(args: Subset<T, NoteAggregateArgs>): Prisma.PrismaPromise<GetNoteAggregateType<T>>

    /**
     * Group by Note.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NoteGroupByArgs['orderBy'] }
        : { orderBy?: NoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNoteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Note model
   */
  readonly fields: NoteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Note.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NoteClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    trainingDays<T extends Note$trainingDaysArgs<ExtArgs> = {}>(args?: Subset<T, Note$trainingDaysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrainingDayPayload<ExtArgs>, T, 'findMany'> | Null>;

    exercises<T extends Note$exercisesArgs<ExtArgs> = {}>(args?: Subset<T, Note$exercisesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExercisePayload<ExtArgs>, T, 'findMany'> | Null>;

    climbs<T extends Note$climbsArgs<ExtArgs> = {}>(args?: Subset<T, Note$climbsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClimbLogPayload<ExtArgs>, T, 'findMany'> | Null>;

    locations<T extends Note$locationsArgs<ExtArgs> = {}>(args?: Subset<T, Note$locationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, 'findMany'> | Null>;

    routines<T extends Note$routinesArgs<ExtArgs> = {}>(args?: Subset<T, Note$routinesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoutinePayload<ExtArgs>, T, 'findMany'> | Null>;

    WorkoutLog<T extends Note$WorkoutLogArgs<ExtArgs> = {}>(args?: Subset<T, Note$WorkoutLogArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExerciseLogPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Note model
   */ 
  interface NoteFieldRefs {
    readonly id: FieldRef<"Note", 'String'>
    readonly text: FieldRef<"Note", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Note findUnique
   */
  export type NoteFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Note to fetch.
     */
    where: NoteWhereUniqueInput
  }


  /**
   * Note findUniqueOrThrow
   */
  export type NoteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Note to fetch.
     */
    where: NoteWhereUniqueInput
  }


  /**
   * Note findFirst
   */
  export type NoteFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Note to fetch.
     */
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     */
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notes.
     */
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notes.
     */
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }


  /**
   * Note findFirstOrThrow
   */
  export type NoteFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Note to fetch.
     */
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     */
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notes.
     */
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notes.
     */
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }


  /**
   * Note findMany
   */
  export type NoteFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Notes to fetch.
     */
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     */
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notes.
     */
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     */
    skip?: number
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }


  /**
   * Note create
   */
  export type NoteCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * The data needed to create a Note.
     */
    data: XOR<NoteCreateInput, NoteUncheckedCreateInput>
  }


  /**
   * Note createMany
   */
  export type NoteCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notes.
     */
    data: NoteCreateManyInput | NoteCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Note update
   */
  export type NoteUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * The data needed to update a Note.
     */
    data: XOR<NoteUpdateInput, NoteUncheckedUpdateInput>
    /**
     * Choose, which Note to update.
     */
    where: NoteWhereUniqueInput
  }


  /**
   * Note updateMany
   */
  export type NoteUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notes.
     */
    data: XOR<NoteUpdateManyMutationInput, NoteUncheckedUpdateManyInput>
    /**
     * Filter which Notes to update
     */
    where?: NoteWhereInput
  }


  /**
   * Note upsert
   */
  export type NoteUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * The filter to search for the Note to update in case it exists.
     */
    where: NoteWhereUniqueInput
    /**
     * In case the Note found by the `where` argument doesn't exist, create a new Note with this data.
     */
    create: XOR<NoteCreateInput, NoteUncheckedCreateInput>
    /**
     * In case the Note was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NoteUpdateInput, NoteUncheckedUpdateInput>
  }


  /**
   * Note delete
   */
  export type NoteDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter which Note to delete.
     */
    where: NoteWhereUniqueInput
  }


  /**
   * Note deleteMany
   */
  export type NoteDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notes to delete
     */
    where?: NoteWhereInput
  }


  /**
   * Note.trainingDays
   */
  export type Note$trainingDaysArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrainingDay
     */
    select?: TrainingDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainingDayInclude<ExtArgs> | null
    where?: TrainingDayWhereInput
    orderBy?: TrainingDayOrderByWithRelationInput | TrainingDayOrderByWithRelationInput[]
    cursor?: TrainingDayWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TrainingDayScalarFieldEnum | TrainingDayScalarFieldEnum[]
  }


  /**
   * Note.exercises
   */
  export type Note$exercisesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercise
     */
    select?: ExerciseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseInclude<ExtArgs> | null
    where?: ExerciseWhereInput
    orderBy?: ExerciseOrderByWithRelationInput | ExerciseOrderByWithRelationInput[]
    cursor?: ExerciseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }


  /**
   * Note.climbs
   */
  export type Note$climbsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClimbLog
     */
    select?: ClimbLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClimbLogInclude<ExtArgs> | null
    where?: ClimbLogWhereInput
    orderBy?: ClimbLogOrderByWithRelationInput | ClimbLogOrderByWithRelationInput[]
    cursor?: ClimbLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClimbLogScalarFieldEnum | ClimbLogScalarFieldEnum[]
  }


  /**
   * Note.locations
   */
  export type Note$locationsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocationInclude<ExtArgs> | null
    where?: LocationWhereInput
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    cursor?: LocationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }


  /**
   * Note.routines
   */
  export type Note$routinesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Routine
     */
    select?: RoutineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoutineInclude<ExtArgs> | null
    where?: RoutineWhereInput
    orderBy?: RoutineOrderByWithRelationInput | RoutineOrderByWithRelationInput[]
    cursor?: RoutineWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoutineScalarFieldEnum | RoutineScalarFieldEnum[]
  }


  /**
   * Note.WorkoutLog
   */
  export type Note$WorkoutLogArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseLog
     */
    select?: ExerciseLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseLogInclude<ExtArgs> | null
    where?: ExerciseLogWhereInput
    orderBy?: ExerciseLogOrderByWithRelationInput | ExerciseLogOrderByWithRelationInput[]
    cursor?: ExerciseLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExerciseLogScalarFieldEnum | ExerciseLogScalarFieldEnum[]
  }


  /**
   * Note without action
   */
  export type NoteDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NoteInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AccountScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    provider: 'provider',
    providerAccountId: 'providerAccountId',
    refresh_token: 'refresh_token',
    access_token: 'access_token',
    expires_at: 'expires_at',
    token_type: 'token_type',
    scope: 'scope',
    id_token: 'id_token',
    session_state: 'session_state'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    sessionToken: 'sessionToken',
    userId: 'userId',
    expires: 'expires'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    emailVerified: 'emailVerified',
    image: 'image'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const VerificationTokenScalarFieldEnum: {
    identifier: 'identifier',
    token: 'token',
    expires: 'expires'
  };

  export type VerificationTokenScalarFieldEnum = (typeof VerificationTokenScalarFieldEnum)[keyof typeof VerificationTokenScalarFieldEnum]


  export const MesocycleScalarFieldEnum: {
    id: 'id',
    goal: 'goal',
    description: 'description',
    startDate: 'startDate',
    endDate: 'endDate',
    numMicros: 'numMicros',
    userId: 'userId',
    isActive: 'isActive'
  };

  export type MesocycleScalarFieldEnum = (typeof MesocycleScalarFieldEnum)[keyof typeof MesocycleScalarFieldEnum]


  export const MicrocycleScalarFieldEnum: {
    id: 'id',
    goal: 'goal',
    startDate: 'startDate',
    endDate: 'endDate',
    schema: 'schema',
    description: 'description',
    mesoId: 'mesoId'
  };

  export type MicrocycleScalarFieldEnum = (typeof MicrocycleScalarFieldEnum)[keyof typeof MicrocycleScalarFieldEnum]


  export const TrainingDayScalarFieldEnum: {
    id: 'id',
    date: 'date',
    sortOrder: 'sortOrder',
    microcycleId: 'microcycleId',
    recoveryLevelId: 'recoveryLevelId',
    noteId: 'noteId'
  };

  export type TrainingDayScalarFieldEnum = (typeof TrainingDayScalarFieldEnum)[keyof typeof TrainingDayScalarFieldEnum]


  export const RoutineScalarFieldEnum: {
    id: 'id',
    name: 'name',
    duration: 'duration',
    type: 'type',
    sortOrder: 'sortOrder',
    routineSubtypeId: 'routineSubtypeId',
    noteId: 'noteId'
  };

  export type RoutineScalarFieldEnum = (typeof RoutineScalarFieldEnum)[keyof typeof RoutineScalarFieldEnum]


  export const RoutineSubtypeScalarFieldEnum: {
    id: 'id',
    type: 'type'
  };

  export type RoutineSubtypeScalarFieldEnum = (typeof RoutineSubtypeScalarFieldEnum)[keyof typeof RoutineSubtypeScalarFieldEnum]


  export const ExerciseScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    equipment: 'equipment',
    imageId: 'imageId',
    noteId: 'noteId'
  };

  export type ExerciseScalarFieldEnum = (typeof ExerciseScalarFieldEnum)[keyof typeof ExerciseScalarFieldEnum]


  export const ExerciseLogScalarFieldEnum: {
    id: 'id',
    exerciseId: 'exerciseId',
    sets: 'sets',
    reps: 'reps',
    weight: 'weight',
    duration: 'duration',
    noteId: 'noteId',
    trainingDayId: 'trainingDayId'
  };

  export type ExerciseLogScalarFieldEnum = (typeof ExerciseLogScalarFieldEnum)[keyof typeof ExerciseLogScalarFieldEnum]


  export const ClimbLogScalarFieldEnum: {
    id: 'id',
    name: 'name',
    grade: 'grade',
    project: 'project',
    attempts: 'attempts',
    flashed: 'flashed',
    locationId: 'locationId',
    noteId: 'noteId',
    workoutLogId: 'workoutLogId'
  };

  export type ClimbLogScalarFieldEnum = (typeof ClimbLogScalarFieldEnum)[keyof typeof ClimbLogScalarFieldEnum]


  export const LocationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    address: 'address',
    noteId: 'noteId'
  };

  export type LocationScalarFieldEnum = (typeof LocationScalarFieldEnum)[keyof typeof LocationScalarFieldEnum]


  export const RecoveryLevelScalarFieldEnum: {
    id: 'id',
    level: 'level'
  };

  export type RecoveryLevelScalarFieldEnum = (typeof RecoveryLevelScalarFieldEnum)[keyof typeof RecoveryLevelScalarFieldEnum]


  export const NoteScalarFieldEnum: {
    id: 'id',
    text: 'text'
  };

  export type NoteScalarFieldEnum = (typeof NoteScalarFieldEnum)[keyof typeof NoteScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'CycleSchema'
   */
  export type EnumCycleSchemaFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CycleSchema'>
    


  /**
   * Reference to a field of type 'CycleSchema[]'
   */
  export type ListEnumCycleSchemaFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CycleSchema[]'>
    


  /**
   * Reference to a field of type 'RoutineType'
   */
  export type EnumRoutineTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RoutineType'>
    


  /**
   * Reference to a field of type 'RoutineType[]'
   */
  export type ListEnumRoutineTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RoutineType[]'>
    


  /**
   * Reference to a field of type 'ExerciseType'
   */
  export type EnumExerciseTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ExerciseType'>
    


  /**
   * Reference to a field of type 'ExerciseType[]'
   */
  export type ListEnumExerciseTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ExerciseType[]'>
    


  /**
   * Reference to a field of type 'Equipment'
   */
  export type EnumEquipmentFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Equipment'>
    


  /**
   * Reference to a field of type 'Equipment[]'
   */
  export type ListEnumEquipmentFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Equipment[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    provider_providerAccountId?: AccountProviderProviderAccountIdCompoundUniqueInput
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "provider_providerAccountId">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Account"> | string
    userId?: StringWithAggregatesFilter<"Account"> | string
    type?: StringWithAggregatesFilter<"Account"> | string
    provider?: StringWithAggregatesFilter<"Account"> | string
    providerAccountId?: StringWithAggregatesFilter<"Account"> | string
    refresh_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    access_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    expires_at?: IntNullableWithAggregatesFilter<"Account"> | number | null
    token_type?: StringNullableWithAggregatesFilter<"Account"> | string | null
    scope?: StringNullableWithAggregatesFilter<"Account"> | string | null
    id_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    session_state?: StringNullableWithAggregatesFilter<"Account"> | string | null
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    sessionToken?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    sessionToken?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "sessionToken">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    sessionToken?: StringWithAggregatesFilter<"Session"> | string
    userId?: StringWithAggregatesFilter<"Session"> | string
    expires?: DateTimeWithAggregatesFilter<"Session"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    email?: StringNullableFilter<"User"> | string | null
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    image?: StringNullableFilter<"User"> | string | null
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
    mesocycles?: MesocycleListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    emailVerified?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    accounts?: AccountOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
    mesocycles?: MesocycleOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    image?: StringNullableFilter<"User"> | string | null
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
    mesocycles?: MesocycleListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    emailVerified?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    email?: StringNullableWithAggregatesFilter<"User"> | string | null
    emailVerified?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type VerificationTokenWhereInput = {
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    identifier?: StringFilter<"VerificationToken"> | string
    token?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
  }

  export type VerificationTokenOrderByWithRelationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenWhereUniqueInput = Prisma.AtLeast<{
    token?: string
    identifier_token?: VerificationTokenIdentifierTokenCompoundUniqueInput
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    identifier?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
  }, "token" | "identifier_token">

  export type VerificationTokenOrderByWithAggregationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    _count?: VerificationTokenCountOrderByAggregateInput
    _max?: VerificationTokenMaxOrderByAggregateInput
    _min?: VerificationTokenMinOrderByAggregateInput
  }

  export type VerificationTokenScalarWhereWithAggregatesInput = {
    AND?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    OR?: VerificationTokenScalarWhereWithAggregatesInput[]
    NOT?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    identifier?: StringWithAggregatesFilter<"VerificationToken"> | string
    token?: StringWithAggregatesFilter<"VerificationToken"> | string
    expires?: DateTimeWithAggregatesFilter<"VerificationToken"> | Date | string
  }

  export type MesocycleWhereInput = {
    AND?: MesocycleWhereInput | MesocycleWhereInput[]
    OR?: MesocycleWhereInput[]
    NOT?: MesocycleWhereInput | MesocycleWhereInput[]
    id?: StringFilter<"Mesocycle"> | string
    goal?: StringFilter<"Mesocycle"> | string
    description?: StringNullableFilter<"Mesocycle"> | string | null
    startDate?: IntFilter<"Mesocycle"> | number
    endDate?: IntFilter<"Mesocycle"> | number
    numMicros?: IntFilter<"Mesocycle"> | number
    userId?: StringFilter<"Mesocycle"> | string
    isActive?: BoolFilter<"Mesocycle"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
    microcycles?: MicrocycleListRelationFilter
  }

  export type MesocycleOrderByWithRelationInput = {
    id?: SortOrder
    goal?: SortOrder
    description?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    numMicros?: SortOrder
    userId?: SortOrder
    isActive?: SortOrder
    user?: UserOrderByWithRelationInput
    microcycles?: MicrocycleOrderByRelationAggregateInput
  }

  export type MesocycleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MesocycleWhereInput | MesocycleWhereInput[]
    OR?: MesocycleWhereInput[]
    NOT?: MesocycleWhereInput | MesocycleWhereInput[]
    goal?: StringFilter<"Mesocycle"> | string
    description?: StringNullableFilter<"Mesocycle"> | string | null
    startDate?: IntFilter<"Mesocycle"> | number
    endDate?: IntFilter<"Mesocycle"> | number
    numMicros?: IntFilter<"Mesocycle"> | number
    userId?: StringFilter<"Mesocycle"> | string
    isActive?: BoolFilter<"Mesocycle"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
    microcycles?: MicrocycleListRelationFilter
  }, "id">

  export type MesocycleOrderByWithAggregationInput = {
    id?: SortOrder
    goal?: SortOrder
    description?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    numMicros?: SortOrder
    userId?: SortOrder
    isActive?: SortOrder
    _count?: MesocycleCountOrderByAggregateInput
    _avg?: MesocycleAvgOrderByAggregateInput
    _max?: MesocycleMaxOrderByAggregateInput
    _min?: MesocycleMinOrderByAggregateInput
    _sum?: MesocycleSumOrderByAggregateInput
  }

  export type MesocycleScalarWhereWithAggregatesInput = {
    AND?: MesocycleScalarWhereWithAggregatesInput | MesocycleScalarWhereWithAggregatesInput[]
    OR?: MesocycleScalarWhereWithAggregatesInput[]
    NOT?: MesocycleScalarWhereWithAggregatesInput | MesocycleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Mesocycle"> | string
    goal?: StringWithAggregatesFilter<"Mesocycle"> | string
    description?: StringNullableWithAggregatesFilter<"Mesocycle"> | string | null
    startDate?: IntWithAggregatesFilter<"Mesocycle"> | number
    endDate?: IntWithAggregatesFilter<"Mesocycle"> | number
    numMicros?: IntWithAggregatesFilter<"Mesocycle"> | number
    userId?: StringWithAggregatesFilter<"Mesocycle"> | string
    isActive?: BoolWithAggregatesFilter<"Mesocycle"> | boolean
  }

  export type MicrocycleWhereInput = {
    AND?: MicrocycleWhereInput | MicrocycleWhereInput[]
    OR?: MicrocycleWhereInput[]
    NOT?: MicrocycleWhereInput | MicrocycleWhereInput[]
    id?: StringFilter<"Microcycle"> | string
    goal?: StringFilter<"Microcycle"> | string
    startDate?: IntFilter<"Microcycle"> | number
    endDate?: IntFilter<"Microcycle"> | number
    schema?: EnumCycleSchemaFilter<"Microcycle"> | $Enums.CycleSchema
    description?: StringNullableFilter<"Microcycle"> | string | null
    mesoId?: StringFilter<"Microcycle"> | string
    mesocycle?: XOR<MesocycleRelationFilter, MesocycleWhereInput>
    trainingDays?: TrainingDayListRelationFilter
  }

  export type MicrocycleOrderByWithRelationInput = {
    id?: SortOrder
    goal?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    schema?: SortOrder
    description?: SortOrderInput | SortOrder
    mesoId?: SortOrder
    mesocycle?: MesocycleOrderByWithRelationInput
    trainingDays?: TrainingDayOrderByRelationAggregateInput
  }

  export type MicrocycleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MicrocycleWhereInput | MicrocycleWhereInput[]
    OR?: MicrocycleWhereInput[]
    NOT?: MicrocycleWhereInput | MicrocycleWhereInput[]
    goal?: StringFilter<"Microcycle"> | string
    startDate?: IntFilter<"Microcycle"> | number
    endDate?: IntFilter<"Microcycle"> | number
    schema?: EnumCycleSchemaFilter<"Microcycle"> | $Enums.CycleSchema
    description?: StringNullableFilter<"Microcycle"> | string | null
    mesoId?: StringFilter<"Microcycle"> | string
    mesocycle?: XOR<MesocycleRelationFilter, MesocycleWhereInput>
    trainingDays?: TrainingDayListRelationFilter
  }, "id">

  export type MicrocycleOrderByWithAggregationInput = {
    id?: SortOrder
    goal?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    schema?: SortOrder
    description?: SortOrderInput | SortOrder
    mesoId?: SortOrder
    _count?: MicrocycleCountOrderByAggregateInput
    _avg?: MicrocycleAvgOrderByAggregateInput
    _max?: MicrocycleMaxOrderByAggregateInput
    _min?: MicrocycleMinOrderByAggregateInput
    _sum?: MicrocycleSumOrderByAggregateInput
  }

  export type MicrocycleScalarWhereWithAggregatesInput = {
    AND?: MicrocycleScalarWhereWithAggregatesInput | MicrocycleScalarWhereWithAggregatesInput[]
    OR?: MicrocycleScalarWhereWithAggregatesInput[]
    NOT?: MicrocycleScalarWhereWithAggregatesInput | MicrocycleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Microcycle"> | string
    goal?: StringWithAggregatesFilter<"Microcycle"> | string
    startDate?: IntWithAggregatesFilter<"Microcycle"> | number
    endDate?: IntWithAggregatesFilter<"Microcycle"> | number
    schema?: EnumCycleSchemaWithAggregatesFilter<"Microcycle"> | $Enums.CycleSchema
    description?: StringNullableWithAggregatesFilter<"Microcycle"> | string | null
    mesoId?: StringWithAggregatesFilter<"Microcycle"> | string
  }

  export type TrainingDayWhereInput = {
    AND?: TrainingDayWhereInput | TrainingDayWhereInput[]
    OR?: TrainingDayWhereInput[]
    NOT?: TrainingDayWhereInput | TrainingDayWhereInput[]
    id?: StringFilter<"TrainingDay"> | string
    date?: IntFilter<"TrainingDay"> | number
    sortOrder?: StringFilter<"TrainingDay"> | string
    microcycleId?: StringFilter<"TrainingDay"> | string
    recoveryLevelId?: StringNullableFilter<"TrainingDay"> | string | null
    noteId?: StringNullableFilter<"TrainingDay"> | string | null
    routines?: RoutineListRelationFilter
    microcycle?: XOR<MicrocycleRelationFilter, MicrocycleWhereInput>
    recoveryLevel?: XOR<RecoveryLevelNullableRelationFilter, RecoveryLevelWhereInput> | null
    workoutLog?: ExerciseLogListRelationFilter
    note?: XOR<NoteNullableRelationFilter, NoteWhereInput> | null
  }

  export type TrainingDayOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    sortOrder?: SortOrder
    microcycleId?: SortOrder
    recoveryLevelId?: SortOrderInput | SortOrder
    noteId?: SortOrderInput | SortOrder
    routines?: RoutineOrderByRelationAggregateInput
    microcycle?: MicrocycleOrderByWithRelationInput
    recoveryLevel?: RecoveryLevelOrderByWithRelationInput
    workoutLog?: ExerciseLogOrderByRelationAggregateInput
    note?: NoteOrderByWithRelationInput
  }

  export type TrainingDayWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    date?: number
    AND?: TrainingDayWhereInput | TrainingDayWhereInput[]
    OR?: TrainingDayWhereInput[]
    NOT?: TrainingDayWhereInput | TrainingDayWhereInput[]
    sortOrder?: StringFilter<"TrainingDay"> | string
    microcycleId?: StringFilter<"TrainingDay"> | string
    recoveryLevelId?: StringNullableFilter<"TrainingDay"> | string | null
    noteId?: StringNullableFilter<"TrainingDay"> | string | null
    routines?: RoutineListRelationFilter
    microcycle?: XOR<MicrocycleRelationFilter, MicrocycleWhereInput>
    recoveryLevel?: XOR<RecoveryLevelNullableRelationFilter, RecoveryLevelWhereInput> | null
    workoutLog?: ExerciseLogListRelationFilter
    note?: XOR<NoteNullableRelationFilter, NoteWhereInput> | null
  }, "id" | "date">

  export type TrainingDayOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    sortOrder?: SortOrder
    microcycleId?: SortOrder
    recoveryLevelId?: SortOrderInput | SortOrder
    noteId?: SortOrderInput | SortOrder
    _count?: TrainingDayCountOrderByAggregateInput
    _avg?: TrainingDayAvgOrderByAggregateInput
    _max?: TrainingDayMaxOrderByAggregateInput
    _min?: TrainingDayMinOrderByAggregateInput
    _sum?: TrainingDaySumOrderByAggregateInput
  }

  export type TrainingDayScalarWhereWithAggregatesInput = {
    AND?: TrainingDayScalarWhereWithAggregatesInput | TrainingDayScalarWhereWithAggregatesInput[]
    OR?: TrainingDayScalarWhereWithAggregatesInput[]
    NOT?: TrainingDayScalarWhereWithAggregatesInput | TrainingDayScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TrainingDay"> | string
    date?: IntWithAggregatesFilter<"TrainingDay"> | number
    sortOrder?: StringWithAggregatesFilter<"TrainingDay"> | string
    microcycleId?: StringWithAggregatesFilter<"TrainingDay"> | string
    recoveryLevelId?: StringNullableWithAggregatesFilter<"TrainingDay"> | string | null
    noteId?: StringNullableWithAggregatesFilter<"TrainingDay"> | string | null
  }

  export type RoutineWhereInput = {
    AND?: RoutineWhereInput | RoutineWhereInput[]
    OR?: RoutineWhereInput[]
    NOT?: RoutineWhereInput | RoutineWhereInput[]
    id?: StringFilter<"Routine"> | string
    name?: StringFilter<"Routine"> | string
    duration?: IntNullableFilter<"Routine"> | number | null
    type?: EnumRoutineTypeFilter<"Routine"> | $Enums.RoutineType
    sortOrder?: StringFilter<"Routine"> | string
    routineSubtypeId?: StringNullableFilter<"Routine"> | string | null
    noteId?: StringNullableFilter<"Routine"> | string | null
    exercises?: ExerciseListRelationFilter
    trainingDays?: TrainingDayListRelationFilter
    routineSubtype?: XOR<RoutineSubtypeNullableRelationFilter, RoutineSubtypeWhereInput> | null
    note?: XOR<NoteNullableRelationFilter, NoteWhereInput> | null
  }

  export type RoutineOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    duration?: SortOrderInput | SortOrder
    type?: SortOrder
    sortOrder?: SortOrder
    routineSubtypeId?: SortOrderInput | SortOrder
    noteId?: SortOrderInput | SortOrder
    exercises?: ExerciseOrderByRelationAggregateInput
    trainingDays?: TrainingDayOrderByRelationAggregateInput
    routineSubtype?: RoutineSubtypeOrderByWithRelationInput
    note?: NoteOrderByWithRelationInput
  }

  export type RoutineWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: RoutineWhereInput | RoutineWhereInput[]
    OR?: RoutineWhereInput[]
    NOT?: RoutineWhereInput | RoutineWhereInput[]
    duration?: IntNullableFilter<"Routine"> | number | null
    type?: EnumRoutineTypeFilter<"Routine"> | $Enums.RoutineType
    sortOrder?: StringFilter<"Routine"> | string
    routineSubtypeId?: StringNullableFilter<"Routine"> | string | null
    noteId?: StringNullableFilter<"Routine"> | string | null
    exercises?: ExerciseListRelationFilter
    trainingDays?: TrainingDayListRelationFilter
    routineSubtype?: XOR<RoutineSubtypeNullableRelationFilter, RoutineSubtypeWhereInput> | null
    note?: XOR<NoteNullableRelationFilter, NoteWhereInput> | null
  }, "id" | "name">

  export type RoutineOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    duration?: SortOrderInput | SortOrder
    type?: SortOrder
    sortOrder?: SortOrder
    routineSubtypeId?: SortOrderInput | SortOrder
    noteId?: SortOrderInput | SortOrder
    _count?: RoutineCountOrderByAggregateInput
    _avg?: RoutineAvgOrderByAggregateInput
    _max?: RoutineMaxOrderByAggregateInput
    _min?: RoutineMinOrderByAggregateInput
    _sum?: RoutineSumOrderByAggregateInput
  }

  export type RoutineScalarWhereWithAggregatesInput = {
    AND?: RoutineScalarWhereWithAggregatesInput | RoutineScalarWhereWithAggregatesInput[]
    OR?: RoutineScalarWhereWithAggregatesInput[]
    NOT?: RoutineScalarWhereWithAggregatesInput | RoutineScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Routine"> | string
    name?: StringWithAggregatesFilter<"Routine"> | string
    duration?: IntNullableWithAggregatesFilter<"Routine"> | number | null
    type?: EnumRoutineTypeWithAggregatesFilter<"Routine"> | $Enums.RoutineType
    sortOrder?: StringWithAggregatesFilter<"Routine"> | string
    routineSubtypeId?: StringNullableWithAggregatesFilter<"Routine"> | string | null
    noteId?: StringNullableWithAggregatesFilter<"Routine"> | string | null
  }

  export type RoutineSubtypeWhereInput = {
    AND?: RoutineSubtypeWhereInput | RoutineSubtypeWhereInput[]
    OR?: RoutineSubtypeWhereInput[]
    NOT?: RoutineSubtypeWhereInput | RoutineSubtypeWhereInput[]
    id?: StringFilter<"RoutineSubtype"> | string
    type?: StringFilter<"RoutineSubtype"> | string
    routine?: RoutineListRelationFilter
  }

  export type RoutineSubtypeOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    routine?: RoutineOrderByRelationAggregateInput
  }

  export type RoutineSubtypeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RoutineSubtypeWhereInput | RoutineSubtypeWhereInput[]
    OR?: RoutineSubtypeWhereInput[]
    NOT?: RoutineSubtypeWhereInput | RoutineSubtypeWhereInput[]
    type?: StringFilter<"RoutineSubtype"> | string
    routine?: RoutineListRelationFilter
  }, "id">

  export type RoutineSubtypeOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    _count?: RoutineSubtypeCountOrderByAggregateInput
    _max?: RoutineSubtypeMaxOrderByAggregateInput
    _min?: RoutineSubtypeMinOrderByAggregateInput
  }

  export type RoutineSubtypeScalarWhereWithAggregatesInput = {
    AND?: RoutineSubtypeScalarWhereWithAggregatesInput | RoutineSubtypeScalarWhereWithAggregatesInput[]
    OR?: RoutineSubtypeScalarWhereWithAggregatesInput[]
    NOT?: RoutineSubtypeScalarWhereWithAggregatesInput | RoutineSubtypeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RoutineSubtype"> | string
    type?: StringWithAggregatesFilter<"RoutineSubtype"> | string
  }

  export type ExerciseWhereInput = {
    AND?: ExerciseWhereInput | ExerciseWhereInput[]
    OR?: ExerciseWhereInput[]
    NOT?: ExerciseWhereInput | ExerciseWhereInput[]
    id?: StringFilter<"Exercise"> | string
    name?: StringFilter<"Exercise"> | string
    type?: EnumExerciseTypeFilter<"Exercise"> | $Enums.ExerciseType
    equipment?: EnumEquipmentFilter<"Exercise"> | $Enums.Equipment
    imageId?: IntNullableFilter<"Exercise"> | number | null
    noteId?: StringNullableFilter<"Exercise"> | string | null
    note?: XOR<NoteNullableRelationFilter, NoteWhereInput> | null
    history?: ExerciseLogListRelationFilter
    routines?: RoutineListRelationFilter
  }

  export type ExerciseOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    equipment?: SortOrder
    imageId?: SortOrderInput | SortOrder
    noteId?: SortOrderInput | SortOrder
    note?: NoteOrderByWithRelationInput
    history?: ExerciseLogOrderByRelationAggregateInput
    routines?: RoutineOrderByRelationAggregateInput
  }

  export type ExerciseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: ExerciseWhereInput | ExerciseWhereInput[]
    OR?: ExerciseWhereInput[]
    NOT?: ExerciseWhereInput | ExerciseWhereInput[]
    type?: EnumExerciseTypeFilter<"Exercise"> | $Enums.ExerciseType
    equipment?: EnumEquipmentFilter<"Exercise"> | $Enums.Equipment
    imageId?: IntNullableFilter<"Exercise"> | number | null
    noteId?: StringNullableFilter<"Exercise"> | string | null
    note?: XOR<NoteNullableRelationFilter, NoteWhereInput> | null
    history?: ExerciseLogListRelationFilter
    routines?: RoutineListRelationFilter
  }, "id" | "name">

  export type ExerciseOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    equipment?: SortOrder
    imageId?: SortOrderInput | SortOrder
    noteId?: SortOrderInput | SortOrder
    _count?: ExerciseCountOrderByAggregateInput
    _avg?: ExerciseAvgOrderByAggregateInput
    _max?: ExerciseMaxOrderByAggregateInput
    _min?: ExerciseMinOrderByAggregateInput
    _sum?: ExerciseSumOrderByAggregateInput
  }

  export type ExerciseScalarWhereWithAggregatesInput = {
    AND?: ExerciseScalarWhereWithAggregatesInput | ExerciseScalarWhereWithAggregatesInput[]
    OR?: ExerciseScalarWhereWithAggregatesInput[]
    NOT?: ExerciseScalarWhereWithAggregatesInput | ExerciseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Exercise"> | string
    name?: StringWithAggregatesFilter<"Exercise"> | string
    type?: EnumExerciseTypeWithAggregatesFilter<"Exercise"> | $Enums.ExerciseType
    equipment?: EnumEquipmentWithAggregatesFilter<"Exercise"> | $Enums.Equipment
    imageId?: IntNullableWithAggregatesFilter<"Exercise"> | number | null
    noteId?: StringNullableWithAggregatesFilter<"Exercise"> | string | null
  }

  export type ExerciseLogWhereInput = {
    AND?: ExerciseLogWhereInput | ExerciseLogWhereInput[]
    OR?: ExerciseLogWhereInput[]
    NOT?: ExerciseLogWhereInput | ExerciseLogWhereInput[]
    id?: StringFilter<"ExerciseLog"> | string
    exerciseId?: StringFilter<"ExerciseLog"> | string
    sets?: IntNullableFilter<"ExerciseLog"> | number | null
    reps?: IntNullableFilter<"ExerciseLog"> | number | null
    weight?: IntNullableFilter<"ExerciseLog"> | number | null
    duration?: IntNullableFilter<"ExerciseLog"> | number | null
    noteId?: StringNullableFilter<"ExerciseLog"> | string | null
    trainingDayId?: StringNullableFilter<"ExerciseLog"> | string | null
    exercise?: XOR<ExerciseRelationFilter, ExerciseWhereInput>
    climbLog?: ClimbLogListRelationFilter
    note?: XOR<NoteNullableRelationFilter, NoteWhereInput> | null
    TrainingDay?: XOR<TrainingDayNullableRelationFilter, TrainingDayWhereInput> | null
  }

  export type ExerciseLogOrderByWithRelationInput = {
    id?: SortOrder
    exerciseId?: SortOrder
    sets?: SortOrderInput | SortOrder
    reps?: SortOrderInput | SortOrder
    weight?: SortOrderInput | SortOrder
    duration?: SortOrderInput | SortOrder
    noteId?: SortOrderInput | SortOrder
    trainingDayId?: SortOrderInput | SortOrder
    exercise?: ExerciseOrderByWithRelationInput
    climbLog?: ClimbLogOrderByRelationAggregateInput
    note?: NoteOrderByWithRelationInput
    TrainingDay?: TrainingDayOrderByWithRelationInput
  }

  export type ExerciseLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ExerciseLogWhereInput | ExerciseLogWhereInput[]
    OR?: ExerciseLogWhereInput[]
    NOT?: ExerciseLogWhereInput | ExerciseLogWhereInput[]
    exerciseId?: StringFilter<"ExerciseLog"> | string
    sets?: IntNullableFilter<"ExerciseLog"> | number | null
    reps?: IntNullableFilter<"ExerciseLog"> | number | null
    weight?: IntNullableFilter<"ExerciseLog"> | number | null
    duration?: IntNullableFilter<"ExerciseLog"> | number | null
    noteId?: StringNullableFilter<"ExerciseLog"> | string | null
    trainingDayId?: StringNullableFilter<"ExerciseLog"> | string | null
    exercise?: XOR<ExerciseRelationFilter, ExerciseWhereInput>
    climbLog?: ClimbLogListRelationFilter
    note?: XOR<NoteNullableRelationFilter, NoteWhereInput> | null
    TrainingDay?: XOR<TrainingDayNullableRelationFilter, TrainingDayWhereInput> | null
  }, "id">

  export type ExerciseLogOrderByWithAggregationInput = {
    id?: SortOrder
    exerciseId?: SortOrder
    sets?: SortOrderInput | SortOrder
    reps?: SortOrderInput | SortOrder
    weight?: SortOrderInput | SortOrder
    duration?: SortOrderInput | SortOrder
    noteId?: SortOrderInput | SortOrder
    trainingDayId?: SortOrderInput | SortOrder
    _count?: ExerciseLogCountOrderByAggregateInput
    _avg?: ExerciseLogAvgOrderByAggregateInput
    _max?: ExerciseLogMaxOrderByAggregateInput
    _min?: ExerciseLogMinOrderByAggregateInput
    _sum?: ExerciseLogSumOrderByAggregateInput
  }

  export type ExerciseLogScalarWhereWithAggregatesInput = {
    AND?: ExerciseLogScalarWhereWithAggregatesInput | ExerciseLogScalarWhereWithAggregatesInput[]
    OR?: ExerciseLogScalarWhereWithAggregatesInput[]
    NOT?: ExerciseLogScalarWhereWithAggregatesInput | ExerciseLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ExerciseLog"> | string
    exerciseId?: StringWithAggregatesFilter<"ExerciseLog"> | string
    sets?: IntNullableWithAggregatesFilter<"ExerciseLog"> | number | null
    reps?: IntNullableWithAggregatesFilter<"ExerciseLog"> | number | null
    weight?: IntNullableWithAggregatesFilter<"ExerciseLog"> | number | null
    duration?: IntNullableWithAggregatesFilter<"ExerciseLog"> | number | null
    noteId?: StringNullableWithAggregatesFilter<"ExerciseLog"> | string | null
    trainingDayId?: StringNullableWithAggregatesFilter<"ExerciseLog"> | string | null
  }

  export type ClimbLogWhereInput = {
    AND?: ClimbLogWhereInput | ClimbLogWhereInput[]
    OR?: ClimbLogWhereInput[]
    NOT?: ClimbLogWhereInput | ClimbLogWhereInput[]
    id?: StringFilter<"ClimbLog"> | string
    name?: StringNullableFilter<"ClimbLog"> | string | null
    grade?: IntFilter<"ClimbLog"> | number
    project?: BoolNullableFilter<"ClimbLog"> | boolean | null
    attempts?: IntNullableFilter<"ClimbLog"> | number | null
    flashed?: BoolNullableFilter<"ClimbLog"> | boolean | null
    locationId?: StringNullableFilter<"ClimbLog"> | string | null
    noteId?: StringNullableFilter<"ClimbLog"> | string | null
    workoutLogId?: StringNullableFilter<"ClimbLog"> | string | null
    location?: XOR<LocationNullableRelationFilter, LocationWhereInput> | null
    note?: XOR<NoteNullableRelationFilter, NoteWhereInput> | null
    WorkoutLog?: XOR<ExerciseLogNullableRelationFilter, ExerciseLogWhereInput> | null
  }

  export type ClimbLogOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    grade?: SortOrder
    project?: SortOrderInput | SortOrder
    attempts?: SortOrderInput | SortOrder
    flashed?: SortOrderInput | SortOrder
    locationId?: SortOrderInput | SortOrder
    noteId?: SortOrderInput | SortOrder
    workoutLogId?: SortOrderInput | SortOrder
    location?: LocationOrderByWithRelationInput
    note?: NoteOrderByWithRelationInput
    WorkoutLog?: ExerciseLogOrderByWithRelationInput
  }

  export type ClimbLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ClimbLogWhereInput | ClimbLogWhereInput[]
    OR?: ClimbLogWhereInput[]
    NOT?: ClimbLogWhereInput | ClimbLogWhereInput[]
    name?: StringNullableFilter<"ClimbLog"> | string | null
    grade?: IntFilter<"ClimbLog"> | number
    project?: BoolNullableFilter<"ClimbLog"> | boolean | null
    attempts?: IntNullableFilter<"ClimbLog"> | number | null
    flashed?: BoolNullableFilter<"ClimbLog"> | boolean | null
    locationId?: StringNullableFilter<"ClimbLog"> | string | null
    noteId?: StringNullableFilter<"ClimbLog"> | string | null
    workoutLogId?: StringNullableFilter<"ClimbLog"> | string | null
    location?: XOR<LocationNullableRelationFilter, LocationWhereInput> | null
    note?: XOR<NoteNullableRelationFilter, NoteWhereInput> | null
    WorkoutLog?: XOR<ExerciseLogNullableRelationFilter, ExerciseLogWhereInput> | null
  }, "id">

  export type ClimbLogOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    grade?: SortOrder
    project?: SortOrderInput | SortOrder
    attempts?: SortOrderInput | SortOrder
    flashed?: SortOrderInput | SortOrder
    locationId?: SortOrderInput | SortOrder
    noteId?: SortOrderInput | SortOrder
    workoutLogId?: SortOrderInput | SortOrder
    _count?: ClimbLogCountOrderByAggregateInput
    _avg?: ClimbLogAvgOrderByAggregateInput
    _max?: ClimbLogMaxOrderByAggregateInput
    _min?: ClimbLogMinOrderByAggregateInput
    _sum?: ClimbLogSumOrderByAggregateInput
  }

  export type ClimbLogScalarWhereWithAggregatesInput = {
    AND?: ClimbLogScalarWhereWithAggregatesInput | ClimbLogScalarWhereWithAggregatesInput[]
    OR?: ClimbLogScalarWhereWithAggregatesInput[]
    NOT?: ClimbLogScalarWhereWithAggregatesInput | ClimbLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ClimbLog"> | string
    name?: StringNullableWithAggregatesFilter<"ClimbLog"> | string | null
    grade?: IntWithAggregatesFilter<"ClimbLog"> | number
    project?: BoolNullableWithAggregatesFilter<"ClimbLog"> | boolean | null
    attempts?: IntNullableWithAggregatesFilter<"ClimbLog"> | number | null
    flashed?: BoolNullableWithAggregatesFilter<"ClimbLog"> | boolean | null
    locationId?: StringNullableWithAggregatesFilter<"ClimbLog"> | string | null
    noteId?: StringNullableWithAggregatesFilter<"ClimbLog"> | string | null
    workoutLogId?: StringNullableWithAggregatesFilter<"ClimbLog"> | string | null
  }

  export type LocationWhereInput = {
    AND?: LocationWhereInput | LocationWhereInput[]
    OR?: LocationWhereInput[]
    NOT?: LocationWhereInput | LocationWhereInput[]
    id?: StringFilter<"Location"> | string
    name?: StringFilter<"Location"> | string
    address?: StringNullableFilter<"Location"> | string | null
    noteId?: StringNullableFilter<"Location"> | string | null
    note?: XOR<NoteNullableRelationFilter, NoteWhereInput> | null
    climbs?: ClimbLogListRelationFilter
  }

  export type LocationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrderInput | SortOrder
    noteId?: SortOrderInput | SortOrder
    note?: NoteOrderByWithRelationInput
    climbs?: ClimbLogOrderByRelationAggregateInput
  }

  export type LocationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LocationWhereInput | LocationWhereInput[]
    OR?: LocationWhereInput[]
    NOT?: LocationWhereInput | LocationWhereInput[]
    name?: StringFilter<"Location"> | string
    address?: StringNullableFilter<"Location"> | string | null
    noteId?: StringNullableFilter<"Location"> | string | null
    note?: XOR<NoteNullableRelationFilter, NoteWhereInput> | null
    climbs?: ClimbLogListRelationFilter
  }, "id">

  export type LocationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrderInput | SortOrder
    noteId?: SortOrderInput | SortOrder
    _count?: LocationCountOrderByAggregateInput
    _max?: LocationMaxOrderByAggregateInput
    _min?: LocationMinOrderByAggregateInput
  }

  export type LocationScalarWhereWithAggregatesInput = {
    AND?: LocationScalarWhereWithAggregatesInput | LocationScalarWhereWithAggregatesInput[]
    OR?: LocationScalarWhereWithAggregatesInput[]
    NOT?: LocationScalarWhereWithAggregatesInput | LocationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Location"> | string
    name?: StringWithAggregatesFilter<"Location"> | string
    address?: StringNullableWithAggregatesFilter<"Location"> | string | null
    noteId?: StringNullableWithAggregatesFilter<"Location"> | string | null
  }

  export type RecoveryLevelWhereInput = {
    AND?: RecoveryLevelWhereInput | RecoveryLevelWhereInput[]
    OR?: RecoveryLevelWhereInput[]
    NOT?: RecoveryLevelWhereInput | RecoveryLevelWhereInput[]
    id?: StringFilter<"RecoveryLevel"> | string
    level?: StringFilter<"RecoveryLevel"> | string
    trainingDays?: TrainingDayListRelationFilter
  }

  export type RecoveryLevelOrderByWithRelationInput = {
    id?: SortOrder
    level?: SortOrder
    trainingDays?: TrainingDayOrderByRelationAggregateInput
  }

  export type RecoveryLevelWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RecoveryLevelWhereInput | RecoveryLevelWhereInput[]
    OR?: RecoveryLevelWhereInput[]
    NOT?: RecoveryLevelWhereInput | RecoveryLevelWhereInput[]
    level?: StringFilter<"RecoveryLevel"> | string
    trainingDays?: TrainingDayListRelationFilter
  }, "id">

  export type RecoveryLevelOrderByWithAggregationInput = {
    id?: SortOrder
    level?: SortOrder
    _count?: RecoveryLevelCountOrderByAggregateInput
    _max?: RecoveryLevelMaxOrderByAggregateInput
    _min?: RecoveryLevelMinOrderByAggregateInput
  }

  export type RecoveryLevelScalarWhereWithAggregatesInput = {
    AND?: RecoveryLevelScalarWhereWithAggregatesInput | RecoveryLevelScalarWhereWithAggregatesInput[]
    OR?: RecoveryLevelScalarWhereWithAggregatesInput[]
    NOT?: RecoveryLevelScalarWhereWithAggregatesInput | RecoveryLevelScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RecoveryLevel"> | string
    level?: StringWithAggregatesFilter<"RecoveryLevel"> | string
  }

  export type NoteWhereInput = {
    AND?: NoteWhereInput | NoteWhereInput[]
    OR?: NoteWhereInput[]
    NOT?: NoteWhereInput | NoteWhereInput[]
    id?: StringFilter<"Note"> | string
    text?: StringFilter<"Note"> | string
    trainingDays?: TrainingDayListRelationFilter
    exercises?: ExerciseListRelationFilter
    climbs?: ClimbLogListRelationFilter
    locations?: LocationListRelationFilter
    routines?: RoutineListRelationFilter
    WorkoutLog?: ExerciseLogListRelationFilter
  }

  export type NoteOrderByWithRelationInput = {
    id?: SortOrder
    text?: SortOrder
    trainingDays?: TrainingDayOrderByRelationAggregateInput
    exercises?: ExerciseOrderByRelationAggregateInput
    climbs?: ClimbLogOrderByRelationAggregateInput
    locations?: LocationOrderByRelationAggregateInput
    routines?: RoutineOrderByRelationAggregateInput
    WorkoutLog?: ExerciseLogOrderByRelationAggregateInput
  }

  export type NoteWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NoteWhereInput | NoteWhereInput[]
    OR?: NoteWhereInput[]
    NOT?: NoteWhereInput | NoteWhereInput[]
    text?: StringFilter<"Note"> | string
    trainingDays?: TrainingDayListRelationFilter
    exercises?: ExerciseListRelationFilter
    climbs?: ClimbLogListRelationFilter
    locations?: LocationListRelationFilter
    routines?: RoutineListRelationFilter
    WorkoutLog?: ExerciseLogListRelationFilter
  }, "id">

  export type NoteOrderByWithAggregationInput = {
    id?: SortOrder
    text?: SortOrder
    _count?: NoteCountOrderByAggregateInput
    _max?: NoteMaxOrderByAggregateInput
    _min?: NoteMinOrderByAggregateInput
  }

  export type NoteScalarWhereWithAggregatesInput = {
    AND?: NoteScalarWhereWithAggregatesInput | NoteScalarWhereWithAggregatesInput[]
    OR?: NoteScalarWhereWithAggregatesInput[]
    NOT?: NoteScalarWhereWithAggregatesInput | NoteScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Note"> | string
    text?: StringWithAggregatesFilter<"Note"> | string
  }

  export type AccountCreateInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    user: UserCreateNestedOneWithoutAccountsInput
  }

  export type AccountUncheckedCreateInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountCreateManyInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionCreateInput = {
    id?: string
    sessionToken: string
    expires: Date | string
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    sessionToken: string
    userId: string
    expires: Date | string
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyInput = {
    id?: string
    sessionToken: string
    userId: string
    expires: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    mesocycles?: MesocycleCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    mesocycles?: MesocycleUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    mesocycles?: MesocycleUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    mesocycles?: MesocycleUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VerificationTokenCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUncheckedCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateManyInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateManyMutationInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateManyInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MesocycleCreateInput = {
    id?: string
    goal: string
    description?: string | null
    startDate: number
    endDate: number
    numMicros?: number
    isActive: boolean
    user: UserCreateNestedOneWithoutMesocyclesInput
    microcycles?: MicrocycleCreateNestedManyWithoutMesocycleInput
  }

  export type MesocycleUncheckedCreateInput = {
    id?: string
    goal: string
    description?: string | null
    startDate: number
    endDate: number
    numMicros?: number
    userId: string
    isActive: boolean
    microcycles?: MicrocycleUncheckedCreateNestedManyWithoutMesocycleInput
  }

  export type MesocycleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    goal?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: IntFieldUpdateOperationsInput | number
    endDate?: IntFieldUpdateOperationsInput | number
    numMicros?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutMesocyclesNestedInput
    microcycles?: MicrocycleUpdateManyWithoutMesocycleNestedInput
  }

  export type MesocycleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    goal?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: IntFieldUpdateOperationsInput | number
    endDate?: IntFieldUpdateOperationsInput | number
    numMicros?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    microcycles?: MicrocycleUncheckedUpdateManyWithoutMesocycleNestedInput
  }

  export type MesocycleCreateManyInput = {
    id?: string
    goal: string
    description?: string | null
    startDate: number
    endDate: number
    numMicros?: number
    userId: string
    isActive: boolean
  }

  export type MesocycleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    goal?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: IntFieldUpdateOperationsInput | number
    endDate?: IntFieldUpdateOperationsInput | number
    numMicros?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MesocycleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    goal?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: IntFieldUpdateOperationsInput | number
    endDate?: IntFieldUpdateOperationsInput | number
    numMicros?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MicrocycleCreateInput = {
    id?: string
    goal: string
    startDate: number
    endDate: number
    schema: $Enums.CycleSchema
    description?: string | null
    mesocycle: MesocycleCreateNestedOneWithoutMicrocyclesInput
    trainingDays?: TrainingDayCreateNestedManyWithoutMicrocycleInput
  }

  export type MicrocycleUncheckedCreateInput = {
    id?: string
    goal: string
    startDate: number
    endDate: number
    schema: $Enums.CycleSchema
    description?: string | null
    mesoId: string
    trainingDays?: TrainingDayUncheckedCreateNestedManyWithoutMicrocycleInput
  }

  export type MicrocycleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    goal?: StringFieldUpdateOperationsInput | string
    startDate?: IntFieldUpdateOperationsInput | number
    endDate?: IntFieldUpdateOperationsInput | number
    schema?: EnumCycleSchemaFieldUpdateOperationsInput | $Enums.CycleSchema
    description?: NullableStringFieldUpdateOperationsInput | string | null
    mesocycle?: MesocycleUpdateOneRequiredWithoutMicrocyclesNestedInput
    trainingDays?: TrainingDayUpdateManyWithoutMicrocycleNestedInput
  }

  export type MicrocycleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    goal?: StringFieldUpdateOperationsInput | string
    startDate?: IntFieldUpdateOperationsInput | number
    endDate?: IntFieldUpdateOperationsInput | number
    schema?: EnumCycleSchemaFieldUpdateOperationsInput | $Enums.CycleSchema
    description?: NullableStringFieldUpdateOperationsInput | string | null
    mesoId?: StringFieldUpdateOperationsInput | string
    trainingDays?: TrainingDayUncheckedUpdateManyWithoutMicrocycleNestedInput
  }

  export type MicrocycleCreateManyInput = {
    id?: string
    goal: string
    startDate: number
    endDate: number
    schema: $Enums.CycleSchema
    description?: string | null
    mesoId: string
  }

  export type MicrocycleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    goal?: StringFieldUpdateOperationsInput | string
    startDate?: IntFieldUpdateOperationsInput | number
    endDate?: IntFieldUpdateOperationsInput | number
    schema?: EnumCycleSchemaFieldUpdateOperationsInput | $Enums.CycleSchema
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MicrocycleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    goal?: StringFieldUpdateOperationsInput | string
    startDate?: IntFieldUpdateOperationsInput | number
    endDate?: IntFieldUpdateOperationsInput | number
    schema?: EnumCycleSchemaFieldUpdateOperationsInput | $Enums.CycleSchema
    description?: NullableStringFieldUpdateOperationsInput | string | null
    mesoId?: StringFieldUpdateOperationsInput | string
  }

  export type TrainingDayCreateInput = {
    id?: string
    date: number
    sortOrder?: string
    routines?: RoutineCreateNestedManyWithoutTrainingDaysInput
    microcycle: MicrocycleCreateNestedOneWithoutTrainingDaysInput
    recoveryLevel?: RecoveryLevelCreateNestedOneWithoutTrainingDaysInput
    workoutLog?: ExerciseLogCreateNestedManyWithoutTrainingDayInput
    note?: NoteCreateNestedOneWithoutTrainingDaysInput
  }

  export type TrainingDayUncheckedCreateInput = {
    id?: string
    date: number
    sortOrder?: string
    microcycleId: string
    recoveryLevelId?: string | null
    noteId?: string | null
    routines?: RoutineUncheckedCreateNestedManyWithoutTrainingDaysInput
    workoutLog?: ExerciseLogUncheckedCreateNestedManyWithoutTrainingDayInput
  }

  export type TrainingDayUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: IntFieldUpdateOperationsInput | number
    sortOrder?: StringFieldUpdateOperationsInput | string
    routines?: RoutineUpdateManyWithoutTrainingDaysNestedInput
    microcycle?: MicrocycleUpdateOneRequiredWithoutTrainingDaysNestedInput
    recoveryLevel?: RecoveryLevelUpdateOneWithoutTrainingDaysNestedInput
    workoutLog?: ExerciseLogUpdateManyWithoutTrainingDayNestedInput
    note?: NoteUpdateOneWithoutTrainingDaysNestedInput
  }

  export type TrainingDayUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: IntFieldUpdateOperationsInput | number
    sortOrder?: StringFieldUpdateOperationsInput | string
    microcycleId?: StringFieldUpdateOperationsInput | string
    recoveryLevelId?: NullableStringFieldUpdateOperationsInput | string | null
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
    routines?: RoutineUncheckedUpdateManyWithoutTrainingDaysNestedInput
    workoutLog?: ExerciseLogUncheckedUpdateManyWithoutTrainingDayNestedInput
  }

  export type TrainingDayCreateManyInput = {
    id?: string
    date: number
    sortOrder?: string
    microcycleId: string
    recoveryLevelId?: string | null
    noteId?: string | null
  }

  export type TrainingDayUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: IntFieldUpdateOperationsInput | number
    sortOrder?: StringFieldUpdateOperationsInput | string
  }

  export type TrainingDayUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: IntFieldUpdateOperationsInput | number
    sortOrder?: StringFieldUpdateOperationsInput | string
    microcycleId?: StringFieldUpdateOperationsInput | string
    recoveryLevelId?: NullableStringFieldUpdateOperationsInput | string | null
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RoutineCreateInput = {
    id?: string
    name: string
    duration?: number | null
    type: $Enums.RoutineType
    sortOrder: string
    exercises?: ExerciseCreateNestedManyWithoutRoutinesInput
    trainingDays?: TrainingDayCreateNestedManyWithoutRoutinesInput
    routineSubtype?: RoutineSubtypeCreateNestedOneWithoutRoutineInput
    note?: NoteCreateNestedOneWithoutRoutinesInput
  }

  export type RoutineUncheckedCreateInput = {
    id?: string
    name: string
    duration?: number | null
    type: $Enums.RoutineType
    sortOrder: string
    routineSubtypeId?: string | null
    noteId?: string | null
    exercises?: ExerciseUncheckedCreateNestedManyWithoutRoutinesInput
    trainingDays?: TrainingDayUncheckedCreateNestedManyWithoutRoutinesInput
  }

  export type RoutineUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumRoutineTypeFieldUpdateOperationsInput | $Enums.RoutineType
    sortOrder?: StringFieldUpdateOperationsInput | string
    exercises?: ExerciseUpdateManyWithoutRoutinesNestedInput
    trainingDays?: TrainingDayUpdateManyWithoutRoutinesNestedInput
    routineSubtype?: RoutineSubtypeUpdateOneWithoutRoutineNestedInput
    note?: NoteUpdateOneWithoutRoutinesNestedInput
  }

  export type RoutineUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumRoutineTypeFieldUpdateOperationsInput | $Enums.RoutineType
    sortOrder?: StringFieldUpdateOperationsInput | string
    routineSubtypeId?: NullableStringFieldUpdateOperationsInput | string | null
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
    exercises?: ExerciseUncheckedUpdateManyWithoutRoutinesNestedInput
    trainingDays?: TrainingDayUncheckedUpdateManyWithoutRoutinesNestedInput
  }

  export type RoutineCreateManyInput = {
    id?: string
    name: string
    duration?: number | null
    type: $Enums.RoutineType
    sortOrder: string
    routineSubtypeId?: string | null
    noteId?: string | null
  }

  export type RoutineUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumRoutineTypeFieldUpdateOperationsInput | $Enums.RoutineType
    sortOrder?: StringFieldUpdateOperationsInput | string
  }

  export type RoutineUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumRoutineTypeFieldUpdateOperationsInput | $Enums.RoutineType
    sortOrder?: StringFieldUpdateOperationsInput | string
    routineSubtypeId?: NullableStringFieldUpdateOperationsInput | string | null
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RoutineSubtypeCreateInput = {
    id?: string
    type: string
    routine?: RoutineCreateNestedManyWithoutRoutineSubtypeInput
  }

  export type RoutineSubtypeUncheckedCreateInput = {
    id?: string
    type: string
    routine?: RoutineUncheckedCreateNestedManyWithoutRoutineSubtypeInput
  }

  export type RoutineSubtypeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    routine?: RoutineUpdateManyWithoutRoutineSubtypeNestedInput
  }

  export type RoutineSubtypeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    routine?: RoutineUncheckedUpdateManyWithoutRoutineSubtypeNestedInput
  }

  export type RoutineSubtypeCreateManyInput = {
    id?: string
    type: string
  }

  export type RoutineSubtypeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
  }

  export type RoutineSubtypeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
  }

  export type ExerciseCreateInput = {
    id?: string
    name: string
    type: $Enums.ExerciseType
    equipment: $Enums.Equipment
    imageId?: number | null
    note?: NoteCreateNestedOneWithoutExercisesInput
    history?: ExerciseLogCreateNestedManyWithoutExerciseInput
    routines?: RoutineCreateNestedManyWithoutExercisesInput
  }

  export type ExerciseUncheckedCreateInput = {
    id?: string
    name: string
    type: $Enums.ExerciseType
    equipment: $Enums.Equipment
    imageId?: number | null
    noteId?: string | null
    history?: ExerciseLogUncheckedCreateNestedManyWithoutExerciseInput
    routines?: RoutineUncheckedCreateNestedManyWithoutExercisesInput
  }

  export type ExerciseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumExerciseTypeFieldUpdateOperationsInput | $Enums.ExerciseType
    equipment?: EnumEquipmentFieldUpdateOperationsInput | $Enums.Equipment
    imageId?: NullableIntFieldUpdateOperationsInput | number | null
    note?: NoteUpdateOneWithoutExercisesNestedInput
    history?: ExerciseLogUpdateManyWithoutExerciseNestedInput
    routines?: RoutineUpdateManyWithoutExercisesNestedInput
  }

  export type ExerciseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumExerciseTypeFieldUpdateOperationsInput | $Enums.ExerciseType
    equipment?: EnumEquipmentFieldUpdateOperationsInput | $Enums.Equipment
    imageId?: NullableIntFieldUpdateOperationsInput | number | null
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
    history?: ExerciseLogUncheckedUpdateManyWithoutExerciseNestedInput
    routines?: RoutineUncheckedUpdateManyWithoutExercisesNestedInput
  }

  export type ExerciseCreateManyInput = {
    id?: string
    name: string
    type: $Enums.ExerciseType
    equipment: $Enums.Equipment
    imageId?: number | null
    noteId?: string | null
  }

  export type ExerciseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumExerciseTypeFieldUpdateOperationsInput | $Enums.ExerciseType
    equipment?: EnumEquipmentFieldUpdateOperationsInput | $Enums.Equipment
    imageId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ExerciseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumExerciseTypeFieldUpdateOperationsInput | $Enums.ExerciseType
    equipment?: EnumEquipmentFieldUpdateOperationsInput | $Enums.Equipment
    imageId?: NullableIntFieldUpdateOperationsInput | number | null
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ExerciseLogCreateInput = {
    id?: string
    sets?: number | null
    reps?: number | null
    weight?: number | null
    duration?: number | null
    exercise: ExerciseCreateNestedOneWithoutHistoryInput
    climbLog?: ClimbLogCreateNestedManyWithoutWorkoutLogInput
    note?: NoteCreateNestedOneWithoutWorkoutLogInput
    TrainingDay?: TrainingDayCreateNestedOneWithoutWorkoutLogInput
  }

  export type ExerciseLogUncheckedCreateInput = {
    id?: string
    exerciseId: string
    sets?: number | null
    reps?: number | null
    weight?: number | null
    duration?: number | null
    noteId?: string | null
    trainingDayId?: string | null
    climbLog?: ClimbLogUncheckedCreateNestedManyWithoutWorkoutLogInput
  }

  export type ExerciseLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sets?: NullableIntFieldUpdateOperationsInput | number | null
    reps?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    exercise?: ExerciseUpdateOneRequiredWithoutHistoryNestedInput
    climbLog?: ClimbLogUpdateManyWithoutWorkoutLogNestedInput
    note?: NoteUpdateOneWithoutWorkoutLogNestedInput
    TrainingDay?: TrainingDayUpdateOneWithoutWorkoutLogNestedInput
  }

  export type ExerciseLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    exerciseId?: StringFieldUpdateOperationsInput | string
    sets?: NullableIntFieldUpdateOperationsInput | number | null
    reps?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
    trainingDayId?: NullableStringFieldUpdateOperationsInput | string | null
    climbLog?: ClimbLogUncheckedUpdateManyWithoutWorkoutLogNestedInput
  }

  export type ExerciseLogCreateManyInput = {
    id?: string
    exerciseId: string
    sets?: number | null
    reps?: number | null
    weight?: number | null
    duration?: number | null
    noteId?: string | null
    trainingDayId?: string | null
  }

  export type ExerciseLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sets?: NullableIntFieldUpdateOperationsInput | number | null
    reps?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ExerciseLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    exerciseId?: StringFieldUpdateOperationsInput | string
    sets?: NullableIntFieldUpdateOperationsInput | number | null
    reps?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
    trainingDayId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ClimbLogCreateInput = {
    id?: string
    name?: string | null
    grade: number
    project?: boolean | null
    attempts?: number | null
    flashed?: boolean | null
    location?: LocationCreateNestedOneWithoutClimbsInput
    note?: NoteCreateNestedOneWithoutClimbsInput
    WorkoutLog?: ExerciseLogCreateNestedOneWithoutClimbLogInput
  }

  export type ClimbLogUncheckedCreateInput = {
    id?: string
    name?: string | null
    grade: number
    project?: boolean | null
    attempts?: number | null
    flashed?: boolean | null
    locationId?: string | null
    noteId?: string | null
    workoutLogId?: string | null
  }

  export type ClimbLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: IntFieldUpdateOperationsInput | number
    project?: NullableBoolFieldUpdateOperationsInput | boolean | null
    attempts?: NullableIntFieldUpdateOperationsInput | number | null
    flashed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    location?: LocationUpdateOneWithoutClimbsNestedInput
    note?: NoteUpdateOneWithoutClimbsNestedInput
    WorkoutLog?: ExerciseLogUpdateOneWithoutClimbLogNestedInput
  }

  export type ClimbLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: IntFieldUpdateOperationsInput | number
    project?: NullableBoolFieldUpdateOperationsInput | boolean | null
    attempts?: NullableIntFieldUpdateOperationsInput | number | null
    flashed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
    workoutLogId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ClimbLogCreateManyInput = {
    id?: string
    name?: string | null
    grade: number
    project?: boolean | null
    attempts?: number | null
    flashed?: boolean | null
    locationId?: string | null
    noteId?: string | null
    workoutLogId?: string | null
  }

  export type ClimbLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: IntFieldUpdateOperationsInput | number
    project?: NullableBoolFieldUpdateOperationsInput | boolean | null
    attempts?: NullableIntFieldUpdateOperationsInput | number | null
    flashed?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type ClimbLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: IntFieldUpdateOperationsInput | number
    project?: NullableBoolFieldUpdateOperationsInput | boolean | null
    attempts?: NullableIntFieldUpdateOperationsInput | number | null
    flashed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
    workoutLogId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LocationCreateInput = {
    id?: string
    name: string
    address?: string | null
    note?: NoteCreateNestedOneWithoutLocationsInput
    climbs?: ClimbLogCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateInput = {
    id?: string
    name: string
    address?: string | null
    noteId?: string | null
    climbs?: ClimbLogUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NoteUpdateOneWithoutLocationsNestedInput
    climbs?: ClimbLogUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
    climbs?: ClimbLogUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type LocationCreateManyInput = {
    id?: string
    name: string
    address?: string | null
    noteId?: string | null
  }

  export type LocationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LocationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RecoveryLevelCreateInput = {
    id?: string
    level: string
    trainingDays?: TrainingDayCreateNestedManyWithoutRecoveryLevelInput
  }

  export type RecoveryLevelUncheckedCreateInput = {
    id?: string
    level: string
    trainingDays?: TrainingDayUncheckedCreateNestedManyWithoutRecoveryLevelInput
  }

  export type RecoveryLevelUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    level?: StringFieldUpdateOperationsInput | string
    trainingDays?: TrainingDayUpdateManyWithoutRecoveryLevelNestedInput
  }

  export type RecoveryLevelUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    level?: StringFieldUpdateOperationsInput | string
    trainingDays?: TrainingDayUncheckedUpdateManyWithoutRecoveryLevelNestedInput
  }

  export type RecoveryLevelCreateManyInput = {
    id?: string
    level: string
  }

  export type RecoveryLevelUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    level?: StringFieldUpdateOperationsInput | string
  }

  export type RecoveryLevelUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    level?: StringFieldUpdateOperationsInput | string
  }

  export type NoteCreateInput = {
    id?: string
    text: string
    trainingDays?: TrainingDayCreateNestedManyWithoutNoteInput
    exercises?: ExerciseCreateNestedManyWithoutNoteInput
    climbs?: ClimbLogCreateNestedManyWithoutNoteInput
    locations?: LocationCreateNestedManyWithoutNoteInput
    routines?: RoutineCreateNestedManyWithoutNoteInput
    WorkoutLog?: ExerciseLogCreateNestedManyWithoutNoteInput
  }

  export type NoteUncheckedCreateInput = {
    id?: string
    text: string
    trainingDays?: TrainingDayUncheckedCreateNestedManyWithoutNoteInput
    exercises?: ExerciseUncheckedCreateNestedManyWithoutNoteInput
    climbs?: ClimbLogUncheckedCreateNestedManyWithoutNoteInput
    locations?: LocationUncheckedCreateNestedManyWithoutNoteInput
    routines?: RoutineUncheckedCreateNestedManyWithoutNoteInput
    WorkoutLog?: ExerciseLogUncheckedCreateNestedManyWithoutNoteInput
  }

  export type NoteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    trainingDays?: TrainingDayUpdateManyWithoutNoteNestedInput
    exercises?: ExerciseUpdateManyWithoutNoteNestedInput
    climbs?: ClimbLogUpdateManyWithoutNoteNestedInput
    locations?: LocationUpdateManyWithoutNoteNestedInput
    routines?: RoutineUpdateManyWithoutNoteNestedInput
    WorkoutLog?: ExerciseLogUpdateManyWithoutNoteNestedInput
  }

  export type NoteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    trainingDays?: TrainingDayUncheckedUpdateManyWithoutNoteNestedInput
    exercises?: ExerciseUncheckedUpdateManyWithoutNoteNestedInput
    climbs?: ClimbLogUncheckedUpdateManyWithoutNoteNestedInput
    locations?: LocationUncheckedUpdateManyWithoutNoteNestedInput
    routines?: RoutineUncheckedUpdateManyWithoutNoteNestedInput
    WorkoutLog?: ExerciseLogUncheckedUpdateManyWithoutNoteNestedInput
  }

  export type NoteCreateManyInput = {
    id?: string
    text: string
  }

  export type NoteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
  }

  export type NoteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AccountProviderProviderAccountIdCompoundUniqueInput = {
    provider: string
    providerAccountId: string
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type MesocycleListRelationFilter = {
    every?: MesocycleWhereInput
    some?: MesocycleWhereInput
    none?: MesocycleWhereInput
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MesocycleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type VerificationTokenIdentifierTokenCompoundUniqueInput = {
    identifier: string
    token: string
  }

  export type VerificationTokenCountOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMaxOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMinOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type MicrocycleListRelationFilter = {
    every?: MicrocycleWhereInput
    some?: MicrocycleWhereInput
    none?: MicrocycleWhereInput
  }

  export type MicrocycleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MesocycleCountOrderByAggregateInput = {
    id?: SortOrder
    goal?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    numMicros?: SortOrder
    userId?: SortOrder
    isActive?: SortOrder
  }

  export type MesocycleAvgOrderByAggregateInput = {
    startDate?: SortOrder
    endDate?: SortOrder
    numMicros?: SortOrder
  }

  export type MesocycleMaxOrderByAggregateInput = {
    id?: SortOrder
    goal?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    numMicros?: SortOrder
    userId?: SortOrder
    isActive?: SortOrder
  }

  export type MesocycleMinOrderByAggregateInput = {
    id?: SortOrder
    goal?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    numMicros?: SortOrder
    userId?: SortOrder
    isActive?: SortOrder
  }

  export type MesocycleSumOrderByAggregateInput = {
    startDate?: SortOrder
    endDate?: SortOrder
    numMicros?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumCycleSchemaFilter<$PrismaModel = never> = {
    equals?: $Enums.CycleSchema | EnumCycleSchemaFieldRefInput<$PrismaModel>
    in?: $Enums.CycleSchema[] | ListEnumCycleSchemaFieldRefInput<$PrismaModel>
    notIn?: $Enums.CycleSchema[] | ListEnumCycleSchemaFieldRefInput<$PrismaModel>
    not?: NestedEnumCycleSchemaFilter<$PrismaModel> | $Enums.CycleSchema
  }

  export type MesocycleRelationFilter = {
    is?: MesocycleWhereInput
    isNot?: MesocycleWhereInput
  }

  export type TrainingDayListRelationFilter = {
    every?: TrainingDayWhereInput
    some?: TrainingDayWhereInput
    none?: TrainingDayWhereInput
  }

  export type TrainingDayOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MicrocycleCountOrderByAggregateInput = {
    id?: SortOrder
    goal?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    schema?: SortOrder
    description?: SortOrder
    mesoId?: SortOrder
  }

  export type MicrocycleAvgOrderByAggregateInput = {
    startDate?: SortOrder
    endDate?: SortOrder
  }

  export type MicrocycleMaxOrderByAggregateInput = {
    id?: SortOrder
    goal?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    schema?: SortOrder
    description?: SortOrder
    mesoId?: SortOrder
  }

  export type MicrocycleMinOrderByAggregateInput = {
    id?: SortOrder
    goal?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    schema?: SortOrder
    description?: SortOrder
    mesoId?: SortOrder
  }

  export type MicrocycleSumOrderByAggregateInput = {
    startDate?: SortOrder
    endDate?: SortOrder
  }

  export type EnumCycleSchemaWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CycleSchema | EnumCycleSchemaFieldRefInput<$PrismaModel>
    in?: $Enums.CycleSchema[] | ListEnumCycleSchemaFieldRefInput<$PrismaModel>
    notIn?: $Enums.CycleSchema[] | ListEnumCycleSchemaFieldRefInput<$PrismaModel>
    not?: NestedEnumCycleSchemaWithAggregatesFilter<$PrismaModel> | $Enums.CycleSchema
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCycleSchemaFilter<$PrismaModel>
    _max?: NestedEnumCycleSchemaFilter<$PrismaModel>
  }

  export type RoutineListRelationFilter = {
    every?: RoutineWhereInput
    some?: RoutineWhereInput
    none?: RoutineWhereInput
  }

  export type MicrocycleRelationFilter = {
    is?: MicrocycleWhereInput
    isNot?: MicrocycleWhereInput
  }

  export type RecoveryLevelNullableRelationFilter = {
    is?: RecoveryLevelWhereInput | null
    isNot?: RecoveryLevelWhereInput | null
  }

  export type ExerciseLogListRelationFilter = {
    every?: ExerciseLogWhereInput
    some?: ExerciseLogWhereInput
    none?: ExerciseLogWhereInput
  }

  export type NoteNullableRelationFilter = {
    is?: NoteWhereInput | null
    isNot?: NoteWhereInput | null
  }

  export type RoutineOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExerciseLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TrainingDayCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    sortOrder?: SortOrder
    microcycleId?: SortOrder
    recoveryLevelId?: SortOrder
    noteId?: SortOrder
  }

  export type TrainingDayAvgOrderByAggregateInput = {
    date?: SortOrder
  }

  export type TrainingDayMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    sortOrder?: SortOrder
    microcycleId?: SortOrder
    recoveryLevelId?: SortOrder
    noteId?: SortOrder
  }

  export type TrainingDayMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    sortOrder?: SortOrder
    microcycleId?: SortOrder
    recoveryLevelId?: SortOrder
    noteId?: SortOrder
  }

  export type TrainingDaySumOrderByAggregateInput = {
    date?: SortOrder
  }

  export type EnumRoutineTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.RoutineType | EnumRoutineTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RoutineType[] | ListEnumRoutineTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoutineType[] | ListEnumRoutineTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRoutineTypeFilter<$PrismaModel> | $Enums.RoutineType
  }

  export type ExerciseListRelationFilter = {
    every?: ExerciseWhereInput
    some?: ExerciseWhereInput
    none?: ExerciseWhereInput
  }

  export type RoutineSubtypeNullableRelationFilter = {
    is?: RoutineSubtypeWhereInput | null
    isNot?: RoutineSubtypeWhereInput | null
  }

  export type ExerciseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoutineCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    duration?: SortOrder
    type?: SortOrder
    sortOrder?: SortOrder
    routineSubtypeId?: SortOrder
    noteId?: SortOrder
  }

  export type RoutineAvgOrderByAggregateInput = {
    duration?: SortOrder
  }

  export type RoutineMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    duration?: SortOrder
    type?: SortOrder
    sortOrder?: SortOrder
    routineSubtypeId?: SortOrder
    noteId?: SortOrder
  }

  export type RoutineMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    duration?: SortOrder
    type?: SortOrder
    sortOrder?: SortOrder
    routineSubtypeId?: SortOrder
    noteId?: SortOrder
  }

  export type RoutineSumOrderByAggregateInput = {
    duration?: SortOrder
  }

  export type EnumRoutineTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RoutineType | EnumRoutineTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RoutineType[] | ListEnumRoutineTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoutineType[] | ListEnumRoutineTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRoutineTypeWithAggregatesFilter<$PrismaModel> | $Enums.RoutineType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoutineTypeFilter<$PrismaModel>
    _max?: NestedEnumRoutineTypeFilter<$PrismaModel>
  }

  export type RoutineSubtypeCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
  }

  export type RoutineSubtypeMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
  }

  export type RoutineSubtypeMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
  }

  export type EnumExerciseTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ExerciseType | EnumExerciseTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ExerciseType[] | ListEnumExerciseTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ExerciseType[] | ListEnumExerciseTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumExerciseTypeFilter<$PrismaModel> | $Enums.ExerciseType
  }

  export type EnumEquipmentFilter<$PrismaModel = never> = {
    equals?: $Enums.Equipment | EnumEquipmentFieldRefInput<$PrismaModel>
    in?: $Enums.Equipment[] | ListEnumEquipmentFieldRefInput<$PrismaModel>
    notIn?: $Enums.Equipment[] | ListEnumEquipmentFieldRefInput<$PrismaModel>
    not?: NestedEnumEquipmentFilter<$PrismaModel> | $Enums.Equipment
  }

  export type ExerciseCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    equipment?: SortOrder
    imageId?: SortOrder
    noteId?: SortOrder
  }

  export type ExerciseAvgOrderByAggregateInput = {
    imageId?: SortOrder
  }

  export type ExerciseMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    equipment?: SortOrder
    imageId?: SortOrder
    noteId?: SortOrder
  }

  export type ExerciseMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    equipment?: SortOrder
    imageId?: SortOrder
    noteId?: SortOrder
  }

  export type ExerciseSumOrderByAggregateInput = {
    imageId?: SortOrder
  }

  export type EnumExerciseTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ExerciseType | EnumExerciseTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ExerciseType[] | ListEnumExerciseTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ExerciseType[] | ListEnumExerciseTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumExerciseTypeWithAggregatesFilter<$PrismaModel> | $Enums.ExerciseType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumExerciseTypeFilter<$PrismaModel>
    _max?: NestedEnumExerciseTypeFilter<$PrismaModel>
  }

  export type EnumEquipmentWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Equipment | EnumEquipmentFieldRefInput<$PrismaModel>
    in?: $Enums.Equipment[] | ListEnumEquipmentFieldRefInput<$PrismaModel>
    notIn?: $Enums.Equipment[] | ListEnumEquipmentFieldRefInput<$PrismaModel>
    not?: NestedEnumEquipmentWithAggregatesFilter<$PrismaModel> | $Enums.Equipment
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEquipmentFilter<$PrismaModel>
    _max?: NestedEnumEquipmentFilter<$PrismaModel>
  }

  export type ExerciseRelationFilter = {
    is?: ExerciseWhereInput
    isNot?: ExerciseWhereInput
  }

  export type ClimbLogListRelationFilter = {
    every?: ClimbLogWhereInput
    some?: ClimbLogWhereInput
    none?: ClimbLogWhereInput
  }

  export type TrainingDayNullableRelationFilter = {
    is?: TrainingDayWhereInput | null
    isNot?: TrainingDayWhereInput | null
  }

  export type ClimbLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExerciseLogCountOrderByAggregateInput = {
    id?: SortOrder
    exerciseId?: SortOrder
    sets?: SortOrder
    reps?: SortOrder
    weight?: SortOrder
    duration?: SortOrder
    noteId?: SortOrder
    trainingDayId?: SortOrder
  }

  export type ExerciseLogAvgOrderByAggregateInput = {
    sets?: SortOrder
    reps?: SortOrder
    weight?: SortOrder
    duration?: SortOrder
  }

  export type ExerciseLogMaxOrderByAggregateInput = {
    id?: SortOrder
    exerciseId?: SortOrder
    sets?: SortOrder
    reps?: SortOrder
    weight?: SortOrder
    duration?: SortOrder
    noteId?: SortOrder
    trainingDayId?: SortOrder
  }

  export type ExerciseLogMinOrderByAggregateInput = {
    id?: SortOrder
    exerciseId?: SortOrder
    sets?: SortOrder
    reps?: SortOrder
    weight?: SortOrder
    duration?: SortOrder
    noteId?: SortOrder
    trainingDayId?: SortOrder
  }

  export type ExerciseLogSumOrderByAggregateInput = {
    sets?: SortOrder
    reps?: SortOrder
    weight?: SortOrder
    duration?: SortOrder
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type LocationNullableRelationFilter = {
    is?: LocationWhereInput | null
    isNot?: LocationWhereInput | null
  }

  export type ExerciseLogNullableRelationFilter = {
    is?: ExerciseLogWhereInput | null
    isNot?: ExerciseLogWhereInput | null
  }

  export type ClimbLogCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    grade?: SortOrder
    project?: SortOrder
    attempts?: SortOrder
    flashed?: SortOrder
    locationId?: SortOrder
    noteId?: SortOrder
    workoutLogId?: SortOrder
  }

  export type ClimbLogAvgOrderByAggregateInput = {
    grade?: SortOrder
    attempts?: SortOrder
  }

  export type ClimbLogMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    grade?: SortOrder
    project?: SortOrder
    attempts?: SortOrder
    flashed?: SortOrder
    locationId?: SortOrder
    noteId?: SortOrder
    workoutLogId?: SortOrder
  }

  export type ClimbLogMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    grade?: SortOrder
    project?: SortOrder
    attempts?: SortOrder
    flashed?: SortOrder
    locationId?: SortOrder
    noteId?: SortOrder
    workoutLogId?: SortOrder
  }

  export type ClimbLogSumOrderByAggregateInput = {
    grade?: SortOrder
    attempts?: SortOrder
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type LocationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    noteId?: SortOrder
  }

  export type LocationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    noteId?: SortOrder
  }

  export type LocationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    noteId?: SortOrder
  }

  export type RecoveryLevelCountOrderByAggregateInput = {
    id?: SortOrder
    level?: SortOrder
  }

  export type RecoveryLevelMaxOrderByAggregateInput = {
    id?: SortOrder
    level?: SortOrder
  }

  export type RecoveryLevelMinOrderByAggregateInput = {
    id?: SortOrder
    level?: SortOrder
  }

  export type LocationListRelationFilter = {
    every?: LocationWhereInput
    some?: LocationWhereInput
    none?: LocationWhereInput
  }

  export type LocationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NoteCountOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
  }

  export type NoteMaxOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
  }

  export type NoteMinOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
  }

  export type UserCreateNestedOneWithoutAccountsInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    upsert?: UserUpsertWithoutAccountsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountsInput, UserUpdateWithoutAccountsInput>, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type MesocycleCreateNestedManyWithoutUserInput = {
    create?: XOR<MesocycleCreateWithoutUserInput, MesocycleUncheckedCreateWithoutUserInput> | MesocycleCreateWithoutUserInput[] | MesocycleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MesocycleCreateOrConnectWithoutUserInput | MesocycleCreateOrConnectWithoutUserInput[]
    createMany?: MesocycleCreateManyUserInputEnvelope
    connect?: MesocycleWhereUniqueInput | MesocycleWhereUniqueInput[]
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type MesocycleUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MesocycleCreateWithoutUserInput, MesocycleUncheckedCreateWithoutUserInput> | MesocycleCreateWithoutUserInput[] | MesocycleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MesocycleCreateOrConnectWithoutUserInput | MesocycleCreateOrConnectWithoutUserInput[]
    createMany?: MesocycleCreateManyUserInputEnvelope
    connect?: MesocycleWhereUniqueInput | MesocycleWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type MesocycleUpdateManyWithoutUserNestedInput = {
    create?: XOR<MesocycleCreateWithoutUserInput, MesocycleUncheckedCreateWithoutUserInput> | MesocycleCreateWithoutUserInput[] | MesocycleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MesocycleCreateOrConnectWithoutUserInput | MesocycleCreateOrConnectWithoutUserInput[]
    upsert?: MesocycleUpsertWithWhereUniqueWithoutUserInput | MesocycleUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MesocycleCreateManyUserInputEnvelope
    set?: MesocycleWhereUniqueInput | MesocycleWhereUniqueInput[]
    disconnect?: MesocycleWhereUniqueInput | MesocycleWhereUniqueInput[]
    delete?: MesocycleWhereUniqueInput | MesocycleWhereUniqueInput[]
    connect?: MesocycleWhereUniqueInput | MesocycleWhereUniqueInput[]
    update?: MesocycleUpdateWithWhereUniqueWithoutUserInput | MesocycleUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MesocycleUpdateManyWithWhereWithoutUserInput | MesocycleUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MesocycleScalarWhereInput | MesocycleScalarWhereInput[]
  }

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type MesocycleUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MesocycleCreateWithoutUserInput, MesocycleUncheckedCreateWithoutUserInput> | MesocycleCreateWithoutUserInput[] | MesocycleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MesocycleCreateOrConnectWithoutUserInput | MesocycleCreateOrConnectWithoutUserInput[]
    upsert?: MesocycleUpsertWithWhereUniqueWithoutUserInput | MesocycleUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MesocycleCreateManyUserInputEnvelope
    set?: MesocycleWhereUniqueInput | MesocycleWhereUniqueInput[]
    disconnect?: MesocycleWhereUniqueInput | MesocycleWhereUniqueInput[]
    delete?: MesocycleWhereUniqueInput | MesocycleWhereUniqueInput[]
    connect?: MesocycleWhereUniqueInput | MesocycleWhereUniqueInput[]
    update?: MesocycleUpdateWithWhereUniqueWithoutUserInput | MesocycleUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MesocycleUpdateManyWithWhereWithoutUserInput | MesocycleUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MesocycleScalarWhereInput | MesocycleScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutMesocyclesInput = {
    create?: XOR<UserCreateWithoutMesocyclesInput, UserUncheckedCreateWithoutMesocyclesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMesocyclesInput
    connect?: UserWhereUniqueInput
  }

  export type MicrocycleCreateNestedManyWithoutMesocycleInput = {
    create?: XOR<MicrocycleCreateWithoutMesocycleInput, MicrocycleUncheckedCreateWithoutMesocycleInput> | MicrocycleCreateWithoutMesocycleInput[] | MicrocycleUncheckedCreateWithoutMesocycleInput[]
    connectOrCreate?: MicrocycleCreateOrConnectWithoutMesocycleInput | MicrocycleCreateOrConnectWithoutMesocycleInput[]
    createMany?: MicrocycleCreateManyMesocycleInputEnvelope
    connect?: MicrocycleWhereUniqueInput | MicrocycleWhereUniqueInput[]
  }

  export type MicrocycleUncheckedCreateNestedManyWithoutMesocycleInput = {
    create?: XOR<MicrocycleCreateWithoutMesocycleInput, MicrocycleUncheckedCreateWithoutMesocycleInput> | MicrocycleCreateWithoutMesocycleInput[] | MicrocycleUncheckedCreateWithoutMesocycleInput[]
    connectOrCreate?: MicrocycleCreateOrConnectWithoutMesocycleInput | MicrocycleCreateOrConnectWithoutMesocycleInput[]
    createMany?: MicrocycleCreateManyMesocycleInputEnvelope
    connect?: MicrocycleWhereUniqueInput | MicrocycleWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutMesocyclesNestedInput = {
    create?: XOR<UserCreateWithoutMesocyclesInput, UserUncheckedCreateWithoutMesocyclesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMesocyclesInput
    upsert?: UserUpsertWithoutMesocyclesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMesocyclesInput, UserUpdateWithoutMesocyclesInput>, UserUncheckedUpdateWithoutMesocyclesInput>
  }

  export type MicrocycleUpdateManyWithoutMesocycleNestedInput = {
    create?: XOR<MicrocycleCreateWithoutMesocycleInput, MicrocycleUncheckedCreateWithoutMesocycleInput> | MicrocycleCreateWithoutMesocycleInput[] | MicrocycleUncheckedCreateWithoutMesocycleInput[]
    connectOrCreate?: MicrocycleCreateOrConnectWithoutMesocycleInput | MicrocycleCreateOrConnectWithoutMesocycleInput[]
    upsert?: MicrocycleUpsertWithWhereUniqueWithoutMesocycleInput | MicrocycleUpsertWithWhereUniqueWithoutMesocycleInput[]
    createMany?: MicrocycleCreateManyMesocycleInputEnvelope
    set?: MicrocycleWhereUniqueInput | MicrocycleWhereUniqueInput[]
    disconnect?: MicrocycleWhereUniqueInput | MicrocycleWhereUniqueInput[]
    delete?: MicrocycleWhereUniqueInput | MicrocycleWhereUniqueInput[]
    connect?: MicrocycleWhereUniqueInput | MicrocycleWhereUniqueInput[]
    update?: MicrocycleUpdateWithWhereUniqueWithoutMesocycleInput | MicrocycleUpdateWithWhereUniqueWithoutMesocycleInput[]
    updateMany?: MicrocycleUpdateManyWithWhereWithoutMesocycleInput | MicrocycleUpdateManyWithWhereWithoutMesocycleInput[]
    deleteMany?: MicrocycleScalarWhereInput | MicrocycleScalarWhereInput[]
  }

  export type MicrocycleUncheckedUpdateManyWithoutMesocycleNestedInput = {
    create?: XOR<MicrocycleCreateWithoutMesocycleInput, MicrocycleUncheckedCreateWithoutMesocycleInput> | MicrocycleCreateWithoutMesocycleInput[] | MicrocycleUncheckedCreateWithoutMesocycleInput[]
    connectOrCreate?: MicrocycleCreateOrConnectWithoutMesocycleInput | MicrocycleCreateOrConnectWithoutMesocycleInput[]
    upsert?: MicrocycleUpsertWithWhereUniqueWithoutMesocycleInput | MicrocycleUpsertWithWhereUniqueWithoutMesocycleInput[]
    createMany?: MicrocycleCreateManyMesocycleInputEnvelope
    set?: MicrocycleWhereUniqueInput | MicrocycleWhereUniqueInput[]
    disconnect?: MicrocycleWhereUniqueInput | MicrocycleWhereUniqueInput[]
    delete?: MicrocycleWhereUniqueInput | MicrocycleWhereUniqueInput[]
    connect?: MicrocycleWhereUniqueInput | MicrocycleWhereUniqueInput[]
    update?: MicrocycleUpdateWithWhereUniqueWithoutMesocycleInput | MicrocycleUpdateWithWhereUniqueWithoutMesocycleInput[]
    updateMany?: MicrocycleUpdateManyWithWhereWithoutMesocycleInput | MicrocycleUpdateManyWithWhereWithoutMesocycleInput[]
    deleteMany?: MicrocycleScalarWhereInput | MicrocycleScalarWhereInput[]
  }

  export type MesocycleCreateNestedOneWithoutMicrocyclesInput = {
    create?: XOR<MesocycleCreateWithoutMicrocyclesInput, MesocycleUncheckedCreateWithoutMicrocyclesInput>
    connectOrCreate?: MesocycleCreateOrConnectWithoutMicrocyclesInput
    connect?: MesocycleWhereUniqueInput
  }

  export type TrainingDayCreateNestedManyWithoutMicrocycleInput = {
    create?: XOR<TrainingDayCreateWithoutMicrocycleInput, TrainingDayUncheckedCreateWithoutMicrocycleInput> | TrainingDayCreateWithoutMicrocycleInput[] | TrainingDayUncheckedCreateWithoutMicrocycleInput[]
    connectOrCreate?: TrainingDayCreateOrConnectWithoutMicrocycleInput | TrainingDayCreateOrConnectWithoutMicrocycleInput[]
    createMany?: TrainingDayCreateManyMicrocycleInputEnvelope
    connect?: TrainingDayWhereUniqueInput | TrainingDayWhereUniqueInput[]
  }

  export type TrainingDayUncheckedCreateNestedManyWithoutMicrocycleInput = {
    create?: XOR<TrainingDayCreateWithoutMicrocycleInput, TrainingDayUncheckedCreateWithoutMicrocycleInput> | TrainingDayCreateWithoutMicrocycleInput[] | TrainingDayUncheckedCreateWithoutMicrocycleInput[]
    connectOrCreate?: TrainingDayCreateOrConnectWithoutMicrocycleInput | TrainingDayCreateOrConnectWithoutMicrocycleInput[]
    createMany?: TrainingDayCreateManyMicrocycleInputEnvelope
    connect?: TrainingDayWhereUniqueInput | TrainingDayWhereUniqueInput[]
  }

  export type EnumCycleSchemaFieldUpdateOperationsInput = {
    set?: $Enums.CycleSchema
  }

  export type MesocycleUpdateOneRequiredWithoutMicrocyclesNestedInput = {
    create?: XOR<MesocycleCreateWithoutMicrocyclesInput, MesocycleUncheckedCreateWithoutMicrocyclesInput>
    connectOrCreate?: MesocycleCreateOrConnectWithoutMicrocyclesInput
    upsert?: MesocycleUpsertWithoutMicrocyclesInput
    connect?: MesocycleWhereUniqueInput
    update?: XOR<XOR<MesocycleUpdateToOneWithWhereWithoutMicrocyclesInput, MesocycleUpdateWithoutMicrocyclesInput>, MesocycleUncheckedUpdateWithoutMicrocyclesInput>
  }

  export type TrainingDayUpdateManyWithoutMicrocycleNestedInput = {
    create?: XOR<TrainingDayCreateWithoutMicrocycleInput, TrainingDayUncheckedCreateWithoutMicrocycleInput> | TrainingDayCreateWithoutMicrocycleInput[] | TrainingDayUncheckedCreateWithoutMicrocycleInput[]
    connectOrCreate?: TrainingDayCreateOrConnectWithoutMicrocycleInput | TrainingDayCreateOrConnectWithoutMicrocycleInput[]
    upsert?: TrainingDayUpsertWithWhereUniqueWithoutMicrocycleInput | TrainingDayUpsertWithWhereUniqueWithoutMicrocycleInput[]
    createMany?: TrainingDayCreateManyMicrocycleInputEnvelope
    set?: TrainingDayWhereUniqueInput | TrainingDayWhereUniqueInput[]
    disconnect?: TrainingDayWhereUniqueInput | TrainingDayWhereUniqueInput[]
    delete?: TrainingDayWhereUniqueInput | TrainingDayWhereUniqueInput[]
    connect?: TrainingDayWhereUniqueInput | TrainingDayWhereUniqueInput[]
    update?: TrainingDayUpdateWithWhereUniqueWithoutMicrocycleInput | TrainingDayUpdateWithWhereUniqueWithoutMicrocycleInput[]
    updateMany?: TrainingDayUpdateManyWithWhereWithoutMicrocycleInput | TrainingDayUpdateManyWithWhereWithoutMicrocycleInput[]
    deleteMany?: TrainingDayScalarWhereInput | TrainingDayScalarWhereInput[]
  }

  export type TrainingDayUncheckedUpdateManyWithoutMicrocycleNestedInput = {
    create?: XOR<TrainingDayCreateWithoutMicrocycleInput, TrainingDayUncheckedCreateWithoutMicrocycleInput> | TrainingDayCreateWithoutMicrocycleInput[] | TrainingDayUncheckedCreateWithoutMicrocycleInput[]
    connectOrCreate?: TrainingDayCreateOrConnectWithoutMicrocycleInput | TrainingDayCreateOrConnectWithoutMicrocycleInput[]
    upsert?: TrainingDayUpsertWithWhereUniqueWithoutMicrocycleInput | TrainingDayUpsertWithWhereUniqueWithoutMicrocycleInput[]
    createMany?: TrainingDayCreateManyMicrocycleInputEnvelope
    set?: TrainingDayWhereUniqueInput | TrainingDayWhereUniqueInput[]
    disconnect?: TrainingDayWhereUniqueInput | TrainingDayWhereUniqueInput[]
    delete?: TrainingDayWhereUniqueInput | TrainingDayWhereUniqueInput[]
    connect?: TrainingDayWhereUniqueInput | TrainingDayWhereUniqueInput[]
    update?: TrainingDayUpdateWithWhereUniqueWithoutMicrocycleInput | TrainingDayUpdateWithWhereUniqueWithoutMicrocycleInput[]
    updateMany?: TrainingDayUpdateManyWithWhereWithoutMicrocycleInput | TrainingDayUpdateManyWithWhereWithoutMicrocycleInput[]
    deleteMany?: TrainingDayScalarWhereInput | TrainingDayScalarWhereInput[]
  }

  export type RoutineCreateNestedManyWithoutTrainingDaysInput = {
    create?: XOR<RoutineCreateWithoutTrainingDaysInput, RoutineUncheckedCreateWithoutTrainingDaysInput> | RoutineCreateWithoutTrainingDaysInput[] | RoutineUncheckedCreateWithoutTrainingDaysInput[]
    connectOrCreate?: RoutineCreateOrConnectWithoutTrainingDaysInput | RoutineCreateOrConnectWithoutTrainingDaysInput[]
    connect?: RoutineWhereUniqueInput | RoutineWhereUniqueInput[]
  }

  export type MicrocycleCreateNestedOneWithoutTrainingDaysInput = {
    create?: XOR<MicrocycleCreateWithoutTrainingDaysInput, MicrocycleUncheckedCreateWithoutTrainingDaysInput>
    connectOrCreate?: MicrocycleCreateOrConnectWithoutTrainingDaysInput
    connect?: MicrocycleWhereUniqueInput
  }

  export type RecoveryLevelCreateNestedOneWithoutTrainingDaysInput = {
    create?: XOR<RecoveryLevelCreateWithoutTrainingDaysInput, RecoveryLevelUncheckedCreateWithoutTrainingDaysInput>
    connectOrCreate?: RecoveryLevelCreateOrConnectWithoutTrainingDaysInput
    connect?: RecoveryLevelWhereUniqueInput
  }

  export type ExerciseLogCreateNestedManyWithoutTrainingDayInput = {
    create?: XOR<ExerciseLogCreateWithoutTrainingDayInput, ExerciseLogUncheckedCreateWithoutTrainingDayInput> | ExerciseLogCreateWithoutTrainingDayInput[] | ExerciseLogUncheckedCreateWithoutTrainingDayInput[]
    connectOrCreate?: ExerciseLogCreateOrConnectWithoutTrainingDayInput | ExerciseLogCreateOrConnectWithoutTrainingDayInput[]
    createMany?: ExerciseLogCreateManyTrainingDayInputEnvelope
    connect?: ExerciseLogWhereUniqueInput | ExerciseLogWhereUniqueInput[]
  }

  export type NoteCreateNestedOneWithoutTrainingDaysInput = {
    create?: XOR<NoteCreateWithoutTrainingDaysInput, NoteUncheckedCreateWithoutTrainingDaysInput>
    connectOrCreate?: NoteCreateOrConnectWithoutTrainingDaysInput
    connect?: NoteWhereUniqueInput
  }

  export type RoutineUncheckedCreateNestedManyWithoutTrainingDaysInput = {
    create?: XOR<RoutineCreateWithoutTrainingDaysInput, RoutineUncheckedCreateWithoutTrainingDaysInput> | RoutineCreateWithoutTrainingDaysInput[] | RoutineUncheckedCreateWithoutTrainingDaysInput[]
    connectOrCreate?: RoutineCreateOrConnectWithoutTrainingDaysInput | RoutineCreateOrConnectWithoutTrainingDaysInput[]
    connect?: RoutineWhereUniqueInput | RoutineWhereUniqueInput[]
  }

  export type ExerciseLogUncheckedCreateNestedManyWithoutTrainingDayInput = {
    create?: XOR<ExerciseLogCreateWithoutTrainingDayInput, ExerciseLogUncheckedCreateWithoutTrainingDayInput> | ExerciseLogCreateWithoutTrainingDayInput[] | ExerciseLogUncheckedCreateWithoutTrainingDayInput[]
    connectOrCreate?: ExerciseLogCreateOrConnectWithoutTrainingDayInput | ExerciseLogCreateOrConnectWithoutTrainingDayInput[]
    createMany?: ExerciseLogCreateManyTrainingDayInputEnvelope
    connect?: ExerciseLogWhereUniqueInput | ExerciseLogWhereUniqueInput[]
  }

  export type RoutineUpdateManyWithoutTrainingDaysNestedInput = {
    create?: XOR<RoutineCreateWithoutTrainingDaysInput, RoutineUncheckedCreateWithoutTrainingDaysInput> | RoutineCreateWithoutTrainingDaysInput[] | RoutineUncheckedCreateWithoutTrainingDaysInput[]
    connectOrCreate?: RoutineCreateOrConnectWithoutTrainingDaysInput | RoutineCreateOrConnectWithoutTrainingDaysInput[]
    upsert?: RoutineUpsertWithWhereUniqueWithoutTrainingDaysInput | RoutineUpsertWithWhereUniqueWithoutTrainingDaysInput[]
    set?: RoutineWhereUniqueInput | RoutineWhereUniqueInput[]
    disconnect?: RoutineWhereUniqueInput | RoutineWhereUniqueInput[]
    delete?: RoutineWhereUniqueInput | RoutineWhereUniqueInput[]
    connect?: RoutineWhereUniqueInput | RoutineWhereUniqueInput[]
    update?: RoutineUpdateWithWhereUniqueWithoutTrainingDaysInput | RoutineUpdateWithWhereUniqueWithoutTrainingDaysInput[]
    updateMany?: RoutineUpdateManyWithWhereWithoutTrainingDaysInput | RoutineUpdateManyWithWhereWithoutTrainingDaysInput[]
    deleteMany?: RoutineScalarWhereInput | RoutineScalarWhereInput[]
  }

  export type MicrocycleUpdateOneRequiredWithoutTrainingDaysNestedInput = {
    create?: XOR<MicrocycleCreateWithoutTrainingDaysInput, MicrocycleUncheckedCreateWithoutTrainingDaysInput>
    connectOrCreate?: MicrocycleCreateOrConnectWithoutTrainingDaysInput
    upsert?: MicrocycleUpsertWithoutTrainingDaysInput
    connect?: MicrocycleWhereUniqueInput
    update?: XOR<XOR<MicrocycleUpdateToOneWithWhereWithoutTrainingDaysInput, MicrocycleUpdateWithoutTrainingDaysInput>, MicrocycleUncheckedUpdateWithoutTrainingDaysInput>
  }

  export type RecoveryLevelUpdateOneWithoutTrainingDaysNestedInput = {
    create?: XOR<RecoveryLevelCreateWithoutTrainingDaysInput, RecoveryLevelUncheckedCreateWithoutTrainingDaysInput>
    connectOrCreate?: RecoveryLevelCreateOrConnectWithoutTrainingDaysInput
    upsert?: RecoveryLevelUpsertWithoutTrainingDaysInput
    disconnect?: RecoveryLevelWhereInput | boolean
    delete?: RecoveryLevelWhereInput | boolean
    connect?: RecoveryLevelWhereUniqueInput
    update?: XOR<XOR<RecoveryLevelUpdateToOneWithWhereWithoutTrainingDaysInput, RecoveryLevelUpdateWithoutTrainingDaysInput>, RecoveryLevelUncheckedUpdateWithoutTrainingDaysInput>
  }

  export type ExerciseLogUpdateManyWithoutTrainingDayNestedInput = {
    create?: XOR<ExerciseLogCreateWithoutTrainingDayInput, ExerciseLogUncheckedCreateWithoutTrainingDayInput> | ExerciseLogCreateWithoutTrainingDayInput[] | ExerciseLogUncheckedCreateWithoutTrainingDayInput[]
    connectOrCreate?: ExerciseLogCreateOrConnectWithoutTrainingDayInput | ExerciseLogCreateOrConnectWithoutTrainingDayInput[]
    upsert?: ExerciseLogUpsertWithWhereUniqueWithoutTrainingDayInput | ExerciseLogUpsertWithWhereUniqueWithoutTrainingDayInput[]
    createMany?: ExerciseLogCreateManyTrainingDayInputEnvelope
    set?: ExerciseLogWhereUniqueInput | ExerciseLogWhereUniqueInput[]
    disconnect?: ExerciseLogWhereUniqueInput | ExerciseLogWhereUniqueInput[]
    delete?: ExerciseLogWhereUniqueInput | ExerciseLogWhereUniqueInput[]
    connect?: ExerciseLogWhereUniqueInput | ExerciseLogWhereUniqueInput[]
    update?: ExerciseLogUpdateWithWhereUniqueWithoutTrainingDayInput | ExerciseLogUpdateWithWhereUniqueWithoutTrainingDayInput[]
    updateMany?: ExerciseLogUpdateManyWithWhereWithoutTrainingDayInput | ExerciseLogUpdateManyWithWhereWithoutTrainingDayInput[]
    deleteMany?: ExerciseLogScalarWhereInput | ExerciseLogScalarWhereInput[]
  }

  export type NoteUpdateOneWithoutTrainingDaysNestedInput = {
    create?: XOR<NoteCreateWithoutTrainingDaysInput, NoteUncheckedCreateWithoutTrainingDaysInput>
    connectOrCreate?: NoteCreateOrConnectWithoutTrainingDaysInput
    upsert?: NoteUpsertWithoutTrainingDaysInput
    disconnect?: NoteWhereInput | boolean
    delete?: NoteWhereInput | boolean
    connect?: NoteWhereUniqueInput
    update?: XOR<XOR<NoteUpdateToOneWithWhereWithoutTrainingDaysInput, NoteUpdateWithoutTrainingDaysInput>, NoteUncheckedUpdateWithoutTrainingDaysInput>
  }

  export type RoutineUncheckedUpdateManyWithoutTrainingDaysNestedInput = {
    create?: XOR<RoutineCreateWithoutTrainingDaysInput, RoutineUncheckedCreateWithoutTrainingDaysInput> | RoutineCreateWithoutTrainingDaysInput[] | RoutineUncheckedCreateWithoutTrainingDaysInput[]
    connectOrCreate?: RoutineCreateOrConnectWithoutTrainingDaysInput | RoutineCreateOrConnectWithoutTrainingDaysInput[]
    upsert?: RoutineUpsertWithWhereUniqueWithoutTrainingDaysInput | RoutineUpsertWithWhereUniqueWithoutTrainingDaysInput[]
    set?: RoutineWhereUniqueInput | RoutineWhereUniqueInput[]
    disconnect?: RoutineWhereUniqueInput | RoutineWhereUniqueInput[]
    delete?: RoutineWhereUniqueInput | RoutineWhereUniqueInput[]
    connect?: RoutineWhereUniqueInput | RoutineWhereUniqueInput[]
    update?: RoutineUpdateWithWhereUniqueWithoutTrainingDaysInput | RoutineUpdateWithWhereUniqueWithoutTrainingDaysInput[]
    updateMany?: RoutineUpdateManyWithWhereWithoutTrainingDaysInput | RoutineUpdateManyWithWhereWithoutTrainingDaysInput[]
    deleteMany?: RoutineScalarWhereInput | RoutineScalarWhereInput[]
  }

  export type ExerciseLogUncheckedUpdateManyWithoutTrainingDayNestedInput = {
    create?: XOR<ExerciseLogCreateWithoutTrainingDayInput, ExerciseLogUncheckedCreateWithoutTrainingDayInput> | ExerciseLogCreateWithoutTrainingDayInput[] | ExerciseLogUncheckedCreateWithoutTrainingDayInput[]
    connectOrCreate?: ExerciseLogCreateOrConnectWithoutTrainingDayInput | ExerciseLogCreateOrConnectWithoutTrainingDayInput[]
    upsert?: ExerciseLogUpsertWithWhereUniqueWithoutTrainingDayInput | ExerciseLogUpsertWithWhereUniqueWithoutTrainingDayInput[]
    createMany?: ExerciseLogCreateManyTrainingDayInputEnvelope
    set?: ExerciseLogWhereUniqueInput | ExerciseLogWhereUniqueInput[]
    disconnect?: ExerciseLogWhereUniqueInput | ExerciseLogWhereUniqueInput[]
    delete?: ExerciseLogWhereUniqueInput | ExerciseLogWhereUniqueInput[]
    connect?: ExerciseLogWhereUniqueInput | ExerciseLogWhereUniqueInput[]
    update?: ExerciseLogUpdateWithWhereUniqueWithoutTrainingDayInput | ExerciseLogUpdateWithWhereUniqueWithoutTrainingDayInput[]
    updateMany?: ExerciseLogUpdateManyWithWhereWithoutTrainingDayInput | ExerciseLogUpdateManyWithWhereWithoutTrainingDayInput[]
    deleteMany?: ExerciseLogScalarWhereInput | ExerciseLogScalarWhereInput[]
  }

  export type ExerciseCreateNestedManyWithoutRoutinesInput = {
    create?: XOR<ExerciseCreateWithoutRoutinesInput, ExerciseUncheckedCreateWithoutRoutinesInput> | ExerciseCreateWithoutRoutinesInput[] | ExerciseUncheckedCreateWithoutRoutinesInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutRoutinesInput | ExerciseCreateOrConnectWithoutRoutinesInput[]
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
  }

  export type TrainingDayCreateNestedManyWithoutRoutinesInput = {
    create?: XOR<TrainingDayCreateWithoutRoutinesInput, TrainingDayUncheckedCreateWithoutRoutinesInput> | TrainingDayCreateWithoutRoutinesInput[] | TrainingDayUncheckedCreateWithoutRoutinesInput[]
    connectOrCreate?: TrainingDayCreateOrConnectWithoutRoutinesInput | TrainingDayCreateOrConnectWithoutRoutinesInput[]
    connect?: TrainingDayWhereUniqueInput | TrainingDayWhereUniqueInput[]
  }

  export type RoutineSubtypeCreateNestedOneWithoutRoutineInput = {
    create?: XOR<RoutineSubtypeCreateWithoutRoutineInput, RoutineSubtypeUncheckedCreateWithoutRoutineInput>
    connectOrCreate?: RoutineSubtypeCreateOrConnectWithoutRoutineInput
    connect?: RoutineSubtypeWhereUniqueInput
  }

  export type NoteCreateNestedOneWithoutRoutinesInput = {
    create?: XOR<NoteCreateWithoutRoutinesInput, NoteUncheckedCreateWithoutRoutinesInput>
    connectOrCreate?: NoteCreateOrConnectWithoutRoutinesInput
    connect?: NoteWhereUniqueInput
  }

  export type ExerciseUncheckedCreateNestedManyWithoutRoutinesInput = {
    create?: XOR<ExerciseCreateWithoutRoutinesInput, ExerciseUncheckedCreateWithoutRoutinesInput> | ExerciseCreateWithoutRoutinesInput[] | ExerciseUncheckedCreateWithoutRoutinesInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutRoutinesInput | ExerciseCreateOrConnectWithoutRoutinesInput[]
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
  }

  export type TrainingDayUncheckedCreateNestedManyWithoutRoutinesInput = {
    create?: XOR<TrainingDayCreateWithoutRoutinesInput, TrainingDayUncheckedCreateWithoutRoutinesInput> | TrainingDayCreateWithoutRoutinesInput[] | TrainingDayUncheckedCreateWithoutRoutinesInput[]
    connectOrCreate?: TrainingDayCreateOrConnectWithoutRoutinesInput | TrainingDayCreateOrConnectWithoutRoutinesInput[]
    connect?: TrainingDayWhereUniqueInput | TrainingDayWhereUniqueInput[]
  }

  export type EnumRoutineTypeFieldUpdateOperationsInput = {
    set?: $Enums.RoutineType
  }

  export type ExerciseUpdateManyWithoutRoutinesNestedInput = {
    create?: XOR<ExerciseCreateWithoutRoutinesInput, ExerciseUncheckedCreateWithoutRoutinesInput> | ExerciseCreateWithoutRoutinesInput[] | ExerciseUncheckedCreateWithoutRoutinesInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutRoutinesInput | ExerciseCreateOrConnectWithoutRoutinesInput[]
    upsert?: ExerciseUpsertWithWhereUniqueWithoutRoutinesInput | ExerciseUpsertWithWhereUniqueWithoutRoutinesInput[]
    set?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    disconnect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    delete?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    update?: ExerciseUpdateWithWhereUniqueWithoutRoutinesInput | ExerciseUpdateWithWhereUniqueWithoutRoutinesInput[]
    updateMany?: ExerciseUpdateManyWithWhereWithoutRoutinesInput | ExerciseUpdateManyWithWhereWithoutRoutinesInput[]
    deleteMany?: ExerciseScalarWhereInput | ExerciseScalarWhereInput[]
  }

  export type TrainingDayUpdateManyWithoutRoutinesNestedInput = {
    create?: XOR<TrainingDayCreateWithoutRoutinesInput, TrainingDayUncheckedCreateWithoutRoutinesInput> | TrainingDayCreateWithoutRoutinesInput[] | TrainingDayUncheckedCreateWithoutRoutinesInput[]
    connectOrCreate?: TrainingDayCreateOrConnectWithoutRoutinesInput | TrainingDayCreateOrConnectWithoutRoutinesInput[]
    upsert?: TrainingDayUpsertWithWhereUniqueWithoutRoutinesInput | TrainingDayUpsertWithWhereUniqueWithoutRoutinesInput[]
    set?: TrainingDayWhereUniqueInput | TrainingDayWhereUniqueInput[]
    disconnect?: TrainingDayWhereUniqueInput | TrainingDayWhereUniqueInput[]
    delete?: TrainingDayWhereUniqueInput | TrainingDayWhereUniqueInput[]
    connect?: TrainingDayWhereUniqueInput | TrainingDayWhereUniqueInput[]
    update?: TrainingDayUpdateWithWhereUniqueWithoutRoutinesInput | TrainingDayUpdateWithWhereUniqueWithoutRoutinesInput[]
    updateMany?: TrainingDayUpdateManyWithWhereWithoutRoutinesInput | TrainingDayUpdateManyWithWhereWithoutRoutinesInput[]
    deleteMany?: TrainingDayScalarWhereInput | TrainingDayScalarWhereInput[]
  }

  export type RoutineSubtypeUpdateOneWithoutRoutineNestedInput = {
    create?: XOR<RoutineSubtypeCreateWithoutRoutineInput, RoutineSubtypeUncheckedCreateWithoutRoutineInput>
    connectOrCreate?: RoutineSubtypeCreateOrConnectWithoutRoutineInput
    upsert?: RoutineSubtypeUpsertWithoutRoutineInput
    disconnect?: RoutineSubtypeWhereInput | boolean
    delete?: RoutineSubtypeWhereInput | boolean
    connect?: RoutineSubtypeWhereUniqueInput
    update?: XOR<XOR<RoutineSubtypeUpdateToOneWithWhereWithoutRoutineInput, RoutineSubtypeUpdateWithoutRoutineInput>, RoutineSubtypeUncheckedUpdateWithoutRoutineInput>
  }

  export type NoteUpdateOneWithoutRoutinesNestedInput = {
    create?: XOR<NoteCreateWithoutRoutinesInput, NoteUncheckedCreateWithoutRoutinesInput>
    connectOrCreate?: NoteCreateOrConnectWithoutRoutinesInput
    upsert?: NoteUpsertWithoutRoutinesInput
    disconnect?: NoteWhereInput | boolean
    delete?: NoteWhereInput | boolean
    connect?: NoteWhereUniqueInput
    update?: XOR<XOR<NoteUpdateToOneWithWhereWithoutRoutinesInput, NoteUpdateWithoutRoutinesInput>, NoteUncheckedUpdateWithoutRoutinesInput>
  }

  export type ExerciseUncheckedUpdateManyWithoutRoutinesNestedInput = {
    create?: XOR<ExerciseCreateWithoutRoutinesInput, ExerciseUncheckedCreateWithoutRoutinesInput> | ExerciseCreateWithoutRoutinesInput[] | ExerciseUncheckedCreateWithoutRoutinesInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutRoutinesInput | ExerciseCreateOrConnectWithoutRoutinesInput[]
    upsert?: ExerciseUpsertWithWhereUniqueWithoutRoutinesInput | ExerciseUpsertWithWhereUniqueWithoutRoutinesInput[]
    set?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    disconnect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    delete?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    update?: ExerciseUpdateWithWhereUniqueWithoutRoutinesInput | ExerciseUpdateWithWhereUniqueWithoutRoutinesInput[]
    updateMany?: ExerciseUpdateManyWithWhereWithoutRoutinesInput | ExerciseUpdateManyWithWhereWithoutRoutinesInput[]
    deleteMany?: ExerciseScalarWhereInput | ExerciseScalarWhereInput[]
  }

  export type TrainingDayUncheckedUpdateManyWithoutRoutinesNestedInput = {
    create?: XOR<TrainingDayCreateWithoutRoutinesInput, TrainingDayUncheckedCreateWithoutRoutinesInput> | TrainingDayCreateWithoutRoutinesInput[] | TrainingDayUncheckedCreateWithoutRoutinesInput[]
    connectOrCreate?: TrainingDayCreateOrConnectWithoutRoutinesInput | TrainingDayCreateOrConnectWithoutRoutinesInput[]
    upsert?: TrainingDayUpsertWithWhereUniqueWithoutRoutinesInput | TrainingDayUpsertWithWhereUniqueWithoutRoutinesInput[]
    set?: TrainingDayWhereUniqueInput | TrainingDayWhereUniqueInput[]
    disconnect?: TrainingDayWhereUniqueInput | TrainingDayWhereUniqueInput[]
    delete?: TrainingDayWhereUniqueInput | TrainingDayWhereUniqueInput[]
    connect?: TrainingDayWhereUniqueInput | TrainingDayWhereUniqueInput[]
    update?: TrainingDayUpdateWithWhereUniqueWithoutRoutinesInput | TrainingDayUpdateWithWhereUniqueWithoutRoutinesInput[]
    updateMany?: TrainingDayUpdateManyWithWhereWithoutRoutinesInput | TrainingDayUpdateManyWithWhereWithoutRoutinesInput[]
    deleteMany?: TrainingDayScalarWhereInput | TrainingDayScalarWhereInput[]
  }

  export type RoutineCreateNestedManyWithoutRoutineSubtypeInput = {
    create?: XOR<RoutineCreateWithoutRoutineSubtypeInput, RoutineUncheckedCreateWithoutRoutineSubtypeInput> | RoutineCreateWithoutRoutineSubtypeInput[] | RoutineUncheckedCreateWithoutRoutineSubtypeInput[]
    connectOrCreate?: RoutineCreateOrConnectWithoutRoutineSubtypeInput | RoutineCreateOrConnectWithoutRoutineSubtypeInput[]
    createMany?: RoutineCreateManyRoutineSubtypeInputEnvelope
    connect?: RoutineWhereUniqueInput | RoutineWhereUniqueInput[]
  }

  export type RoutineUncheckedCreateNestedManyWithoutRoutineSubtypeInput = {
    create?: XOR<RoutineCreateWithoutRoutineSubtypeInput, RoutineUncheckedCreateWithoutRoutineSubtypeInput> | RoutineCreateWithoutRoutineSubtypeInput[] | RoutineUncheckedCreateWithoutRoutineSubtypeInput[]
    connectOrCreate?: RoutineCreateOrConnectWithoutRoutineSubtypeInput | RoutineCreateOrConnectWithoutRoutineSubtypeInput[]
    createMany?: RoutineCreateManyRoutineSubtypeInputEnvelope
    connect?: RoutineWhereUniqueInput | RoutineWhereUniqueInput[]
  }

  export type RoutineUpdateManyWithoutRoutineSubtypeNestedInput = {
    create?: XOR<RoutineCreateWithoutRoutineSubtypeInput, RoutineUncheckedCreateWithoutRoutineSubtypeInput> | RoutineCreateWithoutRoutineSubtypeInput[] | RoutineUncheckedCreateWithoutRoutineSubtypeInput[]
    connectOrCreate?: RoutineCreateOrConnectWithoutRoutineSubtypeInput | RoutineCreateOrConnectWithoutRoutineSubtypeInput[]
    upsert?: RoutineUpsertWithWhereUniqueWithoutRoutineSubtypeInput | RoutineUpsertWithWhereUniqueWithoutRoutineSubtypeInput[]
    createMany?: RoutineCreateManyRoutineSubtypeInputEnvelope
    set?: RoutineWhereUniqueInput | RoutineWhereUniqueInput[]
    disconnect?: RoutineWhereUniqueInput | RoutineWhereUniqueInput[]
    delete?: RoutineWhereUniqueInput | RoutineWhereUniqueInput[]
    connect?: RoutineWhereUniqueInput | RoutineWhereUniqueInput[]
    update?: RoutineUpdateWithWhereUniqueWithoutRoutineSubtypeInput | RoutineUpdateWithWhereUniqueWithoutRoutineSubtypeInput[]
    updateMany?: RoutineUpdateManyWithWhereWithoutRoutineSubtypeInput | RoutineUpdateManyWithWhereWithoutRoutineSubtypeInput[]
    deleteMany?: RoutineScalarWhereInput | RoutineScalarWhereInput[]
  }

  export type RoutineUncheckedUpdateManyWithoutRoutineSubtypeNestedInput = {
    create?: XOR<RoutineCreateWithoutRoutineSubtypeInput, RoutineUncheckedCreateWithoutRoutineSubtypeInput> | RoutineCreateWithoutRoutineSubtypeInput[] | RoutineUncheckedCreateWithoutRoutineSubtypeInput[]
    connectOrCreate?: RoutineCreateOrConnectWithoutRoutineSubtypeInput | RoutineCreateOrConnectWithoutRoutineSubtypeInput[]
    upsert?: RoutineUpsertWithWhereUniqueWithoutRoutineSubtypeInput | RoutineUpsertWithWhereUniqueWithoutRoutineSubtypeInput[]
    createMany?: RoutineCreateManyRoutineSubtypeInputEnvelope
    set?: RoutineWhereUniqueInput | RoutineWhereUniqueInput[]
    disconnect?: RoutineWhereUniqueInput | RoutineWhereUniqueInput[]
    delete?: RoutineWhereUniqueInput | RoutineWhereUniqueInput[]
    connect?: RoutineWhereUniqueInput | RoutineWhereUniqueInput[]
    update?: RoutineUpdateWithWhereUniqueWithoutRoutineSubtypeInput | RoutineUpdateWithWhereUniqueWithoutRoutineSubtypeInput[]
    updateMany?: RoutineUpdateManyWithWhereWithoutRoutineSubtypeInput | RoutineUpdateManyWithWhereWithoutRoutineSubtypeInput[]
    deleteMany?: RoutineScalarWhereInput | RoutineScalarWhereInput[]
  }

  export type NoteCreateNestedOneWithoutExercisesInput = {
    create?: XOR<NoteCreateWithoutExercisesInput, NoteUncheckedCreateWithoutExercisesInput>
    connectOrCreate?: NoteCreateOrConnectWithoutExercisesInput
    connect?: NoteWhereUniqueInput
  }

  export type ExerciseLogCreateNestedManyWithoutExerciseInput = {
    create?: XOR<ExerciseLogCreateWithoutExerciseInput, ExerciseLogUncheckedCreateWithoutExerciseInput> | ExerciseLogCreateWithoutExerciseInput[] | ExerciseLogUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: ExerciseLogCreateOrConnectWithoutExerciseInput | ExerciseLogCreateOrConnectWithoutExerciseInput[]
    createMany?: ExerciseLogCreateManyExerciseInputEnvelope
    connect?: ExerciseLogWhereUniqueInput | ExerciseLogWhereUniqueInput[]
  }

  export type RoutineCreateNestedManyWithoutExercisesInput = {
    create?: XOR<RoutineCreateWithoutExercisesInput, RoutineUncheckedCreateWithoutExercisesInput> | RoutineCreateWithoutExercisesInput[] | RoutineUncheckedCreateWithoutExercisesInput[]
    connectOrCreate?: RoutineCreateOrConnectWithoutExercisesInput | RoutineCreateOrConnectWithoutExercisesInput[]
    connect?: RoutineWhereUniqueInput | RoutineWhereUniqueInput[]
  }

  export type ExerciseLogUncheckedCreateNestedManyWithoutExerciseInput = {
    create?: XOR<ExerciseLogCreateWithoutExerciseInput, ExerciseLogUncheckedCreateWithoutExerciseInput> | ExerciseLogCreateWithoutExerciseInput[] | ExerciseLogUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: ExerciseLogCreateOrConnectWithoutExerciseInput | ExerciseLogCreateOrConnectWithoutExerciseInput[]
    createMany?: ExerciseLogCreateManyExerciseInputEnvelope
    connect?: ExerciseLogWhereUniqueInput | ExerciseLogWhereUniqueInput[]
  }

  export type RoutineUncheckedCreateNestedManyWithoutExercisesInput = {
    create?: XOR<RoutineCreateWithoutExercisesInput, RoutineUncheckedCreateWithoutExercisesInput> | RoutineCreateWithoutExercisesInput[] | RoutineUncheckedCreateWithoutExercisesInput[]
    connectOrCreate?: RoutineCreateOrConnectWithoutExercisesInput | RoutineCreateOrConnectWithoutExercisesInput[]
    connect?: RoutineWhereUniqueInput | RoutineWhereUniqueInput[]
  }

  export type EnumExerciseTypeFieldUpdateOperationsInput = {
    set?: $Enums.ExerciseType
  }

  export type EnumEquipmentFieldUpdateOperationsInput = {
    set?: $Enums.Equipment
  }

  export type NoteUpdateOneWithoutExercisesNestedInput = {
    create?: XOR<NoteCreateWithoutExercisesInput, NoteUncheckedCreateWithoutExercisesInput>
    connectOrCreate?: NoteCreateOrConnectWithoutExercisesInput
    upsert?: NoteUpsertWithoutExercisesInput
    disconnect?: NoteWhereInput | boolean
    delete?: NoteWhereInput | boolean
    connect?: NoteWhereUniqueInput
    update?: XOR<XOR<NoteUpdateToOneWithWhereWithoutExercisesInput, NoteUpdateWithoutExercisesInput>, NoteUncheckedUpdateWithoutExercisesInput>
  }

  export type ExerciseLogUpdateManyWithoutExerciseNestedInput = {
    create?: XOR<ExerciseLogCreateWithoutExerciseInput, ExerciseLogUncheckedCreateWithoutExerciseInput> | ExerciseLogCreateWithoutExerciseInput[] | ExerciseLogUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: ExerciseLogCreateOrConnectWithoutExerciseInput | ExerciseLogCreateOrConnectWithoutExerciseInput[]
    upsert?: ExerciseLogUpsertWithWhereUniqueWithoutExerciseInput | ExerciseLogUpsertWithWhereUniqueWithoutExerciseInput[]
    createMany?: ExerciseLogCreateManyExerciseInputEnvelope
    set?: ExerciseLogWhereUniqueInput | ExerciseLogWhereUniqueInput[]
    disconnect?: ExerciseLogWhereUniqueInput | ExerciseLogWhereUniqueInput[]
    delete?: ExerciseLogWhereUniqueInput | ExerciseLogWhereUniqueInput[]
    connect?: ExerciseLogWhereUniqueInput | ExerciseLogWhereUniqueInput[]
    update?: ExerciseLogUpdateWithWhereUniqueWithoutExerciseInput | ExerciseLogUpdateWithWhereUniqueWithoutExerciseInput[]
    updateMany?: ExerciseLogUpdateManyWithWhereWithoutExerciseInput | ExerciseLogUpdateManyWithWhereWithoutExerciseInput[]
    deleteMany?: ExerciseLogScalarWhereInput | ExerciseLogScalarWhereInput[]
  }

  export type RoutineUpdateManyWithoutExercisesNestedInput = {
    create?: XOR<RoutineCreateWithoutExercisesInput, RoutineUncheckedCreateWithoutExercisesInput> | RoutineCreateWithoutExercisesInput[] | RoutineUncheckedCreateWithoutExercisesInput[]
    connectOrCreate?: RoutineCreateOrConnectWithoutExercisesInput | RoutineCreateOrConnectWithoutExercisesInput[]
    upsert?: RoutineUpsertWithWhereUniqueWithoutExercisesInput | RoutineUpsertWithWhereUniqueWithoutExercisesInput[]
    set?: RoutineWhereUniqueInput | RoutineWhereUniqueInput[]
    disconnect?: RoutineWhereUniqueInput | RoutineWhereUniqueInput[]
    delete?: RoutineWhereUniqueInput | RoutineWhereUniqueInput[]
    connect?: RoutineWhereUniqueInput | RoutineWhereUniqueInput[]
    update?: RoutineUpdateWithWhereUniqueWithoutExercisesInput | RoutineUpdateWithWhereUniqueWithoutExercisesInput[]
    updateMany?: RoutineUpdateManyWithWhereWithoutExercisesInput | RoutineUpdateManyWithWhereWithoutExercisesInput[]
    deleteMany?: RoutineScalarWhereInput | RoutineScalarWhereInput[]
  }

  export type ExerciseLogUncheckedUpdateManyWithoutExerciseNestedInput = {
    create?: XOR<ExerciseLogCreateWithoutExerciseInput, ExerciseLogUncheckedCreateWithoutExerciseInput> | ExerciseLogCreateWithoutExerciseInput[] | ExerciseLogUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: ExerciseLogCreateOrConnectWithoutExerciseInput | ExerciseLogCreateOrConnectWithoutExerciseInput[]
    upsert?: ExerciseLogUpsertWithWhereUniqueWithoutExerciseInput | ExerciseLogUpsertWithWhereUniqueWithoutExerciseInput[]
    createMany?: ExerciseLogCreateManyExerciseInputEnvelope
    set?: ExerciseLogWhereUniqueInput | ExerciseLogWhereUniqueInput[]
    disconnect?: ExerciseLogWhereUniqueInput | ExerciseLogWhereUniqueInput[]
    delete?: ExerciseLogWhereUniqueInput | ExerciseLogWhereUniqueInput[]
    connect?: ExerciseLogWhereUniqueInput | ExerciseLogWhereUniqueInput[]
    update?: ExerciseLogUpdateWithWhereUniqueWithoutExerciseInput | ExerciseLogUpdateWithWhereUniqueWithoutExerciseInput[]
    updateMany?: ExerciseLogUpdateManyWithWhereWithoutExerciseInput | ExerciseLogUpdateManyWithWhereWithoutExerciseInput[]
    deleteMany?: ExerciseLogScalarWhereInput | ExerciseLogScalarWhereInput[]
  }

  export type RoutineUncheckedUpdateManyWithoutExercisesNestedInput = {
    create?: XOR<RoutineCreateWithoutExercisesInput, RoutineUncheckedCreateWithoutExercisesInput> | RoutineCreateWithoutExercisesInput[] | RoutineUncheckedCreateWithoutExercisesInput[]
    connectOrCreate?: RoutineCreateOrConnectWithoutExercisesInput | RoutineCreateOrConnectWithoutExercisesInput[]
    upsert?: RoutineUpsertWithWhereUniqueWithoutExercisesInput | RoutineUpsertWithWhereUniqueWithoutExercisesInput[]
    set?: RoutineWhereUniqueInput | RoutineWhereUniqueInput[]
    disconnect?: RoutineWhereUniqueInput | RoutineWhereUniqueInput[]
    delete?: RoutineWhereUniqueInput | RoutineWhereUniqueInput[]
    connect?: RoutineWhereUniqueInput | RoutineWhereUniqueInput[]
    update?: RoutineUpdateWithWhereUniqueWithoutExercisesInput | RoutineUpdateWithWhereUniqueWithoutExercisesInput[]
    updateMany?: RoutineUpdateManyWithWhereWithoutExercisesInput | RoutineUpdateManyWithWhereWithoutExercisesInput[]
    deleteMany?: RoutineScalarWhereInput | RoutineScalarWhereInput[]
  }

  export type ExerciseCreateNestedOneWithoutHistoryInput = {
    create?: XOR<ExerciseCreateWithoutHistoryInput, ExerciseUncheckedCreateWithoutHistoryInput>
    connectOrCreate?: ExerciseCreateOrConnectWithoutHistoryInput
    connect?: ExerciseWhereUniqueInput
  }

  export type ClimbLogCreateNestedManyWithoutWorkoutLogInput = {
    create?: XOR<ClimbLogCreateWithoutWorkoutLogInput, ClimbLogUncheckedCreateWithoutWorkoutLogInput> | ClimbLogCreateWithoutWorkoutLogInput[] | ClimbLogUncheckedCreateWithoutWorkoutLogInput[]
    connectOrCreate?: ClimbLogCreateOrConnectWithoutWorkoutLogInput | ClimbLogCreateOrConnectWithoutWorkoutLogInput[]
    createMany?: ClimbLogCreateManyWorkoutLogInputEnvelope
    connect?: ClimbLogWhereUniqueInput | ClimbLogWhereUniqueInput[]
  }

  export type NoteCreateNestedOneWithoutWorkoutLogInput = {
    create?: XOR<NoteCreateWithoutWorkoutLogInput, NoteUncheckedCreateWithoutWorkoutLogInput>
    connectOrCreate?: NoteCreateOrConnectWithoutWorkoutLogInput
    connect?: NoteWhereUniqueInput
  }

  export type TrainingDayCreateNestedOneWithoutWorkoutLogInput = {
    create?: XOR<TrainingDayCreateWithoutWorkoutLogInput, TrainingDayUncheckedCreateWithoutWorkoutLogInput>
    connectOrCreate?: TrainingDayCreateOrConnectWithoutWorkoutLogInput
    connect?: TrainingDayWhereUniqueInput
  }

  export type ClimbLogUncheckedCreateNestedManyWithoutWorkoutLogInput = {
    create?: XOR<ClimbLogCreateWithoutWorkoutLogInput, ClimbLogUncheckedCreateWithoutWorkoutLogInput> | ClimbLogCreateWithoutWorkoutLogInput[] | ClimbLogUncheckedCreateWithoutWorkoutLogInput[]
    connectOrCreate?: ClimbLogCreateOrConnectWithoutWorkoutLogInput | ClimbLogCreateOrConnectWithoutWorkoutLogInput[]
    createMany?: ClimbLogCreateManyWorkoutLogInputEnvelope
    connect?: ClimbLogWhereUniqueInput | ClimbLogWhereUniqueInput[]
  }

  export type ExerciseUpdateOneRequiredWithoutHistoryNestedInput = {
    create?: XOR<ExerciseCreateWithoutHistoryInput, ExerciseUncheckedCreateWithoutHistoryInput>
    connectOrCreate?: ExerciseCreateOrConnectWithoutHistoryInput
    upsert?: ExerciseUpsertWithoutHistoryInput
    connect?: ExerciseWhereUniqueInput
    update?: XOR<XOR<ExerciseUpdateToOneWithWhereWithoutHistoryInput, ExerciseUpdateWithoutHistoryInput>, ExerciseUncheckedUpdateWithoutHistoryInput>
  }

  export type ClimbLogUpdateManyWithoutWorkoutLogNestedInput = {
    create?: XOR<ClimbLogCreateWithoutWorkoutLogInput, ClimbLogUncheckedCreateWithoutWorkoutLogInput> | ClimbLogCreateWithoutWorkoutLogInput[] | ClimbLogUncheckedCreateWithoutWorkoutLogInput[]
    connectOrCreate?: ClimbLogCreateOrConnectWithoutWorkoutLogInput | ClimbLogCreateOrConnectWithoutWorkoutLogInput[]
    upsert?: ClimbLogUpsertWithWhereUniqueWithoutWorkoutLogInput | ClimbLogUpsertWithWhereUniqueWithoutWorkoutLogInput[]
    createMany?: ClimbLogCreateManyWorkoutLogInputEnvelope
    set?: ClimbLogWhereUniqueInput | ClimbLogWhereUniqueInput[]
    disconnect?: ClimbLogWhereUniqueInput | ClimbLogWhereUniqueInput[]
    delete?: ClimbLogWhereUniqueInput | ClimbLogWhereUniqueInput[]
    connect?: ClimbLogWhereUniqueInput | ClimbLogWhereUniqueInput[]
    update?: ClimbLogUpdateWithWhereUniqueWithoutWorkoutLogInput | ClimbLogUpdateWithWhereUniqueWithoutWorkoutLogInput[]
    updateMany?: ClimbLogUpdateManyWithWhereWithoutWorkoutLogInput | ClimbLogUpdateManyWithWhereWithoutWorkoutLogInput[]
    deleteMany?: ClimbLogScalarWhereInput | ClimbLogScalarWhereInput[]
  }

  export type NoteUpdateOneWithoutWorkoutLogNestedInput = {
    create?: XOR<NoteCreateWithoutWorkoutLogInput, NoteUncheckedCreateWithoutWorkoutLogInput>
    connectOrCreate?: NoteCreateOrConnectWithoutWorkoutLogInput
    upsert?: NoteUpsertWithoutWorkoutLogInput
    disconnect?: NoteWhereInput | boolean
    delete?: NoteWhereInput | boolean
    connect?: NoteWhereUniqueInput
    update?: XOR<XOR<NoteUpdateToOneWithWhereWithoutWorkoutLogInput, NoteUpdateWithoutWorkoutLogInput>, NoteUncheckedUpdateWithoutWorkoutLogInput>
  }

  export type TrainingDayUpdateOneWithoutWorkoutLogNestedInput = {
    create?: XOR<TrainingDayCreateWithoutWorkoutLogInput, TrainingDayUncheckedCreateWithoutWorkoutLogInput>
    connectOrCreate?: TrainingDayCreateOrConnectWithoutWorkoutLogInput
    upsert?: TrainingDayUpsertWithoutWorkoutLogInput
    disconnect?: TrainingDayWhereInput | boolean
    delete?: TrainingDayWhereInput | boolean
    connect?: TrainingDayWhereUniqueInput
    update?: XOR<XOR<TrainingDayUpdateToOneWithWhereWithoutWorkoutLogInput, TrainingDayUpdateWithoutWorkoutLogInput>, TrainingDayUncheckedUpdateWithoutWorkoutLogInput>
  }

  export type ClimbLogUncheckedUpdateManyWithoutWorkoutLogNestedInput = {
    create?: XOR<ClimbLogCreateWithoutWorkoutLogInput, ClimbLogUncheckedCreateWithoutWorkoutLogInput> | ClimbLogCreateWithoutWorkoutLogInput[] | ClimbLogUncheckedCreateWithoutWorkoutLogInput[]
    connectOrCreate?: ClimbLogCreateOrConnectWithoutWorkoutLogInput | ClimbLogCreateOrConnectWithoutWorkoutLogInput[]
    upsert?: ClimbLogUpsertWithWhereUniqueWithoutWorkoutLogInput | ClimbLogUpsertWithWhereUniqueWithoutWorkoutLogInput[]
    createMany?: ClimbLogCreateManyWorkoutLogInputEnvelope
    set?: ClimbLogWhereUniqueInput | ClimbLogWhereUniqueInput[]
    disconnect?: ClimbLogWhereUniqueInput | ClimbLogWhereUniqueInput[]
    delete?: ClimbLogWhereUniqueInput | ClimbLogWhereUniqueInput[]
    connect?: ClimbLogWhereUniqueInput | ClimbLogWhereUniqueInput[]
    update?: ClimbLogUpdateWithWhereUniqueWithoutWorkoutLogInput | ClimbLogUpdateWithWhereUniqueWithoutWorkoutLogInput[]
    updateMany?: ClimbLogUpdateManyWithWhereWithoutWorkoutLogInput | ClimbLogUpdateManyWithWhereWithoutWorkoutLogInput[]
    deleteMany?: ClimbLogScalarWhereInput | ClimbLogScalarWhereInput[]
  }

  export type LocationCreateNestedOneWithoutClimbsInput = {
    create?: XOR<LocationCreateWithoutClimbsInput, LocationUncheckedCreateWithoutClimbsInput>
    connectOrCreate?: LocationCreateOrConnectWithoutClimbsInput
    connect?: LocationWhereUniqueInput
  }

  export type NoteCreateNestedOneWithoutClimbsInput = {
    create?: XOR<NoteCreateWithoutClimbsInput, NoteUncheckedCreateWithoutClimbsInput>
    connectOrCreate?: NoteCreateOrConnectWithoutClimbsInput
    connect?: NoteWhereUniqueInput
  }

  export type ExerciseLogCreateNestedOneWithoutClimbLogInput = {
    create?: XOR<ExerciseLogCreateWithoutClimbLogInput, ExerciseLogUncheckedCreateWithoutClimbLogInput>
    connectOrCreate?: ExerciseLogCreateOrConnectWithoutClimbLogInput
    connect?: ExerciseLogWhereUniqueInput
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type LocationUpdateOneWithoutClimbsNestedInput = {
    create?: XOR<LocationCreateWithoutClimbsInput, LocationUncheckedCreateWithoutClimbsInput>
    connectOrCreate?: LocationCreateOrConnectWithoutClimbsInput
    upsert?: LocationUpsertWithoutClimbsInput
    disconnect?: LocationWhereInput | boolean
    delete?: LocationWhereInput | boolean
    connect?: LocationWhereUniqueInput
    update?: XOR<XOR<LocationUpdateToOneWithWhereWithoutClimbsInput, LocationUpdateWithoutClimbsInput>, LocationUncheckedUpdateWithoutClimbsInput>
  }

  export type NoteUpdateOneWithoutClimbsNestedInput = {
    create?: XOR<NoteCreateWithoutClimbsInput, NoteUncheckedCreateWithoutClimbsInput>
    connectOrCreate?: NoteCreateOrConnectWithoutClimbsInput
    upsert?: NoteUpsertWithoutClimbsInput
    disconnect?: NoteWhereInput | boolean
    delete?: NoteWhereInput | boolean
    connect?: NoteWhereUniqueInput
    update?: XOR<XOR<NoteUpdateToOneWithWhereWithoutClimbsInput, NoteUpdateWithoutClimbsInput>, NoteUncheckedUpdateWithoutClimbsInput>
  }

  export type ExerciseLogUpdateOneWithoutClimbLogNestedInput = {
    create?: XOR<ExerciseLogCreateWithoutClimbLogInput, ExerciseLogUncheckedCreateWithoutClimbLogInput>
    connectOrCreate?: ExerciseLogCreateOrConnectWithoutClimbLogInput
    upsert?: ExerciseLogUpsertWithoutClimbLogInput
    disconnect?: ExerciseLogWhereInput | boolean
    delete?: ExerciseLogWhereInput | boolean
    connect?: ExerciseLogWhereUniqueInput
    update?: XOR<XOR<ExerciseLogUpdateToOneWithWhereWithoutClimbLogInput, ExerciseLogUpdateWithoutClimbLogInput>, ExerciseLogUncheckedUpdateWithoutClimbLogInput>
  }

  export type NoteCreateNestedOneWithoutLocationsInput = {
    create?: XOR<NoteCreateWithoutLocationsInput, NoteUncheckedCreateWithoutLocationsInput>
    connectOrCreate?: NoteCreateOrConnectWithoutLocationsInput
    connect?: NoteWhereUniqueInput
  }

  export type ClimbLogCreateNestedManyWithoutLocationInput = {
    create?: XOR<ClimbLogCreateWithoutLocationInput, ClimbLogUncheckedCreateWithoutLocationInput> | ClimbLogCreateWithoutLocationInput[] | ClimbLogUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: ClimbLogCreateOrConnectWithoutLocationInput | ClimbLogCreateOrConnectWithoutLocationInput[]
    createMany?: ClimbLogCreateManyLocationInputEnvelope
    connect?: ClimbLogWhereUniqueInput | ClimbLogWhereUniqueInput[]
  }

  export type ClimbLogUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<ClimbLogCreateWithoutLocationInput, ClimbLogUncheckedCreateWithoutLocationInput> | ClimbLogCreateWithoutLocationInput[] | ClimbLogUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: ClimbLogCreateOrConnectWithoutLocationInput | ClimbLogCreateOrConnectWithoutLocationInput[]
    createMany?: ClimbLogCreateManyLocationInputEnvelope
    connect?: ClimbLogWhereUniqueInput | ClimbLogWhereUniqueInput[]
  }

  export type NoteUpdateOneWithoutLocationsNestedInput = {
    create?: XOR<NoteCreateWithoutLocationsInput, NoteUncheckedCreateWithoutLocationsInput>
    connectOrCreate?: NoteCreateOrConnectWithoutLocationsInput
    upsert?: NoteUpsertWithoutLocationsInput
    disconnect?: NoteWhereInput | boolean
    delete?: NoteWhereInput | boolean
    connect?: NoteWhereUniqueInput
    update?: XOR<XOR<NoteUpdateToOneWithWhereWithoutLocationsInput, NoteUpdateWithoutLocationsInput>, NoteUncheckedUpdateWithoutLocationsInput>
  }

  export type ClimbLogUpdateManyWithoutLocationNestedInput = {
    create?: XOR<ClimbLogCreateWithoutLocationInput, ClimbLogUncheckedCreateWithoutLocationInput> | ClimbLogCreateWithoutLocationInput[] | ClimbLogUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: ClimbLogCreateOrConnectWithoutLocationInput | ClimbLogCreateOrConnectWithoutLocationInput[]
    upsert?: ClimbLogUpsertWithWhereUniqueWithoutLocationInput | ClimbLogUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: ClimbLogCreateManyLocationInputEnvelope
    set?: ClimbLogWhereUniqueInput | ClimbLogWhereUniqueInput[]
    disconnect?: ClimbLogWhereUniqueInput | ClimbLogWhereUniqueInput[]
    delete?: ClimbLogWhereUniqueInput | ClimbLogWhereUniqueInput[]
    connect?: ClimbLogWhereUniqueInput | ClimbLogWhereUniqueInput[]
    update?: ClimbLogUpdateWithWhereUniqueWithoutLocationInput | ClimbLogUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: ClimbLogUpdateManyWithWhereWithoutLocationInput | ClimbLogUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: ClimbLogScalarWhereInput | ClimbLogScalarWhereInput[]
  }

  export type ClimbLogUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<ClimbLogCreateWithoutLocationInput, ClimbLogUncheckedCreateWithoutLocationInput> | ClimbLogCreateWithoutLocationInput[] | ClimbLogUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: ClimbLogCreateOrConnectWithoutLocationInput | ClimbLogCreateOrConnectWithoutLocationInput[]
    upsert?: ClimbLogUpsertWithWhereUniqueWithoutLocationInput | ClimbLogUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: ClimbLogCreateManyLocationInputEnvelope
    set?: ClimbLogWhereUniqueInput | ClimbLogWhereUniqueInput[]
    disconnect?: ClimbLogWhereUniqueInput | ClimbLogWhereUniqueInput[]
    delete?: ClimbLogWhereUniqueInput | ClimbLogWhereUniqueInput[]
    connect?: ClimbLogWhereUniqueInput | ClimbLogWhereUniqueInput[]
    update?: ClimbLogUpdateWithWhereUniqueWithoutLocationInput | ClimbLogUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: ClimbLogUpdateManyWithWhereWithoutLocationInput | ClimbLogUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: ClimbLogScalarWhereInput | ClimbLogScalarWhereInput[]
  }

  export type TrainingDayCreateNestedManyWithoutRecoveryLevelInput = {
    create?: XOR<TrainingDayCreateWithoutRecoveryLevelInput, TrainingDayUncheckedCreateWithoutRecoveryLevelInput> | TrainingDayCreateWithoutRecoveryLevelInput[] | TrainingDayUncheckedCreateWithoutRecoveryLevelInput[]
    connectOrCreate?: TrainingDayCreateOrConnectWithoutRecoveryLevelInput | TrainingDayCreateOrConnectWithoutRecoveryLevelInput[]
    createMany?: TrainingDayCreateManyRecoveryLevelInputEnvelope
    connect?: TrainingDayWhereUniqueInput | TrainingDayWhereUniqueInput[]
  }

  export type TrainingDayUncheckedCreateNestedManyWithoutRecoveryLevelInput = {
    create?: XOR<TrainingDayCreateWithoutRecoveryLevelInput, TrainingDayUncheckedCreateWithoutRecoveryLevelInput> | TrainingDayCreateWithoutRecoveryLevelInput[] | TrainingDayUncheckedCreateWithoutRecoveryLevelInput[]
    connectOrCreate?: TrainingDayCreateOrConnectWithoutRecoveryLevelInput | TrainingDayCreateOrConnectWithoutRecoveryLevelInput[]
    createMany?: TrainingDayCreateManyRecoveryLevelInputEnvelope
    connect?: TrainingDayWhereUniqueInput | TrainingDayWhereUniqueInput[]
  }

  export type TrainingDayUpdateManyWithoutRecoveryLevelNestedInput = {
    create?: XOR<TrainingDayCreateWithoutRecoveryLevelInput, TrainingDayUncheckedCreateWithoutRecoveryLevelInput> | TrainingDayCreateWithoutRecoveryLevelInput[] | TrainingDayUncheckedCreateWithoutRecoveryLevelInput[]
    connectOrCreate?: TrainingDayCreateOrConnectWithoutRecoveryLevelInput | TrainingDayCreateOrConnectWithoutRecoveryLevelInput[]
    upsert?: TrainingDayUpsertWithWhereUniqueWithoutRecoveryLevelInput | TrainingDayUpsertWithWhereUniqueWithoutRecoveryLevelInput[]
    createMany?: TrainingDayCreateManyRecoveryLevelInputEnvelope
    set?: TrainingDayWhereUniqueInput | TrainingDayWhereUniqueInput[]
    disconnect?: TrainingDayWhereUniqueInput | TrainingDayWhereUniqueInput[]
    delete?: TrainingDayWhereUniqueInput | TrainingDayWhereUniqueInput[]
    connect?: TrainingDayWhereUniqueInput | TrainingDayWhereUniqueInput[]
    update?: TrainingDayUpdateWithWhereUniqueWithoutRecoveryLevelInput | TrainingDayUpdateWithWhereUniqueWithoutRecoveryLevelInput[]
    updateMany?: TrainingDayUpdateManyWithWhereWithoutRecoveryLevelInput | TrainingDayUpdateManyWithWhereWithoutRecoveryLevelInput[]
    deleteMany?: TrainingDayScalarWhereInput | TrainingDayScalarWhereInput[]
  }

  export type TrainingDayUncheckedUpdateManyWithoutRecoveryLevelNestedInput = {
    create?: XOR<TrainingDayCreateWithoutRecoveryLevelInput, TrainingDayUncheckedCreateWithoutRecoveryLevelInput> | TrainingDayCreateWithoutRecoveryLevelInput[] | TrainingDayUncheckedCreateWithoutRecoveryLevelInput[]
    connectOrCreate?: TrainingDayCreateOrConnectWithoutRecoveryLevelInput | TrainingDayCreateOrConnectWithoutRecoveryLevelInput[]
    upsert?: TrainingDayUpsertWithWhereUniqueWithoutRecoveryLevelInput | TrainingDayUpsertWithWhereUniqueWithoutRecoveryLevelInput[]
    createMany?: TrainingDayCreateManyRecoveryLevelInputEnvelope
    set?: TrainingDayWhereUniqueInput | TrainingDayWhereUniqueInput[]
    disconnect?: TrainingDayWhereUniqueInput | TrainingDayWhereUniqueInput[]
    delete?: TrainingDayWhereUniqueInput | TrainingDayWhereUniqueInput[]
    connect?: TrainingDayWhereUniqueInput | TrainingDayWhereUniqueInput[]
    update?: TrainingDayUpdateWithWhereUniqueWithoutRecoveryLevelInput | TrainingDayUpdateWithWhereUniqueWithoutRecoveryLevelInput[]
    updateMany?: TrainingDayUpdateManyWithWhereWithoutRecoveryLevelInput | TrainingDayUpdateManyWithWhereWithoutRecoveryLevelInput[]
    deleteMany?: TrainingDayScalarWhereInput | TrainingDayScalarWhereInput[]
  }

  export type TrainingDayCreateNestedManyWithoutNoteInput = {
    create?: XOR<TrainingDayCreateWithoutNoteInput, TrainingDayUncheckedCreateWithoutNoteInput> | TrainingDayCreateWithoutNoteInput[] | TrainingDayUncheckedCreateWithoutNoteInput[]
    connectOrCreate?: TrainingDayCreateOrConnectWithoutNoteInput | TrainingDayCreateOrConnectWithoutNoteInput[]
    createMany?: TrainingDayCreateManyNoteInputEnvelope
    connect?: TrainingDayWhereUniqueInput | TrainingDayWhereUniqueInput[]
  }

  export type ExerciseCreateNestedManyWithoutNoteInput = {
    create?: XOR<ExerciseCreateWithoutNoteInput, ExerciseUncheckedCreateWithoutNoteInput> | ExerciseCreateWithoutNoteInput[] | ExerciseUncheckedCreateWithoutNoteInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutNoteInput | ExerciseCreateOrConnectWithoutNoteInput[]
    createMany?: ExerciseCreateManyNoteInputEnvelope
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
  }

  export type ClimbLogCreateNestedManyWithoutNoteInput = {
    create?: XOR<ClimbLogCreateWithoutNoteInput, ClimbLogUncheckedCreateWithoutNoteInput> | ClimbLogCreateWithoutNoteInput[] | ClimbLogUncheckedCreateWithoutNoteInput[]
    connectOrCreate?: ClimbLogCreateOrConnectWithoutNoteInput | ClimbLogCreateOrConnectWithoutNoteInput[]
    createMany?: ClimbLogCreateManyNoteInputEnvelope
    connect?: ClimbLogWhereUniqueInput | ClimbLogWhereUniqueInput[]
  }

  export type LocationCreateNestedManyWithoutNoteInput = {
    create?: XOR<LocationCreateWithoutNoteInput, LocationUncheckedCreateWithoutNoteInput> | LocationCreateWithoutNoteInput[] | LocationUncheckedCreateWithoutNoteInput[]
    connectOrCreate?: LocationCreateOrConnectWithoutNoteInput | LocationCreateOrConnectWithoutNoteInput[]
    createMany?: LocationCreateManyNoteInputEnvelope
    connect?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
  }

  export type RoutineCreateNestedManyWithoutNoteInput = {
    create?: XOR<RoutineCreateWithoutNoteInput, RoutineUncheckedCreateWithoutNoteInput> | RoutineCreateWithoutNoteInput[] | RoutineUncheckedCreateWithoutNoteInput[]
    connectOrCreate?: RoutineCreateOrConnectWithoutNoteInput | RoutineCreateOrConnectWithoutNoteInput[]
    createMany?: RoutineCreateManyNoteInputEnvelope
    connect?: RoutineWhereUniqueInput | RoutineWhereUniqueInput[]
  }

  export type ExerciseLogCreateNestedManyWithoutNoteInput = {
    create?: XOR<ExerciseLogCreateWithoutNoteInput, ExerciseLogUncheckedCreateWithoutNoteInput> | ExerciseLogCreateWithoutNoteInput[] | ExerciseLogUncheckedCreateWithoutNoteInput[]
    connectOrCreate?: ExerciseLogCreateOrConnectWithoutNoteInput | ExerciseLogCreateOrConnectWithoutNoteInput[]
    createMany?: ExerciseLogCreateManyNoteInputEnvelope
    connect?: ExerciseLogWhereUniqueInput | ExerciseLogWhereUniqueInput[]
  }

  export type TrainingDayUncheckedCreateNestedManyWithoutNoteInput = {
    create?: XOR<TrainingDayCreateWithoutNoteInput, TrainingDayUncheckedCreateWithoutNoteInput> | TrainingDayCreateWithoutNoteInput[] | TrainingDayUncheckedCreateWithoutNoteInput[]
    connectOrCreate?: TrainingDayCreateOrConnectWithoutNoteInput | TrainingDayCreateOrConnectWithoutNoteInput[]
    createMany?: TrainingDayCreateManyNoteInputEnvelope
    connect?: TrainingDayWhereUniqueInput | TrainingDayWhereUniqueInput[]
  }

  export type ExerciseUncheckedCreateNestedManyWithoutNoteInput = {
    create?: XOR<ExerciseCreateWithoutNoteInput, ExerciseUncheckedCreateWithoutNoteInput> | ExerciseCreateWithoutNoteInput[] | ExerciseUncheckedCreateWithoutNoteInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutNoteInput | ExerciseCreateOrConnectWithoutNoteInput[]
    createMany?: ExerciseCreateManyNoteInputEnvelope
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
  }

  export type ClimbLogUncheckedCreateNestedManyWithoutNoteInput = {
    create?: XOR<ClimbLogCreateWithoutNoteInput, ClimbLogUncheckedCreateWithoutNoteInput> | ClimbLogCreateWithoutNoteInput[] | ClimbLogUncheckedCreateWithoutNoteInput[]
    connectOrCreate?: ClimbLogCreateOrConnectWithoutNoteInput | ClimbLogCreateOrConnectWithoutNoteInput[]
    createMany?: ClimbLogCreateManyNoteInputEnvelope
    connect?: ClimbLogWhereUniqueInput | ClimbLogWhereUniqueInput[]
  }

  export type LocationUncheckedCreateNestedManyWithoutNoteInput = {
    create?: XOR<LocationCreateWithoutNoteInput, LocationUncheckedCreateWithoutNoteInput> | LocationCreateWithoutNoteInput[] | LocationUncheckedCreateWithoutNoteInput[]
    connectOrCreate?: LocationCreateOrConnectWithoutNoteInput | LocationCreateOrConnectWithoutNoteInput[]
    createMany?: LocationCreateManyNoteInputEnvelope
    connect?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
  }

  export type RoutineUncheckedCreateNestedManyWithoutNoteInput = {
    create?: XOR<RoutineCreateWithoutNoteInput, RoutineUncheckedCreateWithoutNoteInput> | RoutineCreateWithoutNoteInput[] | RoutineUncheckedCreateWithoutNoteInput[]
    connectOrCreate?: RoutineCreateOrConnectWithoutNoteInput | RoutineCreateOrConnectWithoutNoteInput[]
    createMany?: RoutineCreateManyNoteInputEnvelope
    connect?: RoutineWhereUniqueInput | RoutineWhereUniqueInput[]
  }

  export type ExerciseLogUncheckedCreateNestedManyWithoutNoteInput = {
    create?: XOR<ExerciseLogCreateWithoutNoteInput, ExerciseLogUncheckedCreateWithoutNoteInput> | ExerciseLogCreateWithoutNoteInput[] | ExerciseLogUncheckedCreateWithoutNoteInput[]
    connectOrCreate?: ExerciseLogCreateOrConnectWithoutNoteInput | ExerciseLogCreateOrConnectWithoutNoteInput[]
    createMany?: ExerciseLogCreateManyNoteInputEnvelope
    connect?: ExerciseLogWhereUniqueInput | ExerciseLogWhereUniqueInput[]
  }

  export type TrainingDayUpdateManyWithoutNoteNestedInput = {
    create?: XOR<TrainingDayCreateWithoutNoteInput, TrainingDayUncheckedCreateWithoutNoteInput> | TrainingDayCreateWithoutNoteInput[] | TrainingDayUncheckedCreateWithoutNoteInput[]
    connectOrCreate?: TrainingDayCreateOrConnectWithoutNoteInput | TrainingDayCreateOrConnectWithoutNoteInput[]
    upsert?: TrainingDayUpsertWithWhereUniqueWithoutNoteInput | TrainingDayUpsertWithWhereUniqueWithoutNoteInput[]
    createMany?: TrainingDayCreateManyNoteInputEnvelope
    set?: TrainingDayWhereUniqueInput | TrainingDayWhereUniqueInput[]
    disconnect?: TrainingDayWhereUniqueInput | TrainingDayWhereUniqueInput[]
    delete?: TrainingDayWhereUniqueInput | TrainingDayWhereUniqueInput[]
    connect?: TrainingDayWhereUniqueInput | TrainingDayWhereUniqueInput[]
    update?: TrainingDayUpdateWithWhereUniqueWithoutNoteInput | TrainingDayUpdateWithWhereUniqueWithoutNoteInput[]
    updateMany?: TrainingDayUpdateManyWithWhereWithoutNoteInput | TrainingDayUpdateManyWithWhereWithoutNoteInput[]
    deleteMany?: TrainingDayScalarWhereInput | TrainingDayScalarWhereInput[]
  }

  export type ExerciseUpdateManyWithoutNoteNestedInput = {
    create?: XOR<ExerciseCreateWithoutNoteInput, ExerciseUncheckedCreateWithoutNoteInput> | ExerciseCreateWithoutNoteInput[] | ExerciseUncheckedCreateWithoutNoteInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutNoteInput | ExerciseCreateOrConnectWithoutNoteInput[]
    upsert?: ExerciseUpsertWithWhereUniqueWithoutNoteInput | ExerciseUpsertWithWhereUniqueWithoutNoteInput[]
    createMany?: ExerciseCreateManyNoteInputEnvelope
    set?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    disconnect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    delete?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    update?: ExerciseUpdateWithWhereUniqueWithoutNoteInput | ExerciseUpdateWithWhereUniqueWithoutNoteInput[]
    updateMany?: ExerciseUpdateManyWithWhereWithoutNoteInput | ExerciseUpdateManyWithWhereWithoutNoteInput[]
    deleteMany?: ExerciseScalarWhereInput | ExerciseScalarWhereInput[]
  }

  export type ClimbLogUpdateManyWithoutNoteNestedInput = {
    create?: XOR<ClimbLogCreateWithoutNoteInput, ClimbLogUncheckedCreateWithoutNoteInput> | ClimbLogCreateWithoutNoteInput[] | ClimbLogUncheckedCreateWithoutNoteInput[]
    connectOrCreate?: ClimbLogCreateOrConnectWithoutNoteInput | ClimbLogCreateOrConnectWithoutNoteInput[]
    upsert?: ClimbLogUpsertWithWhereUniqueWithoutNoteInput | ClimbLogUpsertWithWhereUniqueWithoutNoteInput[]
    createMany?: ClimbLogCreateManyNoteInputEnvelope
    set?: ClimbLogWhereUniqueInput | ClimbLogWhereUniqueInput[]
    disconnect?: ClimbLogWhereUniqueInput | ClimbLogWhereUniqueInput[]
    delete?: ClimbLogWhereUniqueInput | ClimbLogWhereUniqueInput[]
    connect?: ClimbLogWhereUniqueInput | ClimbLogWhereUniqueInput[]
    update?: ClimbLogUpdateWithWhereUniqueWithoutNoteInput | ClimbLogUpdateWithWhereUniqueWithoutNoteInput[]
    updateMany?: ClimbLogUpdateManyWithWhereWithoutNoteInput | ClimbLogUpdateManyWithWhereWithoutNoteInput[]
    deleteMany?: ClimbLogScalarWhereInput | ClimbLogScalarWhereInput[]
  }

  export type LocationUpdateManyWithoutNoteNestedInput = {
    create?: XOR<LocationCreateWithoutNoteInput, LocationUncheckedCreateWithoutNoteInput> | LocationCreateWithoutNoteInput[] | LocationUncheckedCreateWithoutNoteInput[]
    connectOrCreate?: LocationCreateOrConnectWithoutNoteInput | LocationCreateOrConnectWithoutNoteInput[]
    upsert?: LocationUpsertWithWhereUniqueWithoutNoteInput | LocationUpsertWithWhereUniqueWithoutNoteInput[]
    createMany?: LocationCreateManyNoteInputEnvelope
    set?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    disconnect?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    delete?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    connect?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    update?: LocationUpdateWithWhereUniqueWithoutNoteInput | LocationUpdateWithWhereUniqueWithoutNoteInput[]
    updateMany?: LocationUpdateManyWithWhereWithoutNoteInput | LocationUpdateManyWithWhereWithoutNoteInput[]
    deleteMany?: LocationScalarWhereInput | LocationScalarWhereInput[]
  }

  export type RoutineUpdateManyWithoutNoteNestedInput = {
    create?: XOR<RoutineCreateWithoutNoteInput, RoutineUncheckedCreateWithoutNoteInput> | RoutineCreateWithoutNoteInput[] | RoutineUncheckedCreateWithoutNoteInput[]
    connectOrCreate?: RoutineCreateOrConnectWithoutNoteInput | RoutineCreateOrConnectWithoutNoteInput[]
    upsert?: RoutineUpsertWithWhereUniqueWithoutNoteInput | RoutineUpsertWithWhereUniqueWithoutNoteInput[]
    createMany?: RoutineCreateManyNoteInputEnvelope
    set?: RoutineWhereUniqueInput | RoutineWhereUniqueInput[]
    disconnect?: RoutineWhereUniqueInput | RoutineWhereUniqueInput[]
    delete?: RoutineWhereUniqueInput | RoutineWhereUniqueInput[]
    connect?: RoutineWhereUniqueInput | RoutineWhereUniqueInput[]
    update?: RoutineUpdateWithWhereUniqueWithoutNoteInput | RoutineUpdateWithWhereUniqueWithoutNoteInput[]
    updateMany?: RoutineUpdateManyWithWhereWithoutNoteInput | RoutineUpdateManyWithWhereWithoutNoteInput[]
    deleteMany?: RoutineScalarWhereInput | RoutineScalarWhereInput[]
  }

  export type ExerciseLogUpdateManyWithoutNoteNestedInput = {
    create?: XOR<ExerciseLogCreateWithoutNoteInput, ExerciseLogUncheckedCreateWithoutNoteInput> | ExerciseLogCreateWithoutNoteInput[] | ExerciseLogUncheckedCreateWithoutNoteInput[]
    connectOrCreate?: ExerciseLogCreateOrConnectWithoutNoteInput | ExerciseLogCreateOrConnectWithoutNoteInput[]
    upsert?: ExerciseLogUpsertWithWhereUniqueWithoutNoteInput | ExerciseLogUpsertWithWhereUniqueWithoutNoteInput[]
    createMany?: ExerciseLogCreateManyNoteInputEnvelope
    set?: ExerciseLogWhereUniqueInput | ExerciseLogWhereUniqueInput[]
    disconnect?: ExerciseLogWhereUniqueInput | ExerciseLogWhereUniqueInput[]
    delete?: ExerciseLogWhereUniqueInput | ExerciseLogWhereUniqueInput[]
    connect?: ExerciseLogWhereUniqueInput | ExerciseLogWhereUniqueInput[]
    update?: ExerciseLogUpdateWithWhereUniqueWithoutNoteInput | ExerciseLogUpdateWithWhereUniqueWithoutNoteInput[]
    updateMany?: ExerciseLogUpdateManyWithWhereWithoutNoteInput | ExerciseLogUpdateManyWithWhereWithoutNoteInput[]
    deleteMany?: ExerciseLogScalarWhereInput | ExerciseLogScalarWhereInput[]
  }

  export type TrainingDayUncheckedUpdateManyWithoutNoteNestedInput = {
    create?: XOR<TrainingDayCreateWithoutNoteInput, TrainingDayUncheckedCreateWithoutNoteInput> | TrainingDayCreateWithoutNoteInput[] | TrainingDayUncheckedCreateWithoutNoteInput[]
    connectOrCreate?: TrainingDayCreateOrConnectWithoutNoteInput | TrainingDayCreateOrConnectWithoutNoteInput[]
    upsert?: TrainingDayUpsertWithWhereUniqueWithoutNoteInput | TrainingDayUpsertWithWhereUniqueWithoutNoteInput[]
    createMany?: TrainingDayCreateManyNoteInputEnvelope
    set?: TrainingDayWhereUniqueInput | TrainingDayWhereUniqueInput[]
    disconnect?: TrainingDayWhereUniqueInput | TrainingDayWhereUniqueInput[]
    delete?: TrainingDayWhereUniqueInput | TrainingDayWhereUniqueInput[]
    connect?: TrainingDayWhereUniqueInput | TrainingDayWhereUniqueInput[]
    update?: TrainingDayUpdateWithWhereUniqueWithoutNoteInput | TrainingDayUpdateWithWhereUniqueWithoutNoteInput[]
    updateMany?: TrainingDayUpdateManyWithWhereWithoutNoteInput | TrainingDayUpdateManyWithWhereWithoutNoteInput[]
    deleteMany?: TrainingDayScalarWhereInput | TrainingDayScalarWhereInput[]
  }

  export type ExerciseUncheckedUpdateManyWithoutNoteNestedInput = {
    create?: XOR<ExerciseCreateWithoutNoteInput, ExerciseUncheckedCreateWithoutNoteInput> | ExerciseCreateWithoutNoteInput[] | ExerciseUncheckedCreateWithoutNoteInput[]
    connectOrCreate?: ExerciseCreateOrConnectWithoutNoteInput | ExerciseCreateOrConnectWithoutNoteInput[]
    upsert?: ExerciseUpsertWithWhereUniqueWithoutNoteInput | ExerciseUpsertWithWhereUniqueWithoutNoteInput[]
    createMany?: ExerciseCreateManyNoteInputEnvelope
    set?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    disconnect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    delete?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    connect?: ExerciseWhereUniqueInput | ExerciseWhereUniqueInput[]
    update?: ExerciseUpdateWithWhereUniqueWithoutNoteInput | ExerciseUpdateWithWhereUniqueWithoutNoteInput[]
    updateMany?: ExerciseUpdateManyWithWhereWithoutNoteInput | ExerciseUpdateManyWithWhereWithoutNoteInput[]
    deleteMany?: ExerciseScalarWhereInput | ExerciseScalarWhereInput[]
  }

  export type ClimbLogUncheckedUpdateManyWithoutNoteNestedInput = {
    create?: XOR<ClimbLogCreateWithoutNoteInput, ClimbLogUncheckedCreateWithoutNoteInput> | ClimbLogCreateWithoutNoteInput[] | ClimbLogUncheckedCreateWithoutNoteInput[]
    connectOrCreate?: ClimbLogCreateOrConnectWithoutNoteInput | ClimbLogCreateOrConnectWithoutNoteInput[]
    upsert?: ClimbLogUpsertWithWhereUniqueWithoutNoteInput | ClimbLogUpsertWithWhereUniqueWithoutNoteInput[]
    createMany?: ClimbLogCreateManyNoteInputEnvelope
    set?: ClimbLogWhereUniqueInput | ClimbLogWhereUniqueInput[]
    disconnect?: ClimbLogWhereUniqueInput | ClimbLogWhereUniqueInput[]
    delete?: ClimbLogWhereUniqueInput | ClimbLogWhereUniqueInput[]
    connect?: ClimbLogWhereUniqueInput | ClimbLogWhereUniqueInput[]
    update?: ClimbLogUpdateWithWhereUniqueWithoutNoteInput | ClimbLogUpdateWithWhereUniqueWithoutNoteInput[]
    updateMany?: ClimbLogUpdateManyWithWhereWithoutNoteInput | ClimbLogUpdateManyWithWhereWithoutNoteInput[]
    deleteMany?: ClimbLogScalarWhereInput | ClimbLogScalarWhereInput[]
  }

  export type LocationUncheckedUpdateManyWithoutNoteNestedInput = {
    create?: XOR<LocationCreateWithoutNoteInput, LocationUncheckedCreateWithoutNoteInput> | LocationCreateWithoutNoteInput[] | LocationUncheckedCreateWithoutNoteInput[]
    connectOrCreate?: LocationCreateOrConnectWithoutNoteInput | LocationCreateOrConnectWithoutNoteInput[]
    upsert?: LocationUpsertWithWhereUniqueWithoutNoteInput | LocationUpsertWithWhereUniqueWithoutNoteInput[]
    createMany?: LocationCreateManyNoteInputEnvelope
    set?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    disconnect?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    delete?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    connect?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    update?: LocationUpdateWithWhereUniqueWithoutNoteInput | LocationUpdateWithWhereUniqueWithoutNoteInput[]
    updateMany?: LocationUpdateManyWithWhereWithoutNoteInput | LocationUpdateManyWithWhereWithoutNoteInput[]
    deleteMany?: LocationScalarWhereInput | LocationScalarWhereInput[]
  }

  export type RoutineUncheckedUpdateManyWithoutNoteNestedInput = {
    create?: XOR<RoutineCreateWithoutNoteInput, RoutineUncheckedCreateWithoutNoteInput> | RoutineCreateWithoutNoteInput[] | RoutineUncheckedCreateWithoutNoteInput[]
    connectOrCreate?: RoutineCreateOrConnectWithoutNoteInput | RoutineCreateOrConnectWithoutNoteInput[]
    upsert?: RoutineUpsertWithWhereUniqueWithoutNoteInput | RoutineUpsertWithWhereUniqueWithoutNoteInput[]
    createMany?: RoutineCreateManyNoteInputEnvelope
    set?: RoutineWhereUniqueInput | RoutineWhereUniqueInput[]
    disconnect?: RoutineWhereUniqueInput | RoutineWhereUniqueInput[]
    delete?: RoutineWhereUniqueInput | RoutineWhereUniqueInput[]
    connect?: RoutineWhereUniqueInput | RoutineWhereUniqueInput[]
    update?: RoutineUpdateWithWhereUniqueWithoutNoteInput | RoutineUpdateWithWhereUniqueWithoutNoteInput[]
    updateMany?: RoutineUpdateManyWithWhereWithoutNoteInput | RoutineUpdateManyWithWhereWithoutNoteInput[]
    deleteMany?: RoutineScalarWhereInput | RoutineScalarWhereInput[]
  }

  export type ExerciseLogUncheckedUpdateManyWithoutNoteNestedInput = {
    create?: XOR<ExerciseLogCreateWithoutNoteInput, ExerciseLogUncheckedCreateWithoutNoteInput> | ExerciseLogCreateWithoutNoteInput[] | ExerciseLogUncheckedCreateWithoutNoteInput[]
    connectOrCreate?: ExerciseLogCreateOrConnectWithoutNoteInput | ExerciseLogCreateOrConnectWithoutNoteInput[]
    upsert?: ExerciseLogUpsertWithWhereUniqueWithoutNoteInput | ExerciseLogUpsertWithWhereUniqueWithoutNoteInput[]
    createMany?: ExerciseLogCreateManyNoteInputEnvelope
    set?: ExerciseLogWhereUniqueInput | ExerciseLogWhereUniqueInput[]
    disconnect?: ExerciseLogWhereUniqueInput | ExerciseLogWhereUniqueInput[]
    delete?: ExerciseLogWhereUniqueInput | ExerciseLogWhereUniqueInput[]
    connect?: ExerciseLogWhereUniqueInput | ExerciseLogWhereUniqueInput[]
    update?: ExerciseLogUpdateWithWhereUniqueWithoutNoteInput | ExerciseLogUpdateWithWhereUniqueWithoutNoteInput[]
    updateMany?: ExerciseLogUpdateManyWithWhereWithoutNoteInput | ExerciseLogUpdateManyWithWhereWithoutNoteInput[]
    deleteMany?: ExerciseLogScalarWhereInput | ExerciseLogScalarWhereInput[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumCycleSchemaFilter<$PrismaModel = never> = {
    equals?: $Enums.CycleSchema | EnumCycleSchemaFieldRefInput<$PrismaModel>
    in?: $Enums.CycleSchema[] | ListEnumCycleSchemaFieldRefInput<$PrismaModel>
    notIn?: $Enums.CycleSchema[] | ListEnumCycleSchemaFieldRefInput<$PrismaModel>
    not?: NestedEnumCycleSchemaFilter<$PrismaModel> | $Enums.CycleSchema
  }

  export type NestedEnumCycleSchemaWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CycleSchema | EnumCycleSchemaFieldRefInput<$PrismaModel>
    in?: $Enums.CycleSchema[] | ListEnumCycleSchemaFieldRefInput<$PrismaModel>
    notIn?: $Enums.CycleSchema[] | ListEnumCycleSchemaFieldRefInput<$PrismaModel>
    not?: NestedEnumCycleSchemaWithAggregatesFilter<$PrismaModel> | $Enums.CycleSchema
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCycleSchemaFilter<$PrismaModel>
    _max?: NestedEnumCycleSchemaFilter<$PrismaModel>
  }

  export type NestedEnumRoutineTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.RoutineType | EnumRoutineTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RoutineType[] | ListEnumRoutineTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoutineType[] | ListEnumRoutineTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRoutineTypeFilter<$PrismaModel> | $Enums.RoutineType
  }

  export type NestedEnumRoutineTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RoutineType | EnumRoutineTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RoutineType[] | ListEnumRoutineTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoutineType[] | ListEnumRoutineTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRoutineTypeWithAggregatesFilter<$PrismaModel> | $Enums.RoutineType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoutineTypeFilter<$PrismaModel>
    _max?: NestedEnumRoutineTypeFilter<$PrismaModel>
  }

  export type NestedEnumExerciseTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ExerciseType | EnumExerciseTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ExerciseType[] | ListEnumExerciseTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ExerciseType[] | ListEnumExerciseTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumExerciseTypeFilter<$PrismaModel> | $Enums.ExerciseType
  }

  export type NestedEnumEquipmentFilter<$PrismaModel = never> = {
    equals?: $Enums.Equipment | EnumEquipmentFieldRefInput<$PrismaModel>
    in?: $Enums.Equipment[] | ListEnumEquipmentFieldRefInput<$PrismaModel>
    notIn?: $Enums.Equipment[] | ListEnumEquipmentFieldRefInput<$PrismaModel>
    not?: NestedEnumEquipmentFilter<$PrismaModel> | $Enums.Equipment
  }

  export type NestedEnumExerciseTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ExerciseType | EnumExerciseTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ExerciseType[] | ListEnumExerciseTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ExerciseType[] | ListEnumExerciseTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumExerciseTypeWithAggregatesFilter<$PrismaModel> | $Enums.ExerciseType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumExerciseTypeFilter<$PrismaModel>
    _max?: NestedEnumExerciseTypeFilter<$PrismaModel>
  }

  export type NestedEnumEquipmentWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Equipment | EnumEquipmentFieldRefInput<$PrismaModel>
    in?: $Enums.Equipment[] | ListEnumEquipmentFieldRefInput<$PrismaModel>
    notIn?: $Enums.Equipment[] | ListEnumEquipmentFieldRefInput<$PrismaModel>
    not?: NestedEnumEquipmentWithAggregatesFilter<$PrismaModel> | $Enums.Equipment
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEquipmentFilter<$PrismaModel>
    _max?: NestedEnumEquipmentFilter<$PrismaModel>
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type UserCreateWithoutAccountsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    sessions?: SessionCreateNestedManyWithoutUserInput
    mesocycles?: MesocycleCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAccountsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    mesocycles?: MesocycleUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type UserUpsertWithoutAccountsInput = {
    update: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUpdateManyWithoutUserNestedInput
    mesocycles?: MesocycleUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    mesocycles?: MesocycleUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    mesocycles?: MesocycleCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    mesocycles?: MesocycleUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    mesocycles?: MesocycleUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    mesocycles?: MesocycleUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AccountCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountCreateManyUserInputEnvelope = {
    data: AccountCreateManyUserInput | AccountCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MesocycleCreateWithoutUserInput = {
    id?: string
    goal: string
    description?: string | null
    startDate: number
    endDate: number
    numMicros?: number
    isActive: boolean
    microcycles?: MicrocycleCreateNestedManyWithoutMesocycleInput
  }

  export type MesocycleUncheckedCreateWithoutUserInput = {
    id?: string
    goal: string
    description?: string | null
    startDate: number
    endDate: number
    numMicros?: number
    isActive: boolean
    microcycles?: MicrocycleUncheckedCreateNestedManyWithoutMesocycleInput
  }

  export type MesocycleCreateOrConnectWithoutUserInput = {
    where: MesocycleWhereUniqueInput
    create: XOR<MesocycleCreateWithoutUserInput, MesocycleUncheckedCreateWithoutUserInput>
  }

  export type MesocycleCreateManyUserInputEnvelope = {
    data: MesocycleCreateManyUserInput | MesocycleCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutUserInput>
  }

  export type AccountScalarWhereInput = {
    AND?: AccountScalarWhereInput | AccountScalarWhereInput[]
    OR?: AccountScalarWhereInput[]
    NOT?: AccountScalarWhereInput | AccountScalarWhereInput[]
    id?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: StringFilter<"Session"> | string
    sessionToken?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
  }

  export type MesocycleUpsertWithWhereUniqueWithoutUserInput = {
    where: MesocycleWhereUniqueInput
    update: XOR<MesocycleUpdateWithoutUserInput, MesocycleUncheckedUpdateWithoutUserInput>
    create: XOR<MesocycleCreateWithoutUserInput, MesocycleUncheckedCreateWithoutUserInput>
  }

  export type MesocycleUpdateWithWhereUniqueWithoutUserInput = {
    where: MesocycleWhereUniqueInput
    data: XOR<MesocycleUpdateWithoutUserInput, MesocycleUncheckedUpdateWithoutUserInput>
  }

  export type MesocycleUpdateManyWithWhereWithoutUserInput = {
    where: MesocycleScalarWhereInput
    data: XOR<MesocycleUpdateManyMutationInput, MesocycleUncheckedUpdateManyWithoutUserInput>
  }

  export type MesocycleScalarWhereInput = {
    AND?: MesocycleScalarWhereInput | MesocycleScalarWhereInput[]
    OR?: MesocycleScalarWhereInput[]
    NOT?: MesocycleScalarWhereInput | MesocycleScalarWhereInput[]
    id?: StringFilter<"Mesocycle"> | string
    goal?: StringFilter<"Mesocycle"> | string
    description?: StringNullableFilter<"Mesocycle"> | string | null
    startDate?: IntFilter<"Mesocycle"> | number
    endDate?: IntFilter<"Mesocycle"> | number
    numMicros?: IntFilter<"Mesocycle"> | number
    userId?: StringFilter<"Mesocycle"> | string
    isActive?: BoolFilter<"Mesocycle"> | boolean
  }

  export type UserCreateWithoutMesocyclesInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMesocyclesInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMesocyclesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMesocyclesInput, UserUncheckedCreateWithoutMesocyclesInput>
  }

  export type MicrocycleCreateWithoutMesocycleInput = {
    id?: string
    goal: string
    startDate: number
    endDate: number
    schema: $Enums.CycleSchema
    description?: string | null
    trainingDays?: TrainingDayCreateNestedManyWithoutMicrocycleInput
  }

  export type MicrocycleUncheckedCreateWithoutMesocycleInput = {
    id?: string
    goal: string
    startDate: number
    endDate: number
    schema: $Enums.CycleSchema
    description?: string | null
    trainingDays?: TrainingDayUncheckedCreateNestedManyWithoutMicrocycleInput
  }

  export type MicrocycleCreateOrConnectWithoutMesocycleInput = {
    where: MicrocycleWhereUniqueInput
    create: XOR<MicrocycleCreateWithoutMesocycleInput, MicrocycleUncheckedCreateWithoutMesocycleInput>
  }

  export type MicrocycleCreateManyMesocycleInputEnvelope = {
    data: MicrocycleCreateManyMesocycleInput | MicrocycleCreateManyMesocycleInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutMesocyclesInput = {
    update: XOR<UserUpdateWithoutMesocyclesInput, UserUncheckedUpdateWithoutMesocyclesInput>
    create: XOR<UserCreateWithoutMesocyclesInput, UserUncheckedCreateWithoutMesocyclesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMesocyclesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMesocyclesInput, UserUncheckedUpdateWithoutMesocyclesInput>
  }

  export type UserUpdateWithoutMesocyclesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMesocyclesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MicrocycleUpsertWithWhereUniqueWithoutMesocycleInput = {
    where: MicrocycleWhereUniqueInput
    update: XOR<MicrocycleUpdateWithoutMesocycleInput, MicrocycleUncheckedUpdateWithoutMesocycleInput>
    create: XOR<MicrocycleCreateWithoutMesocycleInput, MicrocycleUncheckedCreateWithoutMesocycleInput>
  }

  export type MicrocycleUpdateWithWhereUniqueWithoutMesocycleInput = {
    where: MicrocycleWhereUniqueInput
    data: XOR<MicrocycleUpdateWithoutMesocycleInput, MicrocycleUncheckedUpdateWithoutMesocycleInput>
  }

  export type MicrocycleUpdateManyWithWhereWithoutMesocycleInput = {
    where: MicrocycleScalarWhereInput
    data: XOR<MicrocycleUpdateManyMutationInput, MicrocycleUncheckedUpdateManyWithoutMesocycleInput>
  }

  export type MicrocycleScalarWhereInput = {
    AND?: MicrocycleScalarWhereInput | MicrocycleScalarWhereInput[]
    OR?: MicrocycleScalarWhereInput[]
    NOT?: MicrocycleScalarWhereInput | MicrocycleScalarWhereInput[]
    id?: StringFilter<"Microcycle"> | string
    goal?: StringFilter<"Microcycle"> | string
    startDate?: IntFilter<"Microcycle"> | number
    endDate?: IntFilter<"Microcycle"> | number
    schema?: EnumCycleSchemaFilter<"Microcycle"> | $Enums.CycleSchema
    description?: StringNullableFilter<"Microcycle"> | string | null
    mesoId?: StringFilter<"Microcycle"> | string
  }

  export type MesocycleCreateWithoutMicrocyclesInput = {
    id?: string
    goal: string
    description?: string | null
    startDate: number
    endDate: number
    numMicros?: number
    isActive: boolean
    user: UserCreateNestedOneWithoutMesocyclesInput
  }

  export type MesocycleUncheckedCreateWithoutMicrocyclesInput = {
    id?: string
    goal: string
    description?: string | null
    startDate: number
    endDate: number
    numMicros?: number
    userId: string
    isActive: boolean
  }

  export type MesocycleCreateOrConnectWithoutMicrocyclesInput = {
    where: MesocycleWhereUniqueInput
    create: XOR<MesocycleCreateWithoutMicrocyclesInput, MesocycleUncheckedCreateWithoutMicrocyclesInput>
  }

  export type TrainingDayCreateWithoutMicrocycleInput = {
    id?: string
    date: number
    sortOrder?: string
    routines?: RoutineCreateNestedManyWithoutTrainingDaysInput
    recoveryLevel?: RecoveryLevelCreateNestedOneWithoutTrainingDaysInput
    workoutLog?: ExerciseLogCreateNestedManyWithoutTrainingDayInput
    note?: NoteCreateNestedOneWithoutTrainingDaysInput
  }

  export type TrainingDayUncheckedCreateWithoutMicrocycleInput = {
    id?: string
    date: number
    sortOrder?: string
    recoveryLevelId?: string | null
    noteId?: string | null
    routines?: RoutineUncheckedCreateNestedManyWithoutTrainingDaysInput
    workoutLog?: ExerciseLogUncheckedCreateNestedManyWithoutTrainingDayInput
  }

  export type TrainingDayCreateOrConnectWithoutMicrocycleInput = {
    where: TrainingDayWhereUniqueInput
    create: XOR<TrainingDayCreateWithoutMicrocycleInput, TrainingDayUncheckedCreateWithoutMicrocycleInput>
  }

  export type TrainingDayCreateManyMicrocycleInputEnvelope = {
    data: TrainingDayCreateManyMicrocycleInput | TrainingDayCreateManyMicrocycleInput[]
    skipDuplicates?: boolean
  }

  export type MesocycleUpsertWithoutMicrocyclesInput = {
    update: XOR<MesocycleUpdateWithoutMicrocyclesInput, MesocycleUncheckedUpdateWithoutMicrocyclesInput>
    create: XOR<MesocycleCreateWithoutMicrocyclesInput, MesocycleUncheckedCreateWithoutMicrocyclesInput>
    where?: MesocycleWhereInput
  }

  export type MesocycleUpdateToOneWithWhereWithoutMicrocyclesInput = {
    where?: MesocycleWhereInput
    data: XOR<MesocycleUpdateWithoutMicrocyclesInput, MesocycleUncheckedUpdateWithoutMicrocyclesInput>
  }

  export type MesocycleUpdateWithoutMicrocyclesInput = {
    id?: StringFieldUpdateOperationsInput | string
    goal?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: IntFieldUpdateOperationsInput | number
    endDate?: IntFieldUpdateOperationsInput | number
    numMicros?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutMesocyclesNestedInput
  }

  export type MesocycleUncheckedUpdateWithoutMicrocyclesInput = {
    id?: StringFieldUpdateOperationsInput | string
    goal?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: IntFieldUpdateOperationsInput | number
    endDate?: IntFieldUpdateOperationsInput | number
    numMicros?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TrainingDayUpsertWithWhereUniqueWithoutMicrocycleInput = {
    where: TrainingDayWhereUniqueInput
    update: XOR<TrainingDayUpdateWithoutMicrocycleInput, TrainingDayUncheckedUpdateWithoutMicrocycleInput>
    create: XOR<TrainingDayCreateWithoutMicrocycleInput, TrainingDayUncheckedCreateWithoutMicrocycleInput>
  }

  export type TrainingDayUpdateWithWhereUniqueWithoutMicrocycleInput = {
    where: TrainingDayWhereUniqueInput
    data: XOR<TrainingDayUpdateWithoutMicrocycleInput, TrainingDayUncheckedUpdateWithoutMicrocycleInput>
  }

  export type TrainingDayUpdateManyWithWhereWithoutMicrocycleInput = {
    where: TrainingDayScalarWhereInput
    data: XOR<TrainingDayUpdateManyMutationInput, TrainingDayUncheckedUpdateManyWithoutMicrocycleInput>
  }

  export type TrainingDayScalarWhereInput = {
    AND?: TrainingDayScalarWhereInput | TrainingDayScalarWhereInput[]
    OR?: TrainingDayScalarWhereInput[]
    NOT?: TrainingDayScalarWhereInput | TrainingDayScalarWhereInput[]
    id?: StringFilter<"TrainingDay"> | string
    date?: IntFilter<"TrainingDay"> | number
    sortOrder?: StringFilter<"TrainingDay"> | string
    microcycleId?: StringFilter<"TrainingDay"> | string
    recoveryLevelId?: StringNullableFilter<"TrainingDay"> | string | null
    noteId?: StringNullableFilter<"TrainingDay"> | string | null
  }

  export type RoutineCreateWithoutTrainingDaysInput = {
    id?: string
    name: string
    duration?: number | null
    type: $Enums.RoutineType
    sortOrder: string
    exercises?: ExerciseCreateNestedManyWithoutRoutinesInput
    routineSubtype?: RoutineSubtypeCreateNestedOneWithoutRoutineInput
    note?: NoteCreateNestedOneWithoutRoutinesInput
  }

  export type RoutineUncheckedCreateWithoutTrainingDaysInput = {
    id?: string
    name: string
    duration?: number | null
    type: $Enums.RoutineType
    sortOrder: string
    routineSubtypeId?: string | null
    noteId?: string | null
    exercises?: ExerciseUncheckedCreateNestedManyWithoutRoutinesInput
  }

  export type RoutineCreateOrConnectWithoutTrainingDaysInput = {
    where: RoutineWhereUniqueInput
    create: XOR<RoutineCreateWithoutTrainingDaysInput, RoutineUncheckedCreateWithoutTrainingDaysInput>
  }

  export type MicrocycleCreateWithoutTrainingDaysInput = {
    id?: string
    goal: string
    startDate: number
    endDate: number
    schema: $Enums.CycleSchema
    description?: string | null
    mesocycle: MesocycleCreateNestedOneWithoutMicrocyclesInput
  }

  export type MicrocycleUncheckedCreateWithoutTrainingDaysInput = {
    id?: string
    goal: string
    startDate: number
    endDate: number
    schema: $Enums.CycleSchema
    description?: string | null
    mesoId: string
  }

  export type MicrocycleCreateOrConnectWithoutTrainingDaysInput = {
    where: MicrocycleWhereUniqueInput
    create: XOR<MicrocycleCreateWithoutTrainingDaysInput, MicrocycleUncheckedCreateWithoutTrainingDaysInput>
  }

  export type RecoveryLevelCreateWithoutTrainingDaysInput = {
    id?: string
    level: string
  }

  export type RecoveryLevelUncheckedCreateWithoutTrainingDaysInput = {
    id?: string
    level: string
  }

  export type RecoveryLevelCreateOrConnectWithoutTrainingDaysInput = {
    where: RecoveryLevelWhereUniqueInput
    create: XOR<RecoveryLevelCreateWithoutTrainingDaysInput, RecoveryLevelUncheckedCreateWithoutTrainingDaysInput>
  }

  export type ExerciseLogCreateWithoutTrainingDayInput = {
    id?: string
    sets?: number | null
    reps?: number | null
    weight?: number | null
    duration?: number | null
    exercise: ExerciseCreateNestedOneWithoutHistoryInput
    climbLog?: ClimbLogCreateNestedManyWithoutWorkoutLogInput
    note?: NoteCreateNestedOneWithoutWorkoutLogInput
  }

  export type ExerciseLogUncheckedCreateWithoutTrainingDayInput = {
    id?: string
    exerciseId: string
    sets?: number | null
    reps?: number | null
    weight?: number | null
    duration?: number | null
    noteId?: string | null
    climbLog?: ClimbLogUncheckedCreateNestedManyWithoutWorkoutLogInput
  }

  export type ExerciseLogCreateOrConnectWithoutTrainingDayInput = {
    where: ExerciseLogWhereUniqueInput
    create: XOR<ExerciseLogCreateWithoutTrainingDayInput, ExerciseLogUncheckedCreateWithoutTrainingDayInput>
  }

  export type ExerciseLogCreateManyTrainingDayInputEnvelope = {
    data: ExerciseLogCreateManyTrainingDayInput | ExerciseLogCreateManyTrainingDayInput[]
    skipDuplicates?: boolean
  }

  export type NoteCreateWithoutTrainingDaysInput = {
    id?: string
    text: string
    exercises?: ExerciseCreateNestedManyWithoutNoteInput
    climbs?: ClimbLogCreateNestedManyWithoutNoteInput
    locations?: LocationCreateNestedManyWithoutNoteInput
    routines?: RoutineCreateNestedManyWithoutNoteInput
    WorkoutLog?: ExerciseLogCreateNestedManyWithoutNoteInput
  }

  export type NoteUncheckedCreateWithoutTrainingDaysInput = {
    id?: string
    text: string
    exercises?: ExerciseUncheckedCreateNestedManyWithoutNoteInput
    climbs?: ClimbLogUncheckedCreateNestedManyWithoutNoteInput
    locations?: LocationUncheckedCreateNestedManyWithoutNoteInput
    routines?: RoutineUncheckedCreateNestedManyWithoutNoteInput
    WorkoutLog?: ExerciseLogUncheckedCreateNestedManyWithoutNoteInput
  }

  export type NoteCreateOrConnectWithoutTrainingDaysInput = {
    where: NoteWhereUniqueInput
    create: XOR<NoteCreateWithoutTrainingDaysInput, NoteUncheckedCreateWithoutTrainingDaysInput>
  }

  export type RoutineUpsertWithWhereUniqueWithoutTrainingDaysInput = {
    where: RoutineWhereUniqueInput
    update: XOR<RoutineUpdateWithoutTrainingDaysInput, RoutineUncheckedUpdateWithoutTrainingDaysInput>
    create: XOR<RoutineCreateWithoutTrainingDaysInput, RoutineUncheckedCreateWithoutTrainingDaysInput>
  }

  export type RoutineUpdateWithWhereUniqueWithoutTrainingDaysInput = {
    where: RoutineWhereUniqueInput
    data: XOR<RoutineUpdateWithoutTrainingDaysInput, RoutineUncheckedUpdateWithoutTrainingDaysInput>
  }

  export type RoutineUpdateManyWithWhereWithoutTrainingDaysInput = {
    where: RoutineScalarWhereInput
    data: XOR<RoutineUpdateManyMutationInput, RoutineUncheckedUpdateManyWithoutTrainingDaysInput>
  }

  export type RoutineScalarWhereInput = {
    AND?: RoutineScalarWhereInput | RoutineScalarWhereInput[]
    OR?: RoutineScalarWhereInput[]
    NOT?: RoutineScalarWhereInput | RoutineScalarWhereInput[]
    id?: StringFilter<"Routine"> | string
    name?: StringFilter<"Routine"> | string
    duration?: IntNullableFilter<"Routine"> | number | null
    type?: EnumRoutineTypeFilter<"Routine"> | $Enums.RoutineType
    sortOrder?: StringFilter<"Routine"> | string
    routineSubtypeId?: StringNullableFilter<"Routine"> | string | null
    noteId?: StringNullableFilter<"Routine"> | string | null
  }

  export type MicrocycleUpsertWithoutTrainingDaysInput = {
    update: XOR<MicrocycleUpdateWithoutTrainingDaysInput, MicrocycleUncheckedUpdateWithoutTrainingDaysInput>
    create: XOR<MicrocycleCreateWithoutTrainingDaysInput, MicrocycleUncheckedCreateWithoutTrainingDaysInput>
    where?: MicrocycleWhereInput
  }

  export type MicrocycleUpdateToOneWithWhereWithoutTrainingDaysInput = {
    where?: MicrocycleWhereInput
    data: XOR<MicrocycleUpdateWithoutTrainingDaysInput, MicrocycleUncheckedUpdateWithoutTrainingDaysInput>
  }

  export type MicrocycleUpdateWithoutTrainingDaysInput = {
    id?: StringFieldUpdateOperationsInput | string
    goal?: StringFieldUpdateOperationsInput | string
    startDate?: IntFieldUpdateOperationsInput | number
    endDate?: IntFieldUpdateOperationsInput | number
    schema?: EnumCycleSchemaFieldUpdateOperationsInput | $Enums.CycleSchema
    description?: NullableStringFieldUpdateOperationsInput | string | null
    mesocycle?: MesocycleUpdateOneRequiredWithoutMicrocyclesNestedInput
  }

  export type MicrocycleUncheckedUpdateWithoutTrainingDaysInput = {
    id?: StringFieldUpdateOperationsInput | string
    goal?: StringFieldUpdateOperationsInput | string
    startDate?: IntFieldUpdateOperationsInput | number
    endDate?: IntFieldUpdateOperationsInput | number
    schema?: EnumCycleSchemaFieldUpdateOperationsInput | $Enums.CycleSchema
    description?: NullableStringFieldUpdateOperationsInput | string | null
    mesoId?: StringFieldUpdateOperationsInput | string
  }

  export type RecoveryLevelUpsertWithoutTrainingDaysInput = {
    update: XOR<RecoveryLevelUpdateWithoutTrainingDaysInput, RecoveryLevelUncheckedUpdateWithoutTrainingDaysInput>
    create: XOR<RecoveryLevelCreateWithoutTrainingDaysInput, RecoveryLevelUncheckedCreateWithoutTrainingDaysInput>
    where?: RecoveryLevelWhereInput
  }

  export type RecoveryLevelUpdateToOneWithWhereWithoutTrainingDaysInput = {
    where?: RecoveryLevelWhereInput
    data: XOR<RecoveryLevelUpdateWithoutTrainingDaysInput, RecoveryLevelUncheckedUpdateWithoutTrainingDaysInput>
  }

  export type RecoveryLevelUpdateWithoutTrainingDaysInput = {
    id?: StringFieldUpdateOperationsInput | string
    level?: StringFieldUpdateOperationsInput | string
  }

  export type RecoveryLevelUncheckedUpdateWithoutTrainingDaysInput = {
    id?: StringFieldUpdateOperationsInput | string
    level?: StringFieldUpdateOperationsInput | string
  }

  export type ExerciseLogUpsertWithWhereUniqueWithoutTrainingDayInput = {
    where: ExerciseLogWhereUniqueInput
    update: XOR<ExerciseLogUpdateWithoutTrainingDayInput, ExerciseLogUncheckedUpdateWithoutTrainingDayInput>
    create: XOR<ExerciseLogCreateWithoutTrainingDayInput, ExerciseLogUncheckedCreateWithoutTrainingDayInput>
  }

  export type ExerciseLogUpdateWithWhereUniqueWithoutTrainingDayInput = {
    where: ExerciseLogWhereUniqueInput
    data: XOR<ExerciseLogUpdateWithoutTrainingDayInput, ExerciseLogUncheckedUpdateWithoutTrainingDayInput>
  }

  export type ExerciseLogUpdateManyWithWhereWithoutTrainingDayInput = {
    where: ExerciseLogScalarWhereInput
    data: XOR<ExerciseLogUpdateManyMutationInput, ExerciseLogUncheckedUpdateManyWithoutTrainingDayInput>
  }

  export type ExerciseLogScalarWhereInput = {
    AND?: ExerciseLogScalarWhereInput | ExerciseLogScalarWhereInput[]
    OR?: ExerciseLogScalarWhereInput[]
    NOT?: ExerciseLogScalarWhereInput | ExerciseLogScalarWhereInput[]
    id?: StringFilter<"ExerciseLog"> | string
    exerciseId?: StringFilter<"ExerciseLog"> | string
    sets?: IntNullableFilter<"ExerciseLog"> | number | null
    reps?: IntNullableFilter<"ExerciseLog"> | number | null
    weight?: IntNullableFilter<"ExerciseLog"> | number | null
    duration?: IntNullableFilter<"ExerciseLog"> | number | null
    noteId?: StringNullableFilter<"ExerciseLog"> | string | null
    trainingDayId?: StringNullableFilter<"ExerciseLog"> | string | null
  }

  export type NoteUpsertWithoutTrainingDaysInput = {
    update: XOR<NoteUpdateWithoutTrainingDaysInput, NoteUncheckedUpdateWithoutTrainingDaysInput>
    create: XOR<NoteCreateWithoutTrainingDaysInput, NoteUncheckedCreateWithoutTrainingDaysInput>
    where?: NoteWhereInput
  }

  export type NoteUpdateToOneWithWhereWithoutTrainingDaysInput = {
    where?: NoteWhereInput
    data: XOR<NoteUpdateWithoutTrainingDaysInput, NoteUncheckedUpdateWithoutTrainingDaysInput>
  }

  export type NoteUpdateWithoutTrainingDaysInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    exercises?: ExerciseUpdateManyWithoutNoteNestedInput
    climbs?: ClimbLogUpdateManyWithoutNoteNestedInput
    locations?: LocationUpdateManyWithoutNoteNestedInput
    routines?: RoutineUpdateManyWithoutNoteNestedInput
    WorkoutLog?: ExerciseLogUpdateManyWithoutNoteNestedInput
  }

  export type NoteUncheckedUpdateWithoutTrainingDaysInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    exercises?: ExerciseUncheckedUpdateManyWithoutNoteNestedInput
    climbs?: ClimbLogUncheckedUpdateManyWithoutNoteNestedInput
    locations?: LocationUncheckedUpdateManyWithoutNoteNestedInput
    routines?: RoutineUncheckedUpdateManyWithoutNoteNestedInput
    WorkoutLog?: ExerciseLogUncheckedUpdateManyWithoutNoteNestedInput
  }

  export type ExerciseCreateWithoutRoutinesInput = {
    id?: string
    name: string
    type: $Enums.ExerciseType
    equipment: $Enums.Equipment
    imageId?: number | null
    note?: NoteCreateNestedOneWithoutExercisesInput
    history?: ExerciseLogCreateNestedManyWithoutExerciseInput
  }

  export type ExerciseUncheckedCreateWithoutRoutinesInput = {
    id?: string
    name: string
    type: $Enums.ExerciseType
    equipment: $Enums.Equipment
    imageId?: number | null
    noteId?: string | null
    history?: ExerciseLogUncheckedCreateNestedManyWithoutExerciseInput
  }

  export type ExerciseCreateOrConnectWithoutRoutinesInput = {
    where: ExerciseWhereUniqueInput
    create: XOR<ExerciseCreateWithoutRoutinesInput, ExerciseUncheckedCreateWithoutRoutinesInput>
  }

  export type TrainingDayCreateWithoutRoutinesInput = {
    id?: string
    date: number
    sortOrder?: string
    microcycle: MicrocycleCreateNestedOneWithoutTrainingDaysInput
    recoveryLevel?: RecoveryLevelCreateNestedOneWithoutTrainingDaysInput
    workoutLog?: ExerciseLogCreateNestedManyWithoutTrainingDayInput
    note?: NoteCreateNestedOneWithoutTrainingDaysInput
  }

  export type TrainingDayUncheckedCreateWithoutRoutinesInput = {
    id?: string
    date: number
    sortOrder?: string
    microcycleId: string
    recoveryLevelId?: string | null
    noteId?: string | null
    workoutLog?: ExerciseLogUncheckedCreateNestedManyWithoutTrainingDayInput
  }

  export type TrainingDayCreateOrConnectWithoutRoutinesInput = {
    where: TrainingDayWhereUniqueInput
    create: XOR<TrainingDayCreateWithoutRoutinesInput, TrainingDayUncheckedCreateWithoutRoutinesInput>
  }

  export type RoutineSubtypeCreateWithoutRoutineInput = {
    id?: string
    type: string
  }

  export type RoutineSubtypeUncheckedCreateWithoutRoutineInput = {
    id?: string
    type: string
  }

  export type RoutineSubtypeCreateOrConnectWithoutRoutineInput = {
    where: RoutineSubtypeWhereUniqueInput
    create: XOR<RoutineSubtypeCreateWithoutRoutineInput, RoutineSubtypeUncheckedCreateWithoutRoutineInput>
  }

  export type NoteCreateWithoutRoutinesInput = {
    id?: string
    text: string
    trainingDays?: TrainingDayCreateNestedManyWithoutNoteInput
    exercises?: ExerciseCreateNestedManyWithoutNoteInput
    climbs?: ClimbLogCreateNestedManyWithoutNoteInput
    locations?: LocationCreateNestedManyWithoutNoteInput
    WorkoutLog?: ExerciseLogCreateNestedManyWithoutNoteInput
  }

  export type NoteUncheckedCreateWithoutRoutinesInput = {
    id?: string
    text: string
    trainingDays?: TrainingDayUncheckedCreateNestedManyWithoutNoteInput
    exercises?: ExerciseUncheckedCreateNestedManyWithoutNoteInput
    climbs?: ClimbLogUncheckedCreateNestedManyWithoutNoteInput
    locations?: LocationUncheckedCreateNestedManyWithoutNoteInput
    WorkoutLog?: ExerciseLogUncheckedCreateNestedManyWithoutNoteInput
  }

  export type NoteCreateOrConnectWithoutRoutinesInput = {
    where: NoteWhereUniqueInput
    create: XOR<NoteCreateWithoutRoutinesInput, NoteUncheckedCreateWithoutRoutinesInput>
  }

  export type ExerciseUpsertWithWhereUniqueWithoutRoutinesInput = {
    where: ExerciseWhereUniqueInput
    update: XOR<ExerciseUpdateWithoutRoutinesInput, ExerciseUncheckedUpdateWithoutRoutinesInput>
    create: XOR<ExerciseCreateWithoutRoutinesInput, ExerciseUncheckedCreateWithoutRoutinesInput>
  }

  export type ExerciseUpdateWithWhereUniqueWithoutRoutinesInput = {
    where: ExerciseWhereUniqueInput
    data: XOR<ExerciseUpdateWithoutRoutinesInput, ExerciseUncheckedUpdateWithoutRoutinesInput>
  }

  export type ExerciseUpdateManyWithWhereWithoutRoutinesInput = {
    where: ExerciseScalarWhereInput
    data: XOR<ExerciseUpdateManyMutationInput, ExerciseUncheckedUpdateManyWithoutRoutinesInput>
  }

  export type ExerciseScalarWhereInput = {
    AND?: ExerciseScalarWhereInput | ExerciseScalarWhereInput[]
    OR?: ExerciseScalarWhereInput[]
    NOT?: ExerciseScalarWhereInput | ExerciseScalarWhereInput[]
    id?: StringFilter<"Exercise"> | string
    name?: StringFilter<"Exercise"> | string
    type?: EnumExerciseTypeFilter<"Exercise"> | $Enums.ExerciseType
    equipment?: EnumEquipmentFilter<"Exercise"> | $Enums.Equipment
    imageId?: IntNullableFilter<"Exercise"> | number | null
    noteId?: StringNullableFilter<"Exercise"> | string | null
  }

  export type TrainingDayUpsertWithWhereUniqueWithoutRoutinesInput = {
    where: TrainingDayWhereUniqueInput
    update: XOR<TrainingDayUpdateWithoutRoutinesInput, TrainingDayUncheckedUpdateWithoutRoutinesInput>
    create: XOR<TrainingDayCreateWithoutRoutinesInput, TrainingDayUncheckedCreateWithoutRoutinesInput>
  }

  export type TrainingDayUpdateWithWhereUniqueWithoutRoutinesInput = {
    where: TrainingDayWhereUniqueInput
    data: XOR<TrainingDayUpdateWithoutRoutinesInput, TrainingDayUncheckedUpdateWithoutRoutinesInput>
  }

  export type TrainingDayUpdateManyWithWhereWithoutRoutinesInput = {
    where: TrainingDayScalarWhereInput
    data: XOR<TrainingDayUpdateManyMutationInput, TrainingDayUncheckedUpdateManyWithoutRoutinesInput>
  }

  export type RoutineSubtypeUpsertWithoutRoutineInput = {
    update: XOR<RoutineSubtypeUpdateWithoutRoutineInput, RoutineSubtypeUncheckedUpdateWithoutRoutineInput>
    create: XOR<RoutineSubtypeCreateWithoutRoutineInput, RoutineSubtypeUncheckedCreateWithoutRoutineInput>
    where?: RoutineSubtypeWhereInput
  }

  export type RoutineSubtypeUpdateToOneWithWhereWithoutRoutineInput = {
    where?: RoutineSubtypeWhereInput
    data: XOR<RoutineSubtypeUpdateWithoutRoutineInput, RoutineSubtypeUncheckedUpdateWithoutRoutineInput>
  }

  export type RoutineSubtypeUpdateWithoutRoutineInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
  }

  export type RoutineSubtypeUncheckedUpdateWithoutRoutineInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
  }

  export type NoteUpsertWithoutRoutinesInput = {
    update: XOR<NoteUpdateWithoutRoutinesInput, NoteUncheckedUpdateWithoutRoutinesInput>
    create: XOR<NoteCreateWithoutRoutinesInput, NoteUncheckedCreateWithoutRoutinesInput>
    where?: NoteWhereInput
  }

  export type NoteUpdateToOneWithWhereWithoutRoutinesInput = {
    where?: NoteWhereInput
    data: XOR<NoteUpdateWithoutRoutinesInput, NoteUncheckedUpdateWithoutRoutinesInput>
  }

  export type NoteUpdateWithoutRoutinesInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    trainingDays?: TrainingDayUpdateManyWithoutNoteNestedInput
    exercises?: ExerciseUpdateManyWithoutNoteNestedInput
    climbs?: ClimbLogUpdateManyWithoutNoteNestedInput
    locations?: LocationUpdateManyWithoutNoteNestedInput
    WorkoutLog?: ExerciseLogUpdateManyWithoutNoteNestedInput
  }

  export type NoteUncheckedUpdateWithoutRoutinesInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    trainingDays?: TrainingDayUncheckedUpdateManyWithoutNoteNestedInput
    exercises?: ExerciseUncheckedUpdateManyWithoutNoteNestedInput
    climbs?: ClimbLogUncheckedUpdateManyWithoutNoteNestedInput
    locations?: LocationUncheckedUpdateManyWithoutNoteNestedInput
    WorkoutLog?: ExerciseLogUncheckedUpdateManyWithoutNoteNestedInput
  }

  export type RoutineCreateWithoutRoutineSubtypeInput = {
    id?: string
    name: string
    duration?: number | null
    type: $Enums.RoutineType
    sortOrder: string
    exercises?: ExerciseCreateNestedManyWithoutRoutinesInput
    trainingDays?: TrainingDayCreateNestedManyWithoutRoutinesInput
    note?: NoteCreateNestedOneWithoutRoutinesInput
  }

  export type RoutineUncheckedCreateWithoutRoutineSubtypeInput = {
    id?: string
    name: string
    duration?: number | null
    type: $Enums.RoutineType
    sortOrder: string
    noteId?: string | null
    exercises?: ExerciseUncheckedCreateNestedManyWithoutRoutinesInput
    trainingDays?: TrainingDayUncheckedCreateNestedManyWithoutRoutinesInput
  }

  export type RoutineCreateOrConnectWithoutRoutineSubtypeInput = {
    where: RoutineWhereUniqueInput
    create: XOR<RoutineCreateWithoutRoutineSubtypeInput, RoutineUncheckedCreateWithoutRoutineSubtypeInput>
  }

  export type RoutineCreateManyRoutineSubtypeInputEnvelope = {
    data: RoutineCreateManyRoutineSubtypeInput | RoutineCreateManyRoutineSubtypeInput[]
    skipDuplicates?: boolean
  }

  export type RoutineUpsertWithWhereUniqueWithoutRoutineSubtypeInput = {
    where: RoutineWhereUniqueInput
    update: XOR<RoutineUpdateWithoutRoutineSubtypeInput, RoutineUncheckedUpdateWithoutRoutineSubtypeInput>
    create: XOR<RoutineCreateWithoutRoutineSubtypeInput, RoutineUncheckedCreateWithoutRoutineSubtypeInput>
  }

  export type RoutineUpdateWithWhereUniqueWithoutRoutineSubtypeInput = {
    where: RoutineWhereUniqueInput
    data: XOR<RoutineUpdateWithoutRoutineSubtypeInput, RoutineUncheckedUpdateWithoutRoutineSubtypeInput>
  }

  export type RoutineUpdateManyWithWhereWithoutRoutineSubtypeInput = {
    where: RoutineScalarWhereInput
    data: XOR<RoutineUpdateManyMutationInput, RoutineUncheckedUpdateManyWithoutRoutineSubtypeInput>
  }

  export type NoteCreateWithoutExercisesInput = {
    id?: string
    text: string
    trainingDays?: TrainingDayCreateNestedManyWithoutNoteInput
    climbs?: ClimbLogCreateNestedManyWithoutNoteInput
    locations?: LocationCreateNestedManyWithoutNoteInput
    routines?: RoutineCreateNestedManyWithoutNoteInput
    WorkoutLog?: ExerciseLogCreateNestedManyWithoutNoteInput
  }

  export type NoteUncheckedCreateWithoutExercisesInput = {
    id?: string
    text: string
    trainingDays?: TrainingDayUncheckedCreateNestedManyWithoutNoteInput
    climbs?: ClimbLogUncheckedCreateNestedManyWithoutNoteInput
    locations?: LocationUncheckedCreateNestedManyWithoutNoteInput
    routines?: RoutineUncheckedCreateNestedManyWithoutNoteInput
    WorkoutLog?: ExerciseLogUncheckedCreateNestedManyWithoutNoteInput
  }

  export type NoteCreateOrConnectWithoutExercisesInput = {
    where: NoteWhereUniqueInput
    create: XOR<NoteCreateWithoutExercisesInput, NoteUncheckedCreateWithoutExercisesInput>
  }

  export type ExerciseLogCreateWithoutExerciseInput = {
    id?: string
    sets?: number | null
    reps?: number | null
    weight?: number | null
    duration?: number | null
    climbLog?: ClimbLogCreateNestedManyWithoutWorkoutLogInput
    note?: NoteCreateNestedOneWithoutWorkoutLogInput
    TrainingDay?: TrainingDayCreateNestedOneWithoutWorkoutLogInput
  }

  export type ExerciseLogUncheckedCreateWithoutExerciseInput = {
    id?: string
    sets?: number | null
    reps?: number | null
    weight?: number | null
    duration?: number | null
    noteId?: string | null
    trainingDayId?: string | null
    climbLog?: ClimbLogUncheckedCreateNestedManyWithoutWorkoutLogInput
  }

  export type ExerciseLogCreateOrConnectWithoutExerciseInput = {
    where: ExerciseLogWhereUniqueInput
    create: XOR<ExerciseLogCreateWithoutExerciseInput, ExerciseLogUncheckedCreateWithoutExerciseInput>
  }

  export type ExerciseLogCreateManyExerciseInputEnvelope = {
    data: ExerciseLogCreateManyExerciseInput | ExerciseLogCreateManyExerciseInput[]
    skipDuplicates?: boolean
  }

  export type RoutineCreateWithoutExercisesInput = {
    id?: string
    name: string
    duration?: number | null
    type: $Enums.RoutineType
    sortOrder: string
    trainingDays?: TrainingDayCreateNestedManyWithoutRoutinesInput
    routineSubtype?: RoutineSubtypeCreateNestedOneWithoutRoutineInput
    note?: NoteCreateNestedOneWithoutRoutinesInput
  }

  export type RoutineUncheckedCreateWithoutExercisesInput = {
    id?: string
    name: string
    duration?: number | null
    type: $Enums.RoutineType
    sortOrder: string
    routineSubtypeId?: string | null
    noteId?: string | null
    trainingDays?: TrainingDayUncheckedCreateNestedManyWithoutRoutinesInput
  }

  export type RoutineCreateOrConnectWithoutExercisesInput = {
    where: RoutineWhereUniqueInput
    create: XOR<RoutineCreateWithoutExercisesInput, RoutineUncheckedCreateWithoutExercisesInput>
  }

  export type NoteUpsertWithoutExercisesInput = {
    update: XOR<NoteUpdateWithoutExercisesInput, NoteUncheckedUpdateWithoutExercisesInput>
    create: XOR<NoteCreateWithoutExercisesInput, NoteUncheckedCreateWithoutExercisesInput>
    where?: NoteWhereInput
  }

  export type NoteUpdateToOneWithWhereWithoutExercisesInput = {
    where?: NoteWhereInput
    data: XOR<NoteUpdateWithoutExercisesInput, NoteUncheckedUpdateWithoutExercisesInput>
  }

  export type NoteUpdateWithoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    trainingDays?: TrainingDayUpdateManyWithoutNoteNestedInput
    climbs?: ClimbLogUpdateManyWithoutNoteNestedInput
    locations?: LocationUpdateManyWithoutNoteNestedInput
    routines?: RoutineUpdateManyWithoutNoteNestedInput
    WorkoutLog?: ExerciseLogUpdateManyWithoutNoteNestedInput
  }

  export type NoteUncheckedUpdateWithoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    trainingDays?: TrainingDayUncheckedUpdateManyWithoutNoteNestedInput
    climbs?: ClimbLogUncheckedUpdateManyWithoutNoteNestedInput
    locations?: LocationUncheckedUpdateManyWithoutNoteNestedInput
    routines?: RoutineUncheckedUpdateManyWithoutNoteNestedInput
    WorkoutLog?: ExerciseLogUncheckedUpdateManyWithoutNoteNestedInput
  }

  export type ExerciseLogUpsertWithWhereUniqueWithoutExerciseInput = {
    where: ExerciseLogWhereUniqueInput
    update: XOR<ExerciseLogUpdateWithoutExerciseInput, ExerciseLogUncheckedUpdateWithoutExerciseInput>
    create: XOR<ExerciseLogCreateWithoutExerciseInput, ExerciseLogUncheckedCreateWithoutExerciseInput>
  }

  export type ExerciseLogUpdateWithWhereUniqueWithoutExerciseInput = {
    where: ExerciseLogWhereUniqueInput
    data: XOR<ExerciseLogUpdateWithoutExerciseInput, ExerciseLogUncheckedUpdateWithoutExerciseInput>
  }

  export type ExerciseLogUpdateManyWithWhereWithoutExerciseInput = {
    where: ExerciseLogScalarWhereInput
    data: XOR<ExerciseLogUpdateManyMutationInput, ExerciseLogUncheckedUpdateManyWithoutExerciseInput>
  }

  export type RoutineUpsertWithWhereUniqueWithoutExercisesInput = {
    where: RoutineWhereUniqueInput
    update: XOR<RoutineUpdateWithoutExercisesInput, RoutineUncheckedUpdateWithoutExercisesInput>
    create: XOR<RoutineCreateWithoutExercisesInput, RoutineUncheckedCreateWithoutExercisesInput>
  }

  export type RoutineUpdateWithWhereUniqueWithoutExercisesInput = {
    where: RoutineWhereUniqueInput
    data: XOR<RoutineUpdateWithoutExercisesInput, RoutineUncheckedUpdateWithoutExercisesInput>
  }

  export type RoutineUpdateManyWithWhereWithoutExercisesInput = {
    where: RoutineScalarWhereInput
    data: XOR<RoutineUpdateManyMutationInput, RoutineUncheckedUpdateManyWithoutExercisesInput>
  }

  export type ExerciseCreateWithoutHistoryInput = {
    id?: string
    name: string
    type: $Enums.ExerciseType
    equipment: $Enums.Equipment
    imageId?: number | null
    note?: NoteCreateNestedOneWithoutExercisesInput
    routines?: RoutineCreateNestedManyWithoutExercisesInput
  }

  export type ExerciseUncheckedCreateWithoutHistoryInput = {
    id?: string
    name: string
    type: $Enums.ExerciseType
    equipment: $Enums.Equipment
    imageId?: number | null
    noteId?: string | null
    routines?: RoutineUncheckedCreateNestedManyWithoutExercisesInput
  }

  export type ExerciseCreateOrConnectWithoutHistoryInput = {
    where: ExerciseWhereUniqueInput
    create: XOR<ExerciseCreateWithoutHistoryInput, ExerciseUncheckedCreateWithoutHistoryInput>
  }

  export type ClimbLogCreateWithoutWorkoutLogInput = {
    id?: string
    name?: string | null
    grade: number
    project?: boolean | null
    attempts?: number | null
    flashed?: boolean | null
    location?: LocationCreateNestedOneWithoutClimbsInput
    note?: NoteCreateNestedOneWithoutClimbsInput
  }

  export type ClimbLogUncheckedCreateWithoutWorkoutLogInput = {
    id?: string
    name?: string | null
    grade: number
    project?: boolean | null
    attempts?: number | null
    flashed?: boolean | null
    locationId?: string | null
    noteId?: string | null
  }

  export type ClimbLogCreateOrConnectWithoutWorkoutLogInput = {
    where: ClimbLogWhereUniqueInput
    create: XOR<ClimbLogCreateWithoutWorkoutLogInput, ClimbLogUncheckedCreateWithoutWorkoutLogInput>
  }

  export type ClimbLogCreateManyWorkoutLogInputEnvelope = {
    data: ClimbLogCreateManyWorkoutLogInput | ClimbLogCreateManyWorkoutLogInput[]
    skipDuplicates?: boolean
  }

  export type NoteCreateWithoutWorkoutLogInput = {
    id?: string
    text: string
    trainingDays?: TrainingDayCreateNestedManyWithoutNoteInput
    exercises?: ExerciseCreateNestedManyWithoutNoteInput
    climbs?: ClimbLogCreateNestedManyWithoutNoteInput
    locations?: LocationCreateNestedManyWithoutNoteInput
    routines?: RoutineCreateNestedManyWithoutNoteInput
  }

  export type NoteUncheckedCreateWithoutWorkoutLogInput = {
    id?: string
    text: string
    trainingDays?: TrainingDayUncheckedCreateNestedManyWithoutNoteInput
    exercises?: ExerciseUncheckedCreateNestedManyWithoutNoteInput
    climbs?: ClimbLogUncheckedCreateNestedManyWithoutNoteInput
    locations?: LocationUncheckedCreateNestedManyWithoutNoteInput
    routines?: RoutineUncheckedCreateNestedManyWithoutNoteInput
  }

  export type NoteCreateOrConnectWithoutWorkoutLogInput = {
    where: NoteWhereUniqueInput
    create: XOR<NoteCreateWithoutWorkoutLogInput, NoteUncheckedCreateWithoutWorkoutLogInput>
  }

  export type TrainingDayCreateWithoutWorkoutLogInput = {
    id?: string
    date: number
    sortOrder?: string
    routines?: RoutineCreateNestedManyWithoutTrainingDaysInput
    microcycle: MicrocycleCreateNestedOneWithoutTrainingDaysInput
    recoveryLevel?: RecoveryLevelCreateNestedOneWithoutTrainingDaysInput
    note?: NoteCreateNestedOneWithoutTrainingDaysInput
  }

  export type TrainingDayUncheckedCreateWithoutWorkoutLogInput = {
    id?: string
    date: number
    sortOrder?: string
    microcycleId: string
    recoveryLevelId?: string | null
    noteId?: string | null
    routines?: RoutineUncheckedCreateNestedManyWithoutTrainingDaysInput
  }

  export type TrainingDayCreateOrConnectWithoutWorkoutLogInput = {
    where: TrainingDayWhereUniqueInput
    create: XOR<TrainingDayCreateWithoutWorkoutLogInput, TrainingDayUncheckedCreateWithoutWorkoutLogInput>
  }

  export type ExerciseUpsertWithoutHistoryInput = {
    update: XOR<ExerciseUpdateWithoutHistoryInput, ExerciseUncheckedUpdateWithoutHistoryInput>
    create: XOR<ExerciseCreateWithoutHistoryInput, ExerciseUncheckedCreateWithoutHistoryInput>
    where?: ExerciseWhereInput
  }

  export type ExerciseUpdateToOneWithWhereWithoutHistoryInput = {
    where?: ExerciseWhereInput
    data: XOR<ExerciseUpdateWithoutHistoryInput, ExerciseUncheckedUpdateWithoutHistoryInput>
  }

  export type ExerciseUpdateWithoutHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumExerciseTypeFieldUpdateOperationsInput | $Enums.ExerciseType
    equipment?: EnumEquipmentFieldUpdateOperationsInput | $Enums.Equipment
    imageId?: NullableIntFieldUpdateOperationsInput | number | null
    note?: NoteUpdateOneWithoutExercisesNestedInput
    routines?: RoutineUpdateManyWithoutExercisesNestedInput
  }

  export type ExerciseUncheckedUpdateWithoutHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumExerciseTypeFieldUpdateOperationsInput | $Enums.ExerciseType
    equipment?: EnumEquipmentFieldUpdateOperationsInput | $Enums.Equipment
    imageId?: NullableIntFieldUpdateOperationsInput | number | null
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
    routines?: RoutineUncheckedUpdateManyWithoutExercisesNestedInput
  }

  export type ClimbLogUpsertWithWhereUniqueWithoutWorkoutLogInput = {
    where: ClimbLogWhereUniqueInput
    update: XOR<ClimbLogUpdateWithoutWorkoutLogInput, ClimbLogUncheckedUpdateWithoutWorkoutLogInput>
    create: XOR<ClimbLogCreateWithoutWorkoutLogInput, ClimbLogUncheckedCreateWithoutWorkoutLogInput>
  }

  export type ClimbLogUpdateWithWhereUniqueWithoutWorkoutLogInput = {
    where: ClimbLogWhereUniqueInput
    data: XOR<ClimbLogUpdateWithoutWorkoutLogInput, ClimbLogUncheckedUpdateWithoutWorkoutLogInput>
  }

  export type ClimbLogUpdateManyWithWhereWithoutWorkoutLogInput = {
    where: ClimbLogScalarWhereInput
    data: XOR<ClimbLogUpdateManyMutationInput, ClimbLogUncheckedUpdateManyWithoutWorkoutLogInput>
  }

  export type ClimbLogScalarWhereInput = {
    AND?: ClimbLogScalarWhereInput | ClimbLogScalarWhereInput[]
    OR?: ClimbLogScalarWhereInput[]
    NOT?: ClimbLogScalarWhereInput | ClimbLogScalarWhereInput[]
    id?: StringFilter<"ClimbLog"> | string
    name?: StringNullableFilter<"ClimbLog"> | string | null
    grade?: IntFilter<"ClimbLog"> | number
    project?: BoolNullableFilter<"ClimbLog"> | boolean | null
    attempts?: IntNullableFilter<"ClimbLog"> | number | null
    flashed?: BoolNullableFilter<"ClimbLog"> | boolean | null
    locationId?: StringNullableFilter<"ClimbLog"> | string | null
    noteId?: StringNullableFilter<"ClimbLog"> | string | null
    workoutLogId?: StringNullableFilter<"ClimbLog"> | string | null
  }

  export type NoteUpsertWithoutWorkoutLogInput = {
    update: XOR<NoteUpdateWithoutWorkoutLogInput, NoteUncheckedUpdateWithoutWorkoutLogInput>
    create: XOR<NoteCreateWithoutWorkoutLogInput, NoteUncheckedCreateWithoutWorkoutLogInput>
    where?: NoteWhereInput
  }

  export type NoteUpdateToOneWithWhereWithoutWorkoutLogInput = {
    where?: NoteWhereInput
    data: XOR<NoteUpdateWithoutWorkoutLogInput, NoteUncheckedUpdateWithoutWorkoutLogInput>
  }

  export type NoteUpdateWithoutWorkoutLogInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    trainingDays?: TrainingDayUpdateManyWithoutNoteNestedInput
    exercises?: ExerciseUpdateManyWithoutNoteNestedInput
    climbs?: ClimbLogUpdateManyWithoutNoteNestedInput
    locations?: LocationUpdateManyWithoutNoteNestedInput
    routines?: RoutineUpdateManyWithoutNoteNestedInput
  }

  export type NoteUncheckedUpdateWithoutWorkoutLogInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    trainingDays?: TrainingDayUncheckedUpdateManyWithoutNoteNestedInput
    exercises?: ExerciseUncheckedUpdateManyWithoutNoteNestedInput
    climbs?: ClimbLogUncheckedUpdateManyWithoutNoteNestedInput
    locations?: LocationUncheckedUpdateManyWithoutNoteNestedInput
    routines?: RoutineUncheckedUpdateManyWithoutNoteNestedInput
  }

  export type TrainingDayUpsertWithoutWorkoutLogInput = {
    update: XOR<TrainingDayUpdateWithoutWorkoutLogInput, TrainingDayUncheckedUpdateWithoutWorkoutLogInput>
    create: XOR<TrainingDayCreateWithoutWorkoutLogInput, TrainingDayUncheckedCreateWithoutWorkoutLogInput>
    where?: TrainingDayWhereInput
  }

  export type TrainingDayUpdateToOneWithWhereWithoutWorkoutLogInput = {
    where?: TrainingDayWhereInput
    data: XOR<TrainingDayUpdateWithoutWorkoutLogInput, TrainingDayUncheckedUpdateWithoutWorkoutLogInput>
  }

  export type TrainingDayUpdateWithoutWorkoutLogInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: IntFieldUpdateOperationsInput | number
    sortOrder?: StringFieldUpdateOperationsInput | string
    routines?: RoutineUpdateManyWithoutTrainingDaysNestedInput
    microcycle?: MicrocycleUpdateOneRequiredWithoutTrainingDaysNestedInput
    recoveryLevel?: RecoveryLevelUpdateOneWithoutTrainingDaysNestedInput
    note?: NoteUpdateOneWithoutTrainingDaysNestedInput
  }

  export type TrainingDayUncheckedUpdateWithoutWorkoutLogInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: IntFieldUpdateOperationsInput | number
    sortOrder?: StringFieldUpdateOperationsInput | string
    microcycleId?: StringFieldUpdateOperationsInput | string
    recoveryLevelId?: NullableStringFieldUpdateOperationsInput | string | null
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
    routines?: RoutineUncheckedUpdateManyWithoutTrainingDaysNestedInput
  }

  export type LocationCreateWithoutClimbsInput = {
    id?: string
    name: string
    address?: string | null
    note?: NoteCreateNestedOneWithoutLocationsInput
  }

  export type LocationUncheckedCreateWithoutClimbsInput = {
    id?: string
    name: string
    address?: string | null
    noteId?: string | null
  }

  export type LocationCreateOrConnectWithoutClimbsInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutClimbsInput, LocationUncheckedCreateWithoutClimbsInput>
  }

  export type NoteCreateWithoutClimbsInput = {
    id?: string
    text: string
    trainingDays?: TrainingDayCreateNestedManyWithoutNoteInput
    exercises?: ExerciseCreateNestedManyWithoutNoteInput
    locations?: LocationCreateNestedManyWithoutNoteInput
    routines?: RoutineCreateNestedManyWithoutNoteInput
    WorkoutLog?: ExerciseLogCreateNestedManyWithoutNoteInput
  }

  export type NoteUncheckedCreateWithoutClimbsInput = {
    id?: string
    text: string
    trainingDays?: TrainingDayUncheckedCreateNestedManyWithoutNoteInput
    exercises?: ExerciseUncheckedCreateNestedManyWithoutNoteInput
    locations?: LocationUncheckedCreateNestedManyWithoutNoteInput
    routines?: RoutineUncheckedCreateNestedManyWithoutNoteInput
    WorkoutLog?: ExerciseLogUncheckedCreateNestedManyWithoutNoteInput
  }

  export type NoteCreateOrConnectWithoutClimbsInput = {
    where: NoteWhereUniqueInput
    create: XOR<NoteCreateWithoutClimbsInput, NoteUncheckedCreateWithoutClimbsInput>
  }

  export type ExerciseLogCreateWithoutClimbLogInput = {
    id?: string
    sets?: number | null
    reps?: number | null
    weight?: number | null
    duration?: number | null
    exercise: ExerciseCreateNestedOneWithoutHistoryInput
    note?: NoteCreateNestedOneWithoutWorkoutLogInput
    TrainingDay?: TrainingDayCreateNestedOneWithoutWorkoutLogInput
  }

  export type ExerciseLogUncheckedCreateWithoutClimbLogInput = {
    id?: string
    exerciseId: string
    sets?: number | null
    reps?: number | null
    weight?: number | null
    duration?: number | null
    noteId?: string | null
    trainingDayId?: string | null
  }

  export type ExerciseLogCreateOrConnectWithoutClimbLogInput = {
    where: ExerciseLogWhereUniqueInput
    create: XOR<ExerciseLogCreateWithoutClimbLogInput, ExerciseLogUncheckedCreateWithoutClimbLogInput>
  }

  export type LocationUpsertWithoutClimbsInput = {
    update: XOR<LocationUpdateWithoutClimbsInput, LocationUncheckedUpdateWithoutClimbsInput>
    create: XOR<LocationCreateWithoutClimbsInput, LocationUncheckedCreateWithoutClimbsInput>
    where?: LocationWhereInput
  }

  export type LocationUpdateToOneWithWhereWithoutClimbsInput = {
    where?: LocationWhereInput
    data: XOR<LocationUpdateWithoutClimbsInput, LocationUncheckedUpdateWithoutClimbsInput>
  }

  export type LocationUpdateWithoutClimbsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NoteUpdateOneWithoutLocationsNestedInput
  }

  export type LocationUncheckedUpdateWithoutClimbsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NoteUpsertWithoutClimbsInput = {
    update: XOR<NoteUpdateWithoutClimbsInput, NoteUncheckedUpdateWithoutClimbsInput>
    create: XOR<NoteCreateWithoutClimbsInput, NoteUncheckedCreateWithoutClimbsInput>
    where?: NoteWhereInput
  }

  export type NoteUpdateToOneWithWhereWithoutClimbsInput = {
    where?: NoteWhereInput
    data: XOR<NoteUpdateWithoutClimbsInput, NoteUncheckedUpdateWithoutClimbsInput>
  }

  export type NoteUpdateWithoutClimbsInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    trainingDays?: TrainingDayUpdateManyWithoutNoteNestedInput
    exercises?: ExerciseUpdateManyWithoutNoteNestedInput
    locations?: LocationUpdateManyWithoutNoteNestedInput
    routines?: RoutineUpdateManyWithoutNoteNestedInput
    WorkoutLog?: ExerciseLogUpdateManyWithoutNoteNestedInput
  }

  export type NoteUncheckedUpdateWithoutClimbsInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    trainingDays?: TrainingDayUncheckedUpdateManyWithoutNoteNestedInput
    exercises?: ExerciseUncheckedUpdateManyWithoutNoteNestedInput
    locations?: LocationUncheckedUpdateManyWithoutNoteNestedInput
    routines?: RoutineUncheckedUpdateManyWithoutNoteNestedInput
    WorkoutLog?: ExerciseLogUncheckedUpdateManyWithoutNoteNestedInput
  }

  export type ExerciseLogUpsertWithoutClimbLogInput = {
    update: XOR<ExerciseLogUpdateWithoutClimbLogInput, ExerciseLogUncheckedUpdateWithoutClimbLogInput>
    create: XOR<ExerciseLogCreateWithoutClimbLogInput, ExerciseLogUncheckedCreateWithoutClimbLogInput>
    where?: ExerciseLogWhereInput
  }

  export type ExerciseLogUpdateToOneWithWhereWithoutClimbLogInput = {
    where?: ExerciseLogWhereInput
    data: XOR<ExerciseLogUpdateWithoutClimbLogInput, ExerciseLogUncheckedUpdateWithoutClimbLogInput>
  }

  export type ExerciseLogUpdateWithoutClimbLogInput = {
    id?: StringFieldUpdateOperationsInput | string
    sets?: NullableIntFieldUpdateOperationsInput | number | null
    reps?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    exercise?: ExerciseUpdateOneRequiredWithoutHistoryNestedInput
    note?: NoteUpdateOneWithoutWorkoutLogNestedInput
    TrainingDay?: TrainingDayUpdateOneWithoutWorkoutLogNestedInput
  }

  export type ExerciseLogUncheckedUpdateWithoutClimbLogInput = {
    id?: StringFieldUpdateOperationsInput | string
    exerciseId?: StringFieldUpdateOperationsInput | string
    sets?: NullableIntFieldUpdateOperationsInput | number | null
    reps?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
    trainingDayId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NoteCreateWithoutLocationsInput = {
    id?: string
    text: string
    trainingDays?: TrainingDayCreateNestedManyWithoutNoteInput
    exercises?: ExerciseCreateNestedManyWithoutNoteInput
    climbs?: ClimbLogCreateNestedManyWithoutNoteInput
    routines?: RoutineCreateNestedManyWithoutNoteInput
    WorkoutLog?: ExerciseLogCreateNestedManyWithoutNoteInput
  }

  export type NoteUncheckedCreateWithoutLocationsInput = {
    id?: string
    text: string
    trainingDays?: TrainingDayUncheckedCreateNestedManyWithoutNoteInput
    exercises?: ExerciseUncheckedCreateNestedManyWithoutNoteInput
    climbs?: ClimbLogUncheckedCreateNestedManyWithoutNoteInput
    routines?: RoutineUncheckedCreateNestedManyWithoutNoteInput
    WorkoutLog?: ExerciseLogUncheckedCreateNestedManyWithoutNoteInput
  }

  export type NoteCreateOrConnectWithoutLocationsInput = {
    where: NoteWhereUniqueInput
    create: XOR<NoteCreateWithoutLocationsInput, NoteUncheckedCreateWithoutLocationsInput>
  }

  export type ClimbLogCreateWithoutLocationInput = {
    id?: string
    name?: string | null
    grade: number
    project?: boolean | null
    attempts?: number | null
    flashed?: boolean | null
    note?: NoteCreateNestedOneWithoutClimbsInput
    WorkoutLog?: ExerciseLogCreateNestedOneWithoutClimbLogInput
  }

  export type ClimbLogUncheckedCreateWithoutLocationInput = {
    id?: string
    name?: string | null
    grade: number
    project?: boolean | null
    attempts?: number | null
    flashed?: boolean | null
    noteId?: string | null
    workoutLogId?: string | null
  }

  export type ClimbLogCreateOrConnectWithoutLocationInput = {
    where: ClimbLogWhereUniqueInput
    create: XOR<ClimbLogCreateWithoutLocationInput, ClimbLogUncheckedCreateWithoutLocationInput>
  }

  export type ClimbLogCreateManyLocationInputEnvelope = {
    data: ClimbLogCreateManyLocationInput | ClimbLogCreateManyLocationInput[]
    skipDuplicates?: boolean
  }

  export type NoteUpsertWithoutLocationsInput = {
    update: XOR<NoteUpdateWithoutLocationsInput, NoteUncheckedUpdateWithoutLocationsInput>
    create: XOR<NoteCreateWithoutLocationsInput, NoteUncheckedCreateWithoutLocationsInput>
    where?: NoteWhereInput
  }

  export type NoteUpdateToOneWithWhereWithoutLocationsInput = {
    where?: NoteWhereInput
    data: XOR<NoteUpdateWithoutLocationsInput, NoteUncheckedUpdateWithoutLocationsInput>
  }

  export type NoteUpdateWithoutLocationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    trainingDays?: TrainingDayUpdateManyWithoutNoteNestedInput
    exercises?: ExerciseUpdateManyWithoutNoteNestedInput
    climbs?: ClimbLogUpdateManyWithoutNoteNestedInput
    routines?: RoutineUpdateManyWithoutNoteNestedInput
    WorkoutLog?: ExerciseLogUpdateManyWithoutNoteNestedInput
  }

  export type NoteUncheckedUpdateWithoutLocationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    trainingDays?: TrainingDayUncheckedUpdateManyWithoutNoteNestedInput
    exercises?: ExerciseUncheckedUpdateManyWithoutNoteNestedInput
    climbs?: ClimbLogUncheckedUpdateManyWithoutNoteNestedInput
    routines?: RoutineUncheckedUpdateManyWithoutNoteNestedInput
    WorkoutLog?: ExerciseLogUncheckedUpdateManyWithoutNoteNestedInput
  }

  export type ClimbLogUpsertWithWhereUniqueWithoutLocationInput = {
    where: ClimbLogWhereUniqueInput
    update: XOR<ClimbLogUpdateWithoutLocationInput, ClimbLogUncheckedUpdateWithoutLocationInput>
    create: XOR<ClimbLogCreateWithoutLocationInput, ClimbLogUncheckedCreateWithoutLocationInput>
  }

  export type ClimbLogUpdateWithWhereUniqueWithoutLocationInput = {
    where: ClimbLogWhereUniqueInput
    data: XOR<ClimbLogUpdateWithoutLocationInput, ClimbLogUncheckedUpdateWithoutLocationInput>
  }

  export type ClimbLogUpdateManyWithWhereWithoutLocationInput = {
    where: ClimbLogScalarWhereInput
    data: XOR<ClimbLogUpdateManyMutationInput, ClimbLogUncheckedUpdateManyWithoutLocationInput>
  }

  export type TrainingDayCreateWithoutRecoveryLevelInput = {
    id?: string
    date: number
    sortOrder?: string
    routines?: RoutineCreateNestedManyWithoutTrainingDaysInput
    microcycle: MicrocycleCreateNestedOneWithoutTrainingDaysInput
    workoutLog?: ExerciseLogCreateNestedManyWithoutTrainingDayInput
    note?: NoteCreateNestedOneWithoutTrainingDaysInput
  }

  export type TrainingDayUncheckedCreateWithoutRecoveryLevelInput = {
    id?: string
    date: number
    sortOrder?: string
    microcycleId: string
    noteId?: string | null
    routines?: RoutineUncheckedCreateNestedManyWithoutTrainingDaysInput
    workoutLog?: ExerciseLogUncheckedCreateNestedManyWithoutTrainingDayInput
  }

  export type TrainingDayCreateOrConnectWithoutRecoveryLevelInput = {
    where: TrainingDayWhereUniqueInput
    create: XOR<TrainingDayCreateWithoutRecoveryLevelInput, TrainingDayUncheckedCreateWithoutRecoveryLevelInput>
  }

  export type TrainingDayCreateManyRecoveryLevelInputEnvelope = {
    data: TrainingDayCreateManyRecoveryLevelInput | TrainingDayCreateManyRecoveryLevelInput[]
    skipDuplicates?: boolean
  }

  export type TrainingDayUpsertWithWhereUniqueWithoutRecoveryLevelInput = {
    where: TrainingDayWhereUniqueInput
    update: XOR<TrainingDayUpdateWithoutRecoveryLevelInput, TrainingDayUncheckedUpdateWithoutRecoveryLevelInput>
    create: XOR<TrainingDayCreateWithoutRecoveryLevelInput, TrainingDayUncheckedCreateWithoutRecoveryLevelInput>
  }

  export type TrainingDayUpdateWithWhereUniqueWithoutRecoveryLevelInput = {
    where: TrainingDayWhereUniqueInput
    data: XOR<TrainingDayUpdateWithoutRecoveryLevelInput, TrainingDayUncheckedUpdateWithoutRecoveryLevelInput>
  }

  export type TrainingDayUpdateManyWithWhereWithoutRecoveryLevelInput = {
    where: TrainingDayScalarWhereInput
    data: XOR<TrainingDayUpdateManyMutationInput, TrainingDayUncheckedUpdateManyWithoutRecoveryLevelInput>
  }

  export type TrainingDayCreateWithoutNoteInput = {
    id?: string
    date: number
    sortOrder?: string
    routines?: RoutineCreateNestedManyWithoutTrainingDaysInput
    microcycle: MicrocycleCreateNestedOneWithoutTrainingDaysInput
    recoveryLevel?: RecoveryLevelCreateNestedOneWithoutTrainingDaysInput
    workoutLog?: ExerciseLogCreateNestedManyWithoutTrainingDayInput
  }

  export type TrainingDayUncheckedCreateWithoutNoteInput = {
    id?: string
    date: number
    sortOrder?: string
    microcycleId: string
    recoveryLevelId?: string | null
    routines?: RoutineUncheckedCreateNestedManyWithoutTrainingDaysInput
    workoutLog?: ExerciseLogUncheckedCreateNestedManyWithoutTrainingDayInput
  }

  export type TrainingDayCreateOrConnectWithoutNoteInput = {
    where: TrainingDayWhereUniqueInput
    create: XOR<TrainingDayCreateWithoutNoteInput, TrainingDayUncheckedCreateWithoutNoteInput>
  }

  export type TrainingDayCreateManyNoteInputEnvelope = {
    data: TrainingDayCreateManyNoteInput | TrainingDayCreateManyNoteInput[]
    skipDuplicates?: boolean
  }

  export type ExerciseCreateWithoutNoteInput = {
    id?: string
    name: string
    type: $Enums.ExerciseType
    equipment: $Enums.Equipment
    imageId?: number | null
    history?: ExerciseLogCreateNestedManyWithoutExerciseInput
    routines?: RoutineCreateNestedManyWithoutExercisesInput
  }

  export type ExerciseUncheckedCreateWithoutNoteInput = {
    id?: string
    name: string
    type: $Enums.ExerciseType
    equipment: $Enums.Equipment
    imageId?: number | null
    history?: ExerciseLogUncheckedCreateNestedManyWithoutExerciseInput
    routines?: RoutineUncheckedCreateNestedManyWithoutExercisesInput
  }

  export type ExerciseCreateOrConnectWithoutNoteInput = {
    where: ExerciseWhereUniqueInput
    create: XOR<ExerciseCreateWithoutNoteInput, ExerciseUncheckedCreateWithoutNoteInput>
  }

  export type ExerciseCreateManyNoteInputEnvelope = {
    data: ExerciseCreateManyNoteInput | ExerciseCreateManyNoteInput[]
    skipDuplicates?: boolean
  }

  export type ClimbLogCreateWithoutNoteInput = {
    id?: string
    name?: string | null
    grade: number
    project?: boolean | null
    attempts?: number | null
    flashed?: boolean | null
    location?: LocationCreateNestedOneWithoutClimbsInput
    WorkoutLog?: ExerciseLogCreateNestedOneWithoutClimbLogInput
  }

  export type ClimbLogUncheckedCreateWithoutNoteInput = {
    id?: string
    name?: string | null
    grade: number
    project?: boolean | null
    attempts?: number | null
    flashed?: boolean | null
    locationId?: string | null
    workoutLogId?: string | null
  }

  export type ClimbLogCreateOrConnectWithoutNoteInput = {
    where: ClimbLogWhereUniqueInput
    create: XOR<ClimbLogCreateWithoutNoteInput, ClimbLogUncheckedCreateWithoutNoteInput>
  }

  export type ClimbLogCreateManyNoteInputEnvelope = {
    data: ClimbLogCreateManyNoteInput | ClimbLogCreateManyNoteInput[]
    skipDuplicates?: boolean
  }

  export type LocationCreateWithoutNoteInput = {
    id?: string
    name: string
    address?: string | null
    climbs?: ClimbLogCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateWithoutNoteInput = {
    id?: string
    name: string
    address?: string | null
    climbs?: ClimbLogUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationCreateOrConnectWithoutNoteInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutNoteInput, LocationUncheckedCreateWithoutNoteInput>
  }

  export type LocationCreateManyNoteInputEnvelope = {
    data: LocationCreateManyNoteInput | LocationCreateManyNoteInput[]
    skipDuplicates?: boolean
  }

  export type RoutineCreateWithoutNoteInput = {
    id?: string
    name: string
    duration?: number | null
    type: $Enums.RoutineType
    sortOrder: string
    exercises?: ExerciseCreateNestedManyWithoutRoutinesInput
    trainingDays?: TrainingDayCreateNestedManyWithoutRoutinesInput
    routineSubtype?: RoutineSubtypeCreateNestedOneWithoutRoutineInput
  }

  export type RoutineUncheckedCreateWithoutNoteInput = {
    id?: string
    name: string
    duration?: number | null
    type: $Enums.RoutineType
    sortOrder: string
    routineSubtypeId?: string | null
    exercises?: ExerciseUncheckedCreateNestedManyWithoutRoutinesInput
    trainingDays?: TrainingDayUncheckedCreateNestedManyWithoutRoutinesInput
  }

  export type RoutineCreateOrConnectWithoutNoteInput = {
    where: RoutineWhereUniqueInput
    create: XOR<RoutineCreateWithoutNoteInput, RoutineUncheckedCreateWithoutNoteInput>
  }

  export type RoutineCreateManyNoteInputEnvelope = {
    data: RoutineCreateManyNoteInput | RoutineCreateManyNoteInput[]
    skipDuplicates?: boolean
  }

  export type ExerciseLogCreateWithoutNoteInput = {
    id?: string
    sets?: number | null
    reps?: number | null
    weight?: number | null
    duration?: number | null
    exercise: ExerciseCreateNestedOneWithoutHistoryInput
    climbLog?: ClimbLogCreateNestedManyWithoutWorkoutLogInput
    TrainingDay?: TrainingDayCreateNestedOneWithoutWorkoutLogInput
  }

  export type ExerciseLogUncheckedCreateWithoutNoteInput = {
    id?: string
    exerciseId: string
    sets?: number | null
    reps?: number | null
    weight?: number | null
    duration?: number | null
    trainingDayId?: string | null
    climbLog?: ClimbLogUncheckedCreateNestedManyWithoutWorkoutLogInput
  }

  export type ExerciseLogCreateOrConnectWithoutNoteInput = {
    where: ExerciseLogWhereUniqueInput
    create: XOR<ExerciseLogCreateWithoutNoteInput, ExerciseLogUncheckedCreateWithoutNoteInput>
  }

  export type ExerciseLogCreateManyNoteInputEnvelope = {
    data: ExerciseLogCreateManyNoteInput | ExerciseLogCreateManyNoteInput[]
    skipDuplicates?: boolean
  }

  export type TrainingDayUpsertWithWhereUniqueWithoutNoteInput = {
    where: TrainingDayWhereUniqueInput
    update: XOR<TrainingDayUpdateWithoutNoteInput, TrainingDayUncheckedUpdateWithoutNoteInput>
    create: XOR<TrainingDayCreateWithoutNoteInput, TrainingDayUncheckedCreateWithoutNoteInput>
  }

  export type TrainingDayUpdateWithWhereUniqueWithoutNoteInput = {
    where: TrainingDayWhereUniqueInput
    data: XOR<TrainingDayUpdateWithoutNoteInput, TrainingDayUncheckedUpdateWithoutNoteInput>
  }

  export type TrainingDayUpdateManyWithWhereWithoutNoteInput = {
    where: TrainingDayScalarWhereInput
    data: XOR<TrainingDayUpdateManyMutationInput, TrainingDayUncheckedUpdateManyWithoutNoteInput>
  }

  export type ExerciseUpsertWithWhereUniqueWithoutNoteInput = {
    where: ExerciseWhereUniqueInput
    update: XOR<ExerciseUpdateWithoutNoteInput, ExerciseUncheckedUpdateWithoutNoteInput>
    create: XOR<ExerciseCreateWithoutNoteInput, ExerciseUncheckedCreateWithoutNoteInput>
  }

  export type ExerciseUpdateWithWhereUniqueWithoutNoteInput = {
    where: ExerciseWhereUniqueInput
    data: XOR<ExerciseUpdateWithoutNoteInput, ExerciseUncheckedUpdateWithoutNoteInput>
  }

  export type ExerciseUpdateManyWithWhereWithoutNoteInput = {
    where: ExerciseScalarWhereInput
    data: XOR<ExerciseUpdateManyMutationInput, ExerciseUncheckedUpdateManyWithoutNoteInput>
  }

  export type ClimbLogUpsertWithWhereUniqueWithoutNoteInput = {
    where: ClimbLogWhereUniqueInput
    update: XOR<ClimbLogUpdateWithoutNoteInput, ClimbLogUncheckedUpdateWithoutNoteInput>
    create: XOR<ClimbLogCreateWithoutNoteInput, ClimbLogUncheckedCreateWithoutNoteInput>
  }

  export type ClimbLogUpdateWithWhereUniqueWithoutNoteInput = {
    where: ClimbLogWhereUniqueInput
    data: XOR<ClimbLogUpdateWithoutNoteInput, ClimbLogUncheckedUpdateWithoutNoteInput>
  }

  export type ClimbLogUpdateManyWithWhereWithoutNoteInput = {
    where: ClimbLogScalarWhereInput
    data: XOR<ClimbLogUpdateManyMutationInput, ClimbLogUncheckedUpdateManyWithoutNoteInput>
  }

  export type LocationUpsertWithWhereUniqueWithoutNoteInput = {
    where: LocationWhereUniqueInput
    update: XOR<LocationUpdateWithoutNoteInput, LocationUncheckedUpdateWithoutNoteInput>
    create: XOR<LocationCreateWithoutNoteInput, LocationUncheckedCreateWithoutNoteInput>
  }

  export type LocationUpdateWithWhereUniqueWithoutNoteInput = {
    where: LocationWhereUniqueInput
    data: XOR<LocationUpdateWithoutNoteInput, LocationUncheckedUpdateWithoutNoteInput>
  }

  export type LocationUpdateManyWithWhereWithoutNoteInput = {
    where: LocationScalarWhereInput
    data: XOR<LocationUpdateManyMutationInput, LocationUncheckedUpdateManyWithoutNoteInput>
  }

  export type LocationScalarWhereInput = {
    AND?: LocationScalarWhereInput | LocationScalarWhereInput[]
    OR?: LocationScalarWhereInput[]
    NOT?: LocationScalarWhereInput | LocationScalarWhereInput[]
    id?: StringFilter<"Location"> | string
    name?: StringFilter<"Location"> | string
    address?: StringNullableFilter<"Location"> | string | null
    noteId?: StringNullableFilter<"Location"> | string | null
  }

  export type RoutineUpsertWithWhereUniqueWithoutNoteInput = {
    where: RoutineWhereUniqueInput
    update: XOR<RoutineUpdateWithoutNoteInput, RoutineUncheckedUpdateWithoutNoteInput>
    create: XOR<RoutineCreateWithoutNoteInput, RoutineUncheckedCreateWithoutNoteInput>
  }

  export type RoutineUpdateWithWhereUniqueWithoutNoteInput = {
    where: RoutineWhereUniqueInput
    data: XOR<RoutineUpdateWithoutNoteInput, RoutineUncheckedUpdateWithoutNoteInput>
  }

  export type RoutineUpdateManyWithWhereWithoutNoteInput = {
    where: RoutineScalarWhereInput
    data: XOR<RoutineUpdateManyMutationInput, RoutineUncheckedUpdateManyWithoutNoteInput>
  }

  export type ExerciseLogUpsertWithWhereUniqueWithoutNoteInput = {
    where: ExerciseLogWhereUniqueInput
    update: XOR<ExerciseLogUpdateWithoutNoteInput, ExerciseLogUncheckedUpdateWithoutNoteInput>
    create: XOR<ExerciseLogCreateWithoutNoteInput, ExerciseLogUncheckedCreateWithoutNoteInput>
  }

  export type ExerciseLogUpdateWithWhereUniqueWithoutNoteInput = {
    where: ExerciseLogWhereUniqueInput
    data: XOR<ExerciseLogUpdateWithoutNoteInput, ExerciseLogUncheckedUpdateWithoutNoteInput>
  }

  export type ExerciseLogUpdateManyWithWhereWithoutNoteInput = {
    where: ExerciseLogScalarWhereInput
    data: XOR<ExerciseLogUpdateManyMutationInput, ExerciseLogUncheckedUpdateManyWithoutNoteInput>
  }

  export type AccountCreateManyUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type SessionCreateManyUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type MesocycleCreateManyUserInput = {
    id?: string
    goal: string
    description?: string | null
    startDate: number
    endDate: number
    numMicros?: number
    isActive: boolean
  }

  export type AccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MesocycleUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    goal?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: IntFieldUpdateOperationsInput | number
    endDate?: IntFieldUpdateOperationsInput | number
    numMicros?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    microcycles?: MicrocycleUpdateManyWithoutMesocycleNestedInput
  }

  export type MesocycleUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    goal?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: IntFieldUpdateOperationsInput | number
    endDate?: IntFieldUpdateOperationsInput | number
    numMicros?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    microcycles?: MicrocycleUncheckedUpdateManyWithoutMesocycleNestedInput
  }

  export type MesocycleUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    goal?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: IntFieldUpdateOperationsInput | number
    endDate?: IntFieldUpdateOperationsInput | number
    numMicros?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MicrocycleCreateManyMesocycleInput = {
    id?: string
    goal: string
    startDate: number
    endDate: number
    schema: $Enums.CycleSchema
    description?: string | null
  }

  export type MicrocycleUpdateWithoutMesocycleInput = {
    id?: StringFieldUpdateOperationsInput | string
    goal?: StringFieldUpdateOperationsInput | string
    startDate?: IntFieldUpdateOperationsInput | number
    endDate?: IntFieldUpdateOperationsInput | number
    schema?: EnumCycleSchemaFieldUpdateOperationsInput | $Enums.CycleSchema
    description?: NullableStringFieldUpdateOperationsInput | string | null
    trainingDays?: TrainingDayUpdateManyWithoutMicrocycleNestedInput
  }

  export type MicrocycleUncheckedUpdateWithoutMesocycleInput = {
    id?: StringFieldUpdateOperationsInput | string
    goal?: StringFieldUpdateOperationsInput | string
    startDate?: IntFieldUpdateOperationsInput | number
    endDate?: IntFieldUpdateOperationsInput | number
    schema?: EnumCycleSchemaFieldUpdateOperationsInput | $Enums.CycleSchema
    description?: NullableStringFieldUpdateOperationsInput | string | null
    trainingDays?: TrainingDayUncheckedUpdateManyWithoutMicrocycleNestedInput
  }

  export type MicrocycleUncheckedUpdateManyWithoutMesocycleInput = {
    id?: StringFieldUpdateOperationsInput | string
    goal?: StringFieldUpdateOperationsInput | string
    startDate?: IntFieldUpdateOperationsInput | number
    endDate?: IntFieldUpdateOperationsInput | number
    schema?: EnumCycleSchemaFieldUpdateOperationsInput | $Enums.CycleSchema
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TrainingDayCreateManyMicrocycleInput = {
    id?: string
    date: number
    sortOrder?: string
    recoveryLevelId?: string | null
    noteId?: string | null
  }

  export type TrainingDayUpdateWithoutMicrocycleInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: IntFieldUpdateOperationsInput | number
    sortOrder?: StringFieldUpdateOperationsInput | string
    routines?: RoutineUpdateManyWithoutTrainingDaysNestedInput
    recoveryLevel?: RecoveryLevelUpdateOneWithoutTrainingDaysNestedInput
    workoutLog?: ExerciseLogUpdateManyWithoutTrainingDayNestedInput
    note?: NoteUpdateOneWithoutTrainingDaysNestedInput
  }

  export type TrainingDayUncheckedUpdateWithoutMicrocycleInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: IntFieldUpdateOperationsInput | number
    sortOrder?: StringFieldUpdateOperationsInput | string
    recoveryLevelId?: NullableStringFieldUpdateOperationsInput | string | null
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
    routines?: RoutineUncheckedUpdateManyWithoutTrainingDaysNestedInput
    workoutLog?: ExerciseLogUncheckedUpdateManyWithoutTrainingDayNestedInput
  }

  export type TrainingDayUncheckedUpdateManyWithoutMicrocycleInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: IntFieldUpdateOperationsInput | number
    sortOrder?: StringFieldUpdateOperationsInput | string
    recoveryLevelId?: NullableStringFieldUpdateOperationsInput | string | null
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ExerciseLogCreateManyTrainingDayInput = {
    id?: string
    exerciseId: string
    sets?: number | null
    reps?: number | null
    weight?: number | null
    duration?: number | null
    noteId?: string | null
  }

  export type RoutineUpdateWithoutTrainingDaysInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumRoutineTypeFieldUpdateOperationsInput | $Enums.RoutineType
    sortOrder?: StringFieldUpdateOperationsInput | string
    exercises?: ExerciseUpdateManyWithoutRoutinesNestedInput
    routineSubtype?: RoutineSubtypeUpdateOneWithoutRoutineNestedInput
    note?: NoteUpdateOneWithoutRoutinesNestedInput
  }

  export type RoutineUncheckedUpdateWithoutTrainingDaysInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumRoutineTypeFieldUpdateOperationsInput | $Enums.RoutineType
    sortOrder?: StringFieldUpdateOperationsInput | string
    routineSubtypeId?: NullableStringFieldUpdateOperationsInput | string | null
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
    exercises?: ExerciseUncheckedUpdateManyWithoutRoutinesNestedInput
  }

  export type RoutineUncheckedUpdateManyWithoutTrainingDaysInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumRoutineTypeFieldUpdateOperationsInput | $Enums.RoutineType
    sortOrder?: StringFieldUpdateOperationsInput | string
    routineSubtypeId?: NullableStringFieldUpdateOperationsInput | string | null
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ExerciseLogUpdateWithoutTrainingDayInput = {
    id?: StringFieldUpdateOperationsInput | string
    sets?: NullableIntFieldUpdateOperationsInput | number | null
    reps?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    exercise?: ExerciseUpdateOneRequiredWithoutHistoryNestedInput
    climbLog?: ClimbLogUpdateManyWithoutWorkoutLogNestedInput
    note?: NoteUpdateOneWithoutWorkoutLogNestedInput
  }

  export type ExerciseLogUncheckedUpdateWithoutTrainingDayInput = {
    id?: StringFieldUpdateOperationsInput | string
    exerciseId?: StringFieldUpdateOperationsInput | string
    sets?: NullableIntFieldUpdateOperationsInput | number | null
    reps?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
    climbLog?: ClimbLogUncheckedUpdateManyWithoutWorkoutLogNestedInput
  }

  export type ExerciseLogUncheckedUpdateManyWithoutTrainingDayInput = {
    id?: StringFieldUpdateOperationsInput | string
    exerciseId?: StringFieldUpdateOperationsInput | string
    sets?: NullableIntFieldUpdateOperationsInput | number | null
    reps?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ExerciseUpdateWithoutRoutinesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumExerciseTypeFieldUpdateOperationsInput | $Enums.ExerciseType
    equipment?: EnumEquipmentFieldUpdateOperationsInput | $Enums.Equipment
    imageId?: NullableIntFieldUpdateOperationsInput | number | null
    note?: NoteUpdateOneWithoutExercisesNestedInput
    history?: ExerciseLogUpdateManyWithoutExerciseNestedInput
  }

  export type ExerciseUncheckedUpdateWithoutRoutinesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumExerciseTypeFieldUpdateOperationsInput | $Enums.ExerciseType
    equipment?: EnumEquipmentFieldUpdateOperationsInput | $Enums.Equipment
    imageId?: NullableIntFieldUpdateOperationsInput | number | null
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
    history?: ExerciseLogUncheckedUpdateManyWithoutExerciseNestedInput
  }

  export type ExerciseUncheckedUpdateManyWithoutRoutinesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumExerciseTypeFieldUpdateOperationsInput | $Enums.ExerciseType
    equipment?: EnumEquipmentFieldUpdateOperationsInput | $Enums.Equipment
    imageId?: NullableIntFieldUpdateOperationsInput | number | null
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TrainingDayUpdateWithoutRoutinesInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: IntFieldUpdateOperationsInput | number
    sortOrder?: StringFieldUpdateOperationsInput | string
    microcycle?: MicrocycleUpdateOneRequiredWithoutTrainingDaysNestedInput
    recoveryLevel?: RecoveryLevelUpdateOneWithoutTrainingDaysNestedInput
    workoutLog?: ExerciseLogUpdateManyWithoutTrainingDayNestedInput
    note?: NoteUpdateOneWithoutTrainingDaysNestedInput
  }

  export type TrainingDayUncheckedUpdateWithoutRoutinesInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: IntFieldUpdateOperationsInput | number
    sortOrder?: StringFieldUpdateOperationsInput | string
    microcycleId?: StringFieldUpdateOperationsInput | string
    recoveryLevelId?: NullableStringFieldUpdateOperationsInput | string | null
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
    workoutLog?: ExerciseLogUncheckedUpdateManyWithoutTrainingDayNestedInput
  }

  export type TrainingDayUncheckedUpdateManyWithoutRoutinesInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: IntFieldUpdateOperationsInput | number
    sortOrder?: StringFieldUpdateOperationsInput | string
    microcycleId?: StringFieldUpdateOperationsInput | string
    recoveryLevelId?: NullableStringFieldUpdateOperationsInput | string | null
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RoutineCreateManyRoutineSubtypeInput = {
    id?: string
    name: string
    duration?: number | null
    type: $Enums.RoutineType
    sortOrder: string
    noteId?: string | null
  }

  export type RoutineUpdateWithoutRoutineSubtypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumRoutineTypeFieldUpdateOperationsInput | $Enums.RoutineType
    sortOrder?: StringFieldUpdateOperationsInput | string
    exercises?: ExerciseUpdateManyWithoutRoutinesNestedInput
    trainingDays?: TrainingDayUpdateManyWithoutRoutinesNestedInput
    note?: NoteUpdateOneWithoutRoutinesNestedInput
  }

  export type RoutineUncheckedUpdateWithoutRoutineSubtypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumRoutineTypeFieldUpdateOperationsInput | $Enums.RoutineType
    sortOrder?: StringFieldUpdateOperationsInput | string
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
    exercises?: ExerciseUncheckedUpdateManyWithoutRoutinesNestedInput
    trainingDays?: TrainingDayUncheckedUpdateManyWithoutRoutinesNestedInput
  }

  export type RoutineUncheckedUpdateManyWithoutRoutineSubtypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumRoutineTypeFieldUpdateOperationsInput | $Enums.RoutineType
    sortOrder?: StringFieldUpdateOperationsInput | string
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ExerciseLogCreateManyExerciseInput = {
    id?: string
    sets?: number | null
    reps?: number | null
    weight?: number | null
    duration?: number | null
    noteId?: string | null
    trainingDayId?: string | null
  }

  export type ExerciseLogUpdateWithoutExerciseInput = {
    id?: StringFieldUpdateOperationsInput | string
    sets?: NullableIntFieldUpdateOperationsInput | number | null
    reps?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    climbLog?: ClimbLogUpdateManyWithoutWorkoutLogNestedInput
    note?: NoteUpdateOneWithoutWorkoutLogNestedInput
    TrainingDay?: TrainingDayUpdateOneWithoutWorkoutLogNestedInput
  }

  export type ExerciseLogUncheckedUpdateWithoutExerciseInput = {
    id?: StringFieldUpdateOperationsInput | string
    sets?: NullableIntFieldUpdateOperationsInput | number | null
    reps?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
    trainingDayId?: NullableStringFieldUpdateOperationsInput | string | null
    climbLog?: ClimbLogUncheckedUpdateManyWithoutWorkoutLogNestedInput
  }

  export type ExerciseLogUncheckedUpdateManyWithoutExerciseInput = {
    id?: StringFieldUpdateOperationsInput | string
    sets?: NullableIntFieldUpdateOperationsInput | number | null
    reps?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
    trainingDayId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RoutineUpdateWithoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumRoutineTypeFieldUpdateOperationsInput | $Enums.RoutineType
    sortOrder?: StringFieldUpdateOperationsInput | string
    trainingDays?: TrainingDayUpdateManyWithoutRoutinesNestedInput
    routineSubtype?: RoutineSubtypeUpdateOneWithoutRoutineNestedInput
    note?: NoteUpdateOneWithoutRoutinesNestedInput
  }

  export type RoutineUncheckedUpdateWithoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumRoutineTypeFieldUpdateOperationsInput | $Enums.RoutineType
    sortOrder?: StringFieldUpdateOperationsInput | string
    routineSubtypeId?: NullableStringFieldUpdateOperationsInput | string | null
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
    trainingDays?: TrainingDayUncheckedUpdateManyWithoutRoutinesNestedInput
  }

  export type RoutineUncheckedUpdateManyWithoutExercisesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumRoutineTypeFieldUpdateOperationsInput | $Enums.RoutineType
    sortOrder?: StringFieldUpdateOperationsInput | string
    routineSubtypeId?: NullableStringFieldUpdateOperationsInput | string | null
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ClimbLogCreateManyWorkoutLogInput = {
    id?: string
    name?: string | null
    grade: number
    project?: boolean | null
    attempts?: number | null
    flashed?: boolean | null
    locationId?: string | null
    noteId?: string | null
  }

  export type ClimbLogUpdateWithoutWorkoutLogInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: IntFieldUpdateOperationsInput | number
    project?: NullableBoolFieldUpdateOperationsInput | boolean | null
    attempts?: NullableIntFieldUpdateOperationsInput | number | null
    flashed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    location?: LocationUpdateOneWithoutClimbsNestedInput
    note?: NoteUpdateOneWithoutClimbsNestedInput
  }

  export type ClimbLogUncheckedUpdateWithoutWorkoutLogInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: IntFieldUpdateOperationsInput | number
    project?: NullableBoolFieldUpdateOperationsInput | boolean | null
    attempts?: NullableIntFieldUpdateOperationsInput | number | null
    flashed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ClimbLogUncheckedUpdateManyWithoutWorkoutLogInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: IntFieldUpdateOperationsInput | number
    project?: NullableBoolFieldUpdateOperationsInput | boolean | null
    attempts?: NullableIntFieldUpdateOperationsInput | number | null
    flashed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ClimbLogCreateManyLocationInput = {
    id?: string
    name?: string | null
    grade: number
    project?: boolean | null
    attempts?: number | null
    flashed?: boolean | null
    noteId?: string | null
    workoutLogId?: string | null
  }

  export type ClimbLogUpdateWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: IntFieldUpdateOperationsInput | number
    project?: NullableBoolFieldUpdateOperationsInput | boolean | null
    attempts?: NullableIntFieldUpdateOperationsInput | number | null
    flashed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    note?: NoteUpdateOneWithoutClimbsNestedInput
    WorkoutLog?: ExerciseLogUpdateOneWithoutClimbLogNestedInput
  }

  export type ClimbLogUncheckedUpdateWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: IntFieldUpdateOperationsInput | number
    project?: NullableBoolFieldUpdateOperationsInput | boolean | null
    attempts?: NullableIntFieldUpdateOperationsInput | number | null
    flashed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
    workoutLogId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ClimbLogUncheckedUpdateManyWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: IntFieldUpdateOperationsInput | number
    project?: NullableBoolFieldUpdateOperationsInput | boolean | null
    attempts?: NullableIntFieldUpdateOperationsInput | number | null
    flashed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
    workoutLogId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TrainingDayCreateManyRecoveryLevelInput = {
    id?: string
    date: number
    sortOrder?: string
    microcycleId: string
    noteId?: string | null
  }

  export type TrainingDayUpdateWithoutRecoveryLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: IntFieldUpdateOperationsInput | number
    sortOrder?: StringFieldUpdateOperationsInput | string
    routines?: RoutineUpdateManyWithoutTrainingDaysNestedInput
    microcycle?: MicrocycleUpdateOneRequiredWithoutTrainingDaysNestedInput
    workoutLog?: ExerciseLogUpdateManyWithoutTrainingDayNestedInput
    note?: NoteUpdateOneWithoutTrainingDaysNestedInput
  }

  export type TrainingDayUncheckedUpdateWithoutRecoveryLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: IntFieldUpdateOperationsInput | number
    sortOrder?: StringFieldUpdateOperationsInput | string
    microcycleId?: StringFieldUpdateOperationsInput | string
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
    routines?: RoutineUncheckedUpdateManyWithoutTrainingDaysNestedInput
    workoutLog?: ExerciseLogUncheckedUpdateManyWithoutTrainingDayNestedInput
  }

  export type TrainingDayUncheckedUpdateManyWithoutRecoveryLevelInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: IntFieldUpdateOperationsInput | number
    sortOrder?: StringFieldUpdateOperationsInput | string
    microcycleId?: StringFieldUpdateOperationsInput | string
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TrainingDayCreateManyNoteInput = {
    id?: string
    date: number
    sortOrder?: string
    microcycleId: string
    recoveryLevelId?: string | null
  }

  export type ExerciseCreateManyNoteInput = {
    id?: string
    name: string
    type: $Enums.ExerciseType
    equipment: $Enums.Equipment
    imageId?: number | null
  }

  export type ClimbLogCreateManyNoteInput = {
    id?: string
    name?: string | null
    grade: number
    project?: boolean | null
    attempts?: number | null
    flashed?: boolean | null
    locationId?: string | null
    workoutLogId?: string | null
  }

  export type LocationCreateManyNoteInput = {
    id?: string
    name: string
    address?: string | null
  }

  export type RoutineCreateManyNoteInput = {
    id?: string
    name: string
    duration?: number | null
    type: $Enums.RoutineType
    sortOrder: string
    routineSubtypeId?: string | null
  }

  export type ExerciseLogCreateManyNoteInput = {
    id?: string
    exerciseId: string
    sets?: number | null
    reps?: number | null
    weight?: number | null
    duration?: number | null
    trainingDayId?: string | null
  }

  export type TrainingDayUpdateWithoutNoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: IntFieldUpdateOperationsInput | number
    sortOrder?: StringFieldUpdateOperationsInput | string
    routines?: RoutineUpdateManyWithoutTrainingDaysNestedInput
    microcycle?: MicrocycleUpdateOneRequiredWithoutTrainingDaysNestedInput
    recoveryLevel?: RecoveryLevelUpdateOneWithoutTrainingDaysNestedInput
    workoutLog?: ExerciseLogUpdateManyWithoutTrainingDayNestedInput
  }

  export type TrainingDayUncheckedUpdateWithoutNoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: IntFieldUpdateOperationsInput | number
    sortOrder?: StringFieldUpdateOperationsInput | string
    microcycleId?: StringFieldUpdateOperationsInput | string
    recoveryLevelId?: NullableStringFieldUpdateOperationsInput | string | null
    routines?: RoutineUncheckedUpdateManyWithoutTrainingDaysNestedInput
    workoutLog?: ExerciseLogUncheckedUpdateManyWithoutTrainingDayNestedInput
  }

  export type TrainingDayUncheckedUpdateManyWithoutNoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: IntFieldUpdateOperationsInput | number
    sortOrder?: StringFieldUpdateOperationsInput | string
    microcycleId?: StringFieldUpdateOperationsInput | string
    recoveryLevelId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ExerciseUpdateWithoutNoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumExerciseTypeFieldUpdateOperationsInput | $Enums.ExerciseType
    equipment?: EnumEquipmentFieldUpdateOperationsInput | $Enums.Equipment
    imageId?: NullableIntFieldUpdateOperationsInput | number | null
    history?: ExerciseLogUpdateManyWithoutExerciseNestedInput
    routines?: RoutineUpdateManyWithoutExercisesNestedInput
  }

  export type ExerciseUncheckedUpdateWithoutNoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumExerciseTypeFieldUpdateOperationsInput | $Enums.ExerciseType
    equipment?: EnumEquipmentFieldUpdateOperationsInput | $Enums.Equipment
    imageId?: NullableIntFieldUpdateOperationsInput | number | null
    history?: ExerciseLogUncheckedUpdateManyWithoutExerciseNestedInput
    routines?: RoutineUncheckedUpdateManyWithoutExercisesNestedInput
  }

  export type ExerciseUncheckedUpdateManyWithoutNoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumExerciseTypeFieldUpdateOperationsInput | $Enums.ExerciseType
    equipment?: EnumEquipmentFieldUpdateOperationsInput | $Enums.Equipment
    imageId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ClimbLogUpdateWithoutNoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: IntFieldUpdateOperationsInput | number
    project?: NullableBoolFieldUpdateOperationsInput | boolean | null
    attempts?: NullableIntFieldUpdateOperationsInput | number | null
    flashed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    location?: LocationUpdateOneWithoutClimbsNestedInput
    WorkoutLog?: ExerciseLogUpdateOneWithoutClimbLogNestedInput
  }

  export type ClimbLogUncheckedUpdateWithoutNoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: IntFieldUpdateOperationsInput | number
    project?: NullableBoolFieldUpdateOperationsInput | boolean | null
    attempts?: NullableIntFieldUpdateOperationsInput | number | null
    flashed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    workoutLogId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ClimbLogUncheckedUpdateManyWithoutNoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: IntFieldUpdateOperationsInput | number
    project?: NullableBoolFieldUpdateOperationsInput | boolean | null
    attempts?: NullableIntFieldUpdateOperationsInput | number | null
    flashed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    workoutLogId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LocationUpdateWithoutNoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    climbs?: ClimbLogUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateWithoutNoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    climbs?: ClimbLogUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateManyWithoutNoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RoutineUpdateWithoutNoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumRoutineTypeFieldUpdateOperationsInput | $Enums.RoutineType
    sortOrder?: StringFieldUpdateOperationsInput | string
    exercises?: ExerciseUpdateManyWithoutRoutinesNestedInput
    trainingDays?: TrainingDayUpdateManyWithoutRoutinesNestedInput
    routineSubtype?: RoutineSubtypeUpdateOneWithoutRoutineNestedInput
  }

  export type RoutineUncheckedUpdateWithoutNoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumRoutineTypeFieldUpdateOperationsInput | $Enums.RoutineType
    sortOrder?: StringFieldUpdateOperationsInput | string
    routineSubtypeId?: NullableStringFieldUpdateOperationsInput | string | null
    exercises?: ExerciseUncheckedUpdateManyWithoutRoutinesNestedInput
    trainingDays?: TrainingDayUncheckedUpdateManyWithoutRoutinesNestedInput
  }

  export type RoutineUncheckedUpdateManyWithoutNoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumRoutineTypeFieldUpdateOperationsInput | $Enums.RoutineType
    sortOrder?: StringFieldUpdateOperationsInput | string
    routineSubtypeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ExerciseLogUpdateWithoutNoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    sets?: NullableIntFieldUpdateOperationsInput | number | null
    reps?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    exercise?: ExerciseUpdateOneRequiredWithoutHistoryNestedInput
    climbLog?: ClimbLogUpdateManyWithoutWorkoutLogNestedInput
    TrainingDay?: TrainingDayUpdateOneWithoutWorkoutLogNestedInput
  }

  export type ExerciseLogUncheckedUpdateWithoutNoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    exerciseId?: StringFieldUpdateOperationsInput | string
    sets?: NullableIntFieldUpdateOperationsInput | number | null
    reps?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    trainingDayId?: NullableStringFieldUpdateOperationsInput | string | null
    climbLog?: ClimbLogUncheckedUpdateManyWithoutWorkoutLogNestedInput
  }

  export type ExerciseLogUncheckedUpdateManyWithoutNoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    exerciseId?: StringFieldUpdateOperationsInput | string
    sets?: NullableIntFieldUpdateOperationsInput | number | null
    reps?: NullableIntFieldUpdateOperationsInput | number | null
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    trainingDayId?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MesocycleCountOutputTypeDefaultArgs instead
     */
    export type MesocycleCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = MesocycleCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MicrocycleCountOutputTypeDefaultArgs instead
     */
    export type MicrocycleCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = MicrocycleCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TrainingDayCountOutputTypeDefaultArgs instead
     */
    export type TrainingDayCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = TrainingDayCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RoutineCountOutputTypeDefaultArgs instead
     */
    export type RoutineCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = RoutineCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RoutineSubtypeCountOutputTypeDefaultArgs instead
     */
    export type RoutineSubtypeCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = RoutineSubtypeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ExerciseCountOutputTypeDefaultArgs instead
     */
    export type ExerciseCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ExerciseCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ExerciseLogCountOutputTypeDefaultArgs instead
     */
    export type ExerciseLogCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ExerciseLogCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LocationCountOutputTypeDefaultArgs instead
     */
    export type LocationCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = LocationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RecoveryLevelCountOutputTypeDefaultArgs instead
     */
    export type RecoveryLevelCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = RecoveryLevelCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NoteCountOutputTypeDefaultArgs instead
     */
    export type NoteCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = NoteCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AccountDefaultArgs instead
     */
    export type AccountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = AccountDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SessionDefaultArgs instead
     */
    export type SessionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = SessionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VerificationTokenDefaultArgs instead
     */
    export type VerificationTokenArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = VerificationTokenDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MesocycleDefaultArgs instead
     */
    export type MesocycleArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = MesocycleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MicrocycleDefaultArgs instead
     */
    export type MicrocycleArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = MicrocycleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TrainingDayDefaultArgs instead
     */
    export type TrainingDayArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = TrainingDayDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RoutineDefaultArgs instead
     */
    export type RoutineArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = RoutineDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RoutineSubtypeDefaultArgs instead
     */
    export type RoutineSubtypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = RoutineSubtypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ExerciseDefaultArgs instead
     */
    export type ExerciseArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ExerciseDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ExerciseLogDefaultArgs instead
     */
    export type ExerciseLogArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ExerciseLogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClimbLogDefaultArgs instead
     */
    export type ClimbLogArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ClimbLogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LocationDefaultArgs instead
     */
    export type LocationArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = LocationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RecoveryLevelDefaultArgs instead
     */
    export type RecoveryLevelArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = RecoveryLevelDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NoteDefaultArgs instead
     */
    export type NoteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = NoteDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}